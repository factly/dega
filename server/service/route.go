package service

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/factly/dega-server/config"
	"github.com/factly/x/healthx"
	"github.com/factly/x/renderx"

	_ "github.com/factly/dega-server/docs" // docs is generated by Swag CLI, you have to import it.
	factCheckService "github.com/factly/dega-server/plugin/fact-check"
	"github.com/factly/dega-server/plugin/fact-check/shared"
	"github.com/factly/dega-server/service/core"
	"github.com/factly/dega-server/service/core/action/author"
	"github.com/factly/dega-server/service/core/action/category"
	"github.com/factly/dega-server/service/core/action/format"
	"github.com/factly/dega-server/service/core/action/meta"
	"github.com/factly/dega-server/service/core/action/post"
	"github.com/factly/dega-server/service/core/action/request/organisation"
	"github.com/factly/dega-server/service/core/action/request/space"
	"github.com/factly/dega-server/service/core/action/tag"
	factCheck "github.com/factly/dega-server/service/fact-check"
	"github.com/factly/dega-server/service/podcast"
	podcastAction "github.com/factly/dega-server/service/podcast/action"
	"github.com/factly/dega-server/service/reindex"
	"github.com/factly/dega-server/service/user"
	"github.com/factly/dega-server/util"
	"github.com/factly/x/loggerx"
	"github.com/factly/x/middlewarex"
	"github.com/go-chi/chi"
	"github.com/go-chi/chi/middleware"
	"github.com/spf13/viper"
	httpSwagger "github.com/swaggo/http-swagger"
)

func RegisterRoutes() http.Handler {
	r := chi.NewRouter()

	r.Use(middleware.RequestID)
	r.Use(loggerx.Init())
	r.Use(middleware.RealIP)
	r.Use(middleware.Recoverer)
	r.Use(middleware.Heartbeat("/ping"))
	// r.Use(middlewarex.GormRequestID(&config.DB))

	if viper.IsSet("mode") && viper.GetString("mode") == "development" {
		r.Get("/swagger/*", httpSwagger.WrapHandler)
		fmt.Println("Swagger @ http://localhost:7789/swagger/index.html")
	}

	if viper.IsSet("iframely_url") {
		r.Mount("/meta", meta.Router())
	}

	sqlDB, _ := config.DB.DB()

	healthx.RegisterRoutes(r, healthx.ReadyCheckers{
		"database":    sqlDB.Ping,
		"keto":        util.KetoChecker,
		"kavach":      util.KavachChecker,
		"kratos":      util.KratosChecker,
		"meilisearch": util.MeiliChecker,
	})

	//Earlier
	// r.With(middlewarex.CheckUser, middlewarex.CheckSpace(1), util.GenerateOrganisation, middlewarex.CheckAccess("dega", 1, util.GetOrganisation)).Group(func(r chi.Router) {
	// 	r.Mount("/core", core.Router())
	// 	r.With(util.FactCheckPermission).Mount("/fact-check", factCheck.Router())
	// 	r.With(util.PodcastPermission).Mount("/podcast", podcast.Router())
	// 	r.Mount("/reindex", reindex.Router())
	// })

	// After Latest kavach changes
	r.With(middlewarex.CheckUser, middlewarex.CheckSpace(1), util.GenerateOrganisation, middlewarex.CheckAccess("dega", 1, util.GetOrganisation)).Group(func(r chi.Router) {
		r.Mount("/core", core.Router())
		r.With(util.FactCheckPermission).Mount("/fact-check", factCheck.Router())
		r.With(util.PodcastPermission).Mount("/podcast", podcast.Router())
		r.Mount("/reindex", reindex.Router())
	})

	r.With(middlewarex.CheckUser).Group(func(r chi.Router) {
		r.Post("/core/requests/organisations", organisation.Create)
		r.With(middlewarex.CheckSpace(1)).Post("/core/requests/spaces", space.Create)
	})

	r.Group(func(r chi.Router) {
		r.Mount("/user", user.Router())
	})

	factCheckPlugin, err := factCheckService.GetFactcheckPlugin()
	if err != nil {
		fmt.Println("Error while getting factcheck plugin", err)
	}

	r.With().Get("/*", func(w http.ResponseWriter, r *http.Request) {
		var body interface{}
		err = json.NewDecoder(r.Body).Decode(&body)

		request := shared.Request{
			Host:       r.Host,
			Header:     r.Header,
			Body:       body,
			Method:     r.Method,
			URL:        r.URL.String(),
			RemoteAddr: r.RemoteAddr,
			RequestURI: r.RequestURI,
			Proto:      r.Proto,
		}
		resp, err := factCheckPlugin.HandleRequest(request)
		if err != nil {
			fmt.Println("Error while handling request:", err)
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
		renderx.JSON(w, http.StatusOK, resp)
	})

	return r
}

func RegisterFeedsRoutes() http.Handler {
	r := chi.NewRouter()

	r.Use(middleware.RequestID)
	r.Use(loggerx.Init())
	r.Use(middleware.RealIP)
	r.Use(middleware.Recoverer)
	r.Use(middleware.Heartbeat("/ping"))

	r.Route("/spaces/{space_id}", func(r chi.Router) {
		r.Get("/posts/feed", post.Feeds)
		r.Get("/posts/feeds/rss2", post.Feeds)
		r.Get("/tags/{slugs}/feed", tag.Feeds)
		r.Get("/tags/{slugs}/feeds/rss2", tag.Feeds)
		r.Get("/categories/{slugs}/feed", category.Feeds)
		r.Get("/categories/{slugs}/feeds/rss2", category.Feeds)
		r.Get("/formats/{slugs}/feed", format.Feeds)
		r.Get("/formats/{slugs}/feeds/rss2", format.Feeds)
		r.Get("/authors/{slugs}/feed", author.Feeds)
		r.Get("/authors/{slugs}/feeds/rss2", author.Feeds)

		r.Get("/podcasts/{podcast_slug}/feed", podcastAction.Feeds)
		r.Get("/podcasts/{podcast_slug}/feeds/rss2", podcastAction.Feeds)
	})

	return r
}

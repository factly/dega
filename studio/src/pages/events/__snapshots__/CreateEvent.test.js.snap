// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Event create component snapshot testing should render the component 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [MockFunction],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <CreateEvent>
    <HelmetWrapper
      defer={true}
      encodeSpecialCharacters={true}
      title="Create Event"
    >
      <SideEffect(NullComponent)
        defer={true}
        encodeSpecialCharacters={true}
        title="Create Event"
      >
        <NullComponent
          defer={true}
          encodeSpecialCharacters={true}
          title="Create Event"
        />
      </SideEffect(NullComponent)>
    </HelmetWrapper>
    <EventForm
      onCreate={[Function]}
    >
      <ForwardRef(InternalForm)
        form={
          Object {
            "__INTERNAL__": Object {
              "itemRef": [Function],
              "name": "create-event",
            },
            "_init": true,
            "getFieldError": [Function],
            "getFieldInstance": [Function],
            "getFieldValue": [Function],
            "getFieldWarning": [Function],
            "getFieldsError": [Function],
            "getFieldsValue": [Function],
            "getInternalHooks": [Function],
            "isFieldTouched": [Function],
            "isFieldValidating": [Function],
            "isFieldsTouched": [Function],
            "isFieldsValidating": [Function],
            "resetFields": [Function],
            "scrollToField": [Function],
            "setFields": [Function],
            "setFieldsValue": [Function],
            "submit": [Function],
            "validateFields": [Function],
          }
        }
        initialValues={Object {}}
        labelCol={
          Object {
            "span": 9,
          }
        }
        name="create-event"
        onFinish={[Function]}
        wrapperCol={
          Object {
            "span": 7,
          }
        }
      >
        <SizeContextProvider>
          <ForwardRef(Form)
            className="ant-form ant-form-horizontal"
            form={
              Object {
                "__INTERNAL__": Object {
                  "itemRef": [Function],
                  "name": "create-event",
                },
                "_init": true,
                "getFieldError": [Function],
                "getFieldInstance": [Function],
                "getFieldValue": [Function],
                "getFieldWarning": [Function],
                "getFieldsError": [Function],
                "getFieldsValue": [Function],
                "getInternalHooks": [Function],
                "isFieldTouched": [Function],
                "isFieldValidating": [Function],
                "isFieldsTouched": [Function],
                "isFieldsValidating": [Function],
                "resetFields": [Function],
                "scrollToField": [Function],
                "setFields": [Function],
                "setFieldsValue": [Function],
                "submit": [Function],
                "validateFields": [Function],
              }
            }
            id="create-event"
            initialValues={Object {}}
            name="create-event"
            onFinish={[Function]}
            onFinishFailed={[Function]}
          >
            <form
              className="ant-form ant-form-horizontal"
              id="create-event"
              onReset={[Function]}
              onSubmit={[Function]}
            >
              <FormItem
                label="Name"
                name="name"
              >
                <WrapperField
                  label="Name"
                  messageVariables={
                    Object {
                      "label": "Name",
                    }
                  }
                  name="name"
                  onMetaChange={[Function]}
                  trigger="onChange"
                  validateTrigger="onChange"
                >
                  <Field
                    fieldContext={
                      Object {
                        "__INTERNAL__": Object {
                          "itemRef": [Function],
                          "name": "create-event",
                        },
                        "_init": true,
                        "getFieldError": [Function],
                        "getFieldInstance": [Function],
                        "getFieldValue": [Function],
                        "getFieldWarning": [Function],
                        "getFieldsError": [Function],
                        "getFieldsValue": [Function],
                        "getInternalHooks": [Function],
                        "isFieldTouched": [Function],
                        "isFieldValidating": [Function],
                        "isFieldsTouched": [Function],
                        "isFieldsValidating": [Function],
                        "resetFields": [Function],
                        "scrollToField": [Function],
                        "setFields": [Function],
                        "setFieldsValue": [Function],
                        "submit": [Function],
                        "validateFields": [Function],
                        "validateTrigger": "onChange",
                      }
                    }
                    key="_name"
                    label="Name"
                    messageVariables={
                      Object {
                        "label": "Name",
                      }
                    }
                    name={
                      Array [
                        "name",
                      ]
                    }
                    onMetaChange={[Function]}
                    trigger="onChange"
                    validateTrigger="onChange"
                    valuePropName="value"
                  >
                    <Row
                      className="ant-form-item"
                      key="row"
                    >
                      <div
                        className="ant-row ant-form-item"
                        role="row"
                        style={Object {}}
                      >
                        <FormItemLabel
                          htmlFor="create-event_name"
                          label="Name"
                          name="name"
                          prefixCls="ant-form"
                          required={false}
                          requiredMark={true}
                        >
                          <Col
                            className="ant-form-item-label"
                            span={9}
                          >
                            <div
                              className="ant-col ant-col-9 ant-form-item-label"
                              role="cell"
                              style={Object {}}
                            >
                              <label
                                className=""
                                htmlFor="create-event_name"
                                title="Name"
                              >
                                Name
                              </label>
                            </div>
                          </Col>
                        </FormItemLabel>
                        <FormItemInput
                          errors={Array []}
                          label="Name"
                          name={Array []}
                          prefixCls="ant-form"
                          status=""
                          touched={false}
                          validating={false}
                          warnings={Array []}
                        >
                          <Col
                            className="ant-form-item-control"
                            span={7}
                          >
                            <div
                              className="ant-col ant-col-7 ant-form-item-control"
                              role="cell"
                              style={Object {}}
                            >
                              <div
                                className="ant-form-item-control-input"
                              >
                                <div
                                  className="ant-form-item-control-input-content"
                                >
                                  <Component
                                    update={
                                      <ForwardRef
                                        placeholder="Enter name"
                                      />
                                    }
                                  >
                                    <ForwardRef
                                      id="create-event_name"
                                      onChange={[Function]}
                                      placeholder="Enter name"
                                    >
                                      <ForwardRef
                                        affixWrapperClassName=""
                                        groupClassName=""
                                        id="create-event_name"
                                        inputClassName=""
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        placeholder="Enter name"
                                        prefixCls="ant-input"
                                        wrapperClassName=""
                                      >
                                        <BaseInput
                                          affixWrapperClassName=""
                                          focused={false}
                                          groupClassName=""
                                          handleReset={[Function]}
                                          id="create-event_name"
                                          inputElement={
                                            <input
                                              className="ant-input"
                                              id="create-event_name"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              onKeyDown={[Function]}
                                              placeholder="Enter name"
                                              type="text"
                                            />
                                          }
                                          placeholder="Enter name"
                                          prefixCls="ant-input"
                                          suffix={null}
                                          triggerFocus={[Function]}
                                          value=""
                                          wrapperClassName=""
                                        >
                                          <input
                                            className="ant-input"
                                            id="create-event_name"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            onKeyDown={[Function]}
                                            placeholder="Enter name"
                                            type="text"
                                            value=""
                                          />
                                        </BaseInput>
                                      </ForwardRef>
                                    </ForwardRef>
                                  </Component>
                                </div>
                              </div>
                              <ErrorList
                                className="ant-form-item-explain-connected"
                                errors={Array []}
                                helpStatus=""
                                warnings={Array []}
                              >
                                <CSSMotion
                                  motionAppear={false}
                                  motionDeadline={500}
                                  motionEnter={false}
                                  motionName="ant-show-help"
                                  onAppearActive={[Function]}
                                  onAppearEnd={[Function]}
                                  onAppearStart={[Function]}
                                  onEnterActive={[Function]}
                                  onEnterEnd={[Function]}
                                  onEnterStart={[Function]}
                                  onLeaveActive={[Function]}
                                  onLeaveEnd={[Function]}
                                  onLeaveStart={[Function]}
                                  visible={false}
                                >
                                  <DomWrapper />
                                </CSSMotion>
                              </ErrorList>
                            </div>
                          </Col>
                        </FormItemInput>
                      </div>
                    </Row>
                  </Field>
                </WrapperField>
              </FormItem>
              <FormItem
                label="Tags"
                name="tags"
              >
                <WrapperField
                  label="Tags"
                  messageVariables={
                    Object {
                      "label": "Tags",
                    }
                  }
                  name="tags"
                  onMetaChange={[Function]}
                  trigger="onChange"
                  validateTrigger="onChange"
                >
                  <Field
                    fieldContext={
                      Object {
                        "__INTERNAL__": Object {
                          "itemRef": [Function],
                          "name": "create-event",
                        },
                        "_init": true,
                        "getFieldError": [Function],
                        "getFieldInstance": [Function],
                        "getFieldValue": [Function],
                        "getFieldWarning": [Function],
                        "getFieldsError": [Function],
                        "getFieldsValue": [Function],
                        "getInternalHooks": [Function],
                        "isFieldTouched": [Function],
                        "isFieldValidating": [Function],
                        "isFieldsTouched": [Function],
                        "isFieldsValidating": [Function],
                        "resetFields": [Function],
                        "scrollToField": [Function],
                        "setFields": [Function],
                        "setFieldsValue": [Function],
                        "submit": [Function],
                        "validateFields": [Function],
                        "validateTrigger": "onChange",
                      }
                    }
                    key="_tags"
                    label="Tags"
                    messageVariables={
                      Object {
                        "label": "Tags",
                      }
                    }
                    name={
                      Array [
                        "tags",
                      ]
                    }
                    onMetaChange={[Function]}
                    trigger="onChange"
                    validateTrigger="onChange"
                    valuePropName="value"
                  >
                    <Row
                      className="ant-form-item"
                      key="row"
                    >
                      <div
                        className="ant-row ant-form-item"
                        role="row"
                        style={Object {}}
                      >
                        <FormItemLabel
                          htmlFor="create-event_tags"
                          label="Tags"
                          name="tags"
                          prefixCls="ant-form"
                          required={false}
                          requiredMark={true}
                        >
                          <Col
                            className="ant-form-item-label"
                            span={9}
                          >
                            <div
                              className="ant-col ant-col-9 ant-form-item-label"
                              role="cell"
                              style={Object {}}
                            >
                              <label
                                className=""
                                htmlFor="create-event_tags"
                                title="Tags"
                              >
                                Tags
                              </label>
                            </div>
                          </Col>
                        </FormItemLabel>
                        <FormItemInput
                          errors={Array []}
                          label="Tags"
                          name={Array []}
                          prefixCls="ant-form"
                          status=""
                          touched={false}
                          validating={false}
                          warnings={Array []}
                        >
                          <Col
                            className="ant-form-item-control"
                            span={7}
                          >
                            <div
                              className="ant-col ant-col-7 ant-form-item-control"
                              role="cell"
                              style={Object {}}
                            >
                              <div
                                className="ant-form-item-control-input"
                              >
                                <div
                                  className="ant-form-item-control-input-content"
                                >
                                  <Component
                                    update={
                                      <MONACOEditor
                                        language="json"
                                      />
                                    }
                                  >
                                    <MONACOEditor
                                      id="create-event_tags"
                                      language="json"
                                      onChange={[Function]}
                                    >
                                      <MonacoEditor
                                        height="240"
                                        language="json"
                                        onChange={[Function]}
                                        options={
                                          Object {
                                            "autoClosingBrackets": "auto",
                                            "autoClosingQuotes": "auto",
                                            "cursorBlinking": "smooth",
                                            "folding": true,
                                            "lineNumbersMinChars": 4,
                                            "minimap": Object {
                                              "enabled": false,
                                            },
                                            "scrollBeyondLastLine": false,
                                            "scrollbar": Object {
                                              "alwaysConsumeMouseWheel": false,
                                            },
                                            "theme": "vs-dark",
                                            "wordWrap": "on",
                                          }
                                        }
                                        width={440}
                                      >
                                        <div />
                                      </MonacoEditor>
                                    </MONACOEditor>
                                  </Component>
                                </div>
                              </div>
                              <ErrorList
                                className="ant-form-item-explain-connected"
                                errors={Array []}
                                helpStatus=""
                                warnings={Array []}
                              >
                                <CSSMotion
                                  motionAppear={false}
                                  motionDeadline={500}
                                  motionEnter={false}
                                  motionName="ant-show-help"
                                  onAppearActive={[Function]}
                                  onAppearEnd={[Function]}
                                  onAppearStart={[Function]}
                                  onEnterActive={[Function]}
                                  onEnterEnd={[Function]}
                                  onEnterStart={[Function]}
                                  onLeaveActive={[Function]}
                                  onLeaveEnd={[Function]}
                                  onLeaveStart={[Function]}
                                  visible={false}
                                >
                                  <DomWrapper />
                                </CSSMotion>
                              </ErrorList>
                            </div>
                          </Col>
                        </FormItemInput>
                      </div>
                    </Row>
                  </Field>
                </WrapperField>
              </FormItem>
              <FormItem
                wrapperCol={
                  Object {
                    "offset": 10,
                    "span": 14,
                  }
                }
              >
                <Row
                  className="ant-form-item"
                  key="row"
                >
                  <div
                    className="ant-row ant-form-item"
                    role="row"
                    style={Object {}}
                  >
                    <FormItemLabel
                      prefixCls="ant-form"
                      requiredMark={true}
                      wrapperCol={
                        Object {
                          "offset": 10,
                          "span": 14,
                        }
                      }
                    />
                    <FormItemInput
                      errors={Array []}
                      name={Array []}
                      prefixCls="ant-form"
                      status=""
                      touched={false}
                      validating={false}
                      warnings={Array []}
                      wrapperCol={
                        Object {
                          "offset": 10,
                          "span": 14,
                        }
                      }
                    >
                      <Col
                        className="ant-form-item-control"
                        offset={10}
                        span={14}
                      >
                        <div
                          className="ant-col ant-col-14 ant-col-offset-10 ant-form-item-control"
                          role="cell"
                          style={Object {}}
                        >
                          <div
                            className="ant-form-item-control-input"
                          >
                            <div
                              className="ant-form-item-control-input-content"
                            >
                              <Space>
                                <div
                                  className="ant-space ant-space-horizontal ant-space-align-center"
                                  style={Object {}}
                                >
                                  <Item
                                    className="ant-space-item"
                                    direction="horizontal"
                                    index={0}
                                    key="ant-space-item-0"
                                    marginDirection="marginRight"
                                    wrap={false}
                                  >
                                    <div
                                      className="ant-space-item"
                                      style={
                                        Object {
                                          "marginRight": 8,
                                        }
                                      }
                                    >
                                      <Button
                                        htmlType="submit"
                                        type="primary"
                                      >
                                        <Wave
                                          disabled={false}
                                        >
                                          <button
                                            className="ant-btn ant-btn-primary"
                                            onClick={[Function]}
                                            type="submit"
                                          >
                                            <LoadingIcon
                                              existIcon={false}
                                              loading={false}
                                              prefixCls="ant-btn"
                                            >
                                              <CSSMotion
                                                motionName="ant-btn-loading-icon-motion"
                                                onAppearActive={[Function]}
                                                onAppearStart={[Function]}
                                                onEnterActive={[Function]}
                                                onEnterStart={[Function]}
                                                onLeaveActive={[Function]}
                                                onLeaveStart={[Function]}
                                                removeOnLeave={true}
                                                visible={false}
                                              >
                                                <DomWrapper />
                                              </CSSMotion>
                                            </LoadingIcon>
                                            <span
                                              key=".0"
                                            >
                                              Submit
                                            </span>
                                          </button>
                                        </Wave>
                                      </Button>
                                    </div>
                                  </Item>
                                  <Item
                                    className="ant-space-item"
                                    direction="horizontal"
                                    index={1}
                                    key="ant-space-item-1"
                                    marginDirection="marginRight"
                                    wrap={false}
                                  >
                                    <div
                                      className="ant-space-item"
                                      style={Object {}}
                                    >
                                      <Button
                                        htmlType="button"
                                        onClick={[Function]}
                                      >
                                        <Wave
                                          disabled={false}
                                        >
                                          <button
                                            className="ant-btn ant-btn-default"
                                            onClick={[Function]}
                                            type="button"
                                          >
                                            <LoadingIcon
                                              existIcon={false}
                                              loading={false}
                                              prefixCls="ant-btn"
                                            >
                                              <CSSMotion
                                                motionName="ant-btn-loading-icon-motion"
                                                onAppearActive={[Function]}
                                                onAppearStart={[Function]}
                                                onEnterActive={[Function]}
                                                onEnterStart={[Function]}
                                                onLeaveActive={[Function]}
                                                onLeaveStart={[Function]}
                                                removeOnLeave={true}
                                                visible={false}
                                              >
                                                <DomWrapper />
                                              </CSSMotion>
                                            </LoadingIcon>
                                            <span
                                              key=".0"
                                            >
                                              Reset
                                            </span>
                                          </button>
                                        </Wave>
                                      </Button>
                                    </div>
                                  </Item>
                                </div>
                              </Space>
                            </div>
                          </div>
                          <ErrorList
                            className="ant-form-item-explain-connected"
                            errors={Array []}
                            helpStatus=""
                            warnings={Array []}
                          >
                            <CSSMotion
                              motionAppear={false}
                              motionDeadline={500}
                              motionEnter={false}
                              motionName="ant-show-help"
                              onAppearActive={[Function]}
                              onAppearEnd={[Function]}
                              onAppearStart={[Function]}
                              onEnterActive={[Function]}
                              onEnterEnd={[Function]}
                              onEnterStart={[Function]}
                              onLeaveActive={[Function]}
                              onLeaveEnd={[Function]}
                              onLeaveStart={[Function]}
                              visible={false}
                            >
                              <DomWrapper />
                            </CSSMotion>
                          </ErrorList>
                        </div>
                      </Col>
                    </FormItemInput>
                  </div>
                </Row>
              </FormItem>
            </form>
          </ForwardRef(Form)>
        </SizeContextProvider>
      </ForwardRef(InternalForm)>
    </EventForm>
  </CreateEvent>
</Provider>
`;

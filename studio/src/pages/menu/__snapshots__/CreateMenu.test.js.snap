// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Menus create component snapshot testing should render the componet 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [MockFunction],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <CreateMenu>
    <div>
      <HelmetWrapper
        defer={true}
        encodeSpecialCharacters={true}
        title="Create Menu"
      >
        <SideEffect(NullComponent)
          defer={true}
          encodeSpecialCharacters={true}
          title="Create Menu"
        >
          <NullComponent
            defer={true}
            encodeSpecialCharacters={true}
            title="Create Menu"
          />
        </SideEffect(NullComponent)>
      </HelmetWrapper>
      <MenuForm
        onCreate={[Function]}
      >
        <div>
          <ForwardRef(InternalForm)
            form={
              Object {
                "__INTERNAL__": Object {
                  "itemRef": [Function],
                  "name": undefined,
                },
                "_init": true,
                "getFieldError": [Function],
                "getFieldInstance": [Function],
                "getFieldValue": [Function],
                "getFieldWarning": [Function],
                "getFieldsError": [Function],
                "getFieldsValue": [Function],
                "getInternalHooks": [Function],
                "isFieldTouched": [Function],
                "isFieldValidating": [Function],
                "isFieldsTouched": [Function],
                "isFieldsValidating": [Function],
                "resetFields": [Function],
                "scrollToField": [Function],
                "setFields": [Function],
                "setFieldsValue": [Function],
                "submit": [Function],
                "validateFields": [Function],
              }
            }
            initialValues={Object {}}
            onFinish={[Function]}
            onValuesChange={[Function]}
          >
            <SizeContextProvider>
              <ForwardRef(Form)
                className="ant-form ant-form-horizontal"
                form={
                  Object {
                    "__INTERNAL__": Object {
                      "itemRef": [Function],
                      "name": undefined,
                    },
                    "_init": true,
                    "getFieldError": [Function],
                    "getFieldInstance": [Function],
                    "getFieldValue": [Function],
                    "getFieldWarning": [Function],
                    "getFieldsError": [Function],
                    "getFieldsValue": [Function],
                    "getInternalHooks": [Function],
                    "isFieldTouched": [Function],
                    "isFieldValidating": [Function],
                    "isFieldsTouched": [Function],
                    "isFieldsValidating": [Function],
                    "resetFields": [Function],
                    "scrollToField": [Function],
                    "setFields": [Function],
                    "setFieldsValue": [Function],
                    "submit": [Function],
                    "validateFields": [Function],
                  }
                }
                initialValues={Object {}}
                onFinish={[Function]}
                onFinishFailed={[Function]}
                onValuesChange={[Function]}
              >
                <form
                  className="ant-form ant-form-horizontal"
                  onReset={[Function]}
                  onSubmit={[Function]}
                >
                  <FormItem
                    label="Name"
                    name="name"
                    rules={
                      Array [
                        Object {
                          "message": "Please input the name!",
                          "required": true,
                        },
                      ]
                    }
                  >
                    <WrapperField
                      label="Name"
                      messageVariables={
                        Object {
                          "label": "Name",
                        }
                      }
                      name="name"
                      onMetaChange={[Function]}
                      rules={
                        Array [
                          Object {
                            "message": "Please input the name!",
                            "required": true,
                          },
                        ]
                      }
                      trigger="onChange"
                      validateTrigger="onChange"
                    >
                      <Field
                        fieldContext={
                          Object {
                            "__INTERNAL__": Object {
                              "itemRef": [Function],
                              "name": undefined,
                            },
                            "_init": true,
                            "getFieldError": [Function],
                            "getFieldInstance": [Function],
                            "getFieldValue": [Function],
                            "getFieldWarning": [Function],
                            "getFieldsError": [Function],
                            "getFieldsValue": [Function],
                            "getInternalHooks": [Function],
                            "isFieldTouched": [Function],
                            "isFieldValidating": [Function],
                            "isFieldsTouched": [Function],
                            "isFieldsValidating": [Function],
                            "resetFields": [Function],
                            "scrollToField": [Function],
                            "setFields": [Function],
                            "setFieldsValue": [Function],
                            "submit": [Function],
                            "validateFields": [Function],
                            "validateTrigger": "onChange",
                          }
                        }
                        key="_name"
                        label="Name"
                        messageVariables={
                          Object {
                            "label": "Name",
                          }
                        }
                        name={
                          Array [
                            "name",
                          ]
                        }
                        onMetaChange={[Function]}
                        rules={
                          Array [
                            Object {
                              "message": "Please input the name!",
                              "required": true,
                            },
                          ]
                        }
                        trigger="onChange"
                        validateTrigger="onChange"
                        valuePropName="value"
                      >
                        <Row
                          className="ant-form-item"
                          key="row"
                        >
                          <div
                            className="ant-row ant-form-item"
                            role="row"
                            style={Object {}}
                          >
                            <FormItemLabel
                              htmlFor="name"
                              label="Name"
                              name="name"
                              prefixCls="ant-form"
                              required={true}
                              requiredMark={true}
                              rules={
                                Array [
                                  Object {
                                    "message": "Please input the name!",
                                    "required": true,
                                  },
                                ]
                              }
                            >
                              <Col
                                className="ant-form-item-label"
                              >
                                <div
                                  className="ant-col ant-form-item-label"
                                  role="cell"
                                  style={Object {}}
                                >
                                  <label
                                    className="ant-form-item-required"
                                    htmlFor="name"
                                    title="Name"
                                  >
                                    Name
                                  </label>
                                </div>
                              </Col>
                            </FormItemLabel>
                            <FormItemInput
                              errors={Array []}
                              label="Name"
                              name={Array []}
                              prefixCls="ant-form"
                              rules={
                                Array [
                                  Object {
                                    "message": "Please input the name!",
                                    "required": true,
                                  },
                                ]
                              }
                              status=""
                              touched={false}
                              validating={false}
                              warnings={Array []}
                            >
                              <Col
                                className="ant-form-item-control"
                              >
                                <div
                                  className="ant-col ant-form-item-control"
                                  role="cell"
                                  style={Object {}}
                                >
                                  <div
                                    className="ant-form-item-control-input"
                                  >
                                    <div
                                      className="ant-form-item-control-input-content"
                                    >
                                      <Component
                                        update={
                                          <ForwardRef
                                            placeholder="Enter name"
                                          />
                                        }
                                      >
                                        <ForwardRef
                                          id="name"
                                          onChange={[Function]}
                                          placeholder="Enter name"
                                        >
                                          <ForwardRef
                                            affixWrapperClassName=""
                                            groupClassName=""
                                            id="name"
                                            inputClassName=""
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            placeholder="Enter name"
                                            prefixCls="ant-input"
                                            wrapperClassName=""
                                          >
                                            <BaseInput
                                              affixWrapperClassName=""
                                              focused={false}
                                              groupClassName=""
                                              handleReset={[Function]}
                                              id="name"
                                              inputElement={
                                                <input
                                                  className="ant-input"
                                                  id="name"
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onFocus={[Function]}
                                                  onKeyDown={[Function]}
                                                  placeholder="Enter name"
                                                  type="text"
                                                />
                                              }
                                              placeholder="Enter name"
                                              prefixCls="ant-input"
                                              suffix={null}
                                              triggerFocus={[Function]}
                                              value=""
                                              wrapperClassName=""
                                            >
                                              <input
                                                className="ant-input"
                                                id="name"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                placeholder="Enter name"
                                                type="text"
                                                value=""
                                              />
                                            </BaseInput>
                                          </ForwardRef>
                                        </ForwardRef>
                                      </Component>
                                    </div>
                                  </div>
                                  <ErrorList
                                    className="ant-form-item-explain-connected"
                                    errors={Array []}
                                    helpStatus=""
                                    warnings={Array []}
                                  >
                                    <CSSMotion
                                      motionAppear={false}
                                      motionDeadline={500}
                                      motionEnter={false}
                                      motionName="ant-show-help"
                                      onAppearActive={[Function]}
                                      onAppearEnd={[Function]}
                                      onAppearStart={[Function]}
                                      onEnterActive={[Function]}
                                      onEnterEnd={[Function]}
                                      onEnterStart={[Function]}
                                      onLeaveActive={[Function]}
                                      onLeaveEnd={[Function]}
                                      onLeaveStart={[Function]}
                                      visible={false}
                                    >
                                      <DomWrapper />
                                    </CSSMotion>
                                  </ErrorList>
                                </div>
                              </Col>
                            </FormItemInput>
                          </div>
                        </Row>
                      </Field>
                    </WrapperField>
                  </FormItem>
                  <FormList
                    name="menu"
                  >
                    <List
                      name="menu"
                    >
                      <WrapperField
                        isList={true}
                        name={Array []}
                        shouldUpdate={[Function]}
                      >
                        <Field
                          fieldContext={
                            Object {
                              "__INTERNAL__": Object {
                                "itemRef": [Function],
                                "name": undefined,
                              },
                              "_init": true,
                              "getFieldError": [Function],
                              "getFieldInstance": [Function],
                              "getFieldValue": [Function],
                              "getFieldWarning": [Function],
                              "getFieldsError": [Function],
                              "getFieldsValue": [Function],
                              "getInternalHooks": [Function],
                              "isFieldTouched": [Function],
                              "isFieldValidating": [Function],
                              "isFieldsTouched": [Function],
                              "isFieldsValidating": [Function],
                              "prefixName": Array [
                                "menu",
                              ],
                              "resetFields": [Function],
                              "scrollToField": [Function],
                              "setFields": [Function],
                              "setFieldsValue": [Function],
                              "submit": [Function],
                              "validateFields": [Function],
                              "validateTrigger": "onChange",
                            }
                          }
                          isList={true}
                          key="_"
                          name={Array []}
                          shouldUpdate={[Function]}
                          trigger="onChange"
                          valuePropName="value"
                        >
                          <div>
                            <Button
                              onClick={[Function]}
                            >
                              <Wave
                                disabled={false}
                              >
                                <button
                                  className="ant-btn ant-btn-default"
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <LoadingIcon
                                    existIcon={false}
                                    loading={false}
                                    prefixCls="ant-btn"
                                  >
                                    <CSSMotion
                                      motionName="ant-btn-loading-icon-motion"
                                      onAppearActive={[Function]}
                                      onAppearStart={[Function]}
                                      onEnterActive={[Function]}
                                      onEnterStart={[Function]}
                                      onLeaveActive={[Function]}
                                      onLeaveStart={[Function]}
                                      removeOnLeave={true}
                                      visible={false}
                                    >
                                      <DomWrapper />
                                    </CSSMotion>
                                  </LoadingIcon>
                                  <ForwardRef(PlusOutlined)
                                    key=".0"
                                  >
                                    <AntdIcon
                                      icon={
                                        Object {
                                          "icon": Object {
                                            "attrs": Object {
                                              "focusable": "false",
                                              "viewBox": "64 64 896 896",
                                            },
                                            "children": Array [
                                              Object {
                                                "attrs": Object {},
                                                "children": Array [
                                                  Object {
                                                    "attrs": Object {},
                                                    "tag": "style",
                                                  },
                                                ],
                                                "tag": "defs",
                                              },
                                              Object {
                                                "attrs": Object {
                                                  "d": "M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z",
                                                },
                                                "tag": "path",
                                              },
                                              Object {
                                                "attrs": Object {
                                                  "d": "M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z",
                                                },
                                                "tag": "path",
                                              },
                                            ],
                                            "tag": "svg",
                                          },
                                          "name": "plus",
                                          "theme": "outlined",
                                        }
                                      }
                                    >
                                      <span
                                        aria-label="plus"
                                        className="anticon anticon-plus"
                                        role="img"
                                      >
                                        <IconReact
                                          icon={
                                            Object {
                                              "icon": Object {
                                                "attrs": Object {
                                                  "focusable": "false",
                                                  "viewBox": "64 64 896 896",
                                                },
                                                "children": Array [
                                                  Object {
                                                    "attrs": Object {},
                                                    "children": Array [
                                                      Object {
                                                        "attrs": Object {},
                                                        "tag": "style",
                                                      },
                                                    ],
                                                    "tag": "defs",
                                                  },
                                                  Object {
                                                    "attrs": Object {
                                                      "d": "M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z",
                                                    },
                                                    "tag": "path",
                                                  },
                                                  Object {
                                                    "attrs": Object {
                                                      "d": "M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z",
                                                    },
                                                    "tag": "path",
                                                  },
                                                ],
                                                "tag": "svg",
                                              },
                                              "name": "plus",
                                              "theme": "outlined",
                                            }
                                          }
                                        >
                                          <svg
                                            aria-hidden="true"
                                            data-icon="plus"
                                            fill="currentColor"
                                            focusable="false"
                                            height="1em"
                                            key="svg-plus"
                                            viewBox="64 64 896 896"
                                            width="1em"
                                          >
                                            <defs
                                              key="svg-plus-svg-0"
                                            >
                                              <style
                                                key="svg-plus-svg-0-defs-0"
                                              />
                                            </defs>
                                            <path
                                              d="M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z"
                                              key="svg-plus-svg-1"
                                            />
                                            <path
                                              d="M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z"
                                              key="svg-plus-svg-2"
                                            />
                                          </svg>
                                        </IconReact>
                                      </span>
                                    </AntdIcon>
                                  </ForwardRef(PlusOutlined)>
                                  <span
                                    key=".1"
                                  >
                                     Add menu
                                  </span>
                                </button>
                              </Wave>
                            </Button>
                          </div>
                        </Field>
                      </WrapperField>
                    </List>
                  </FormList>
                  <FormItem
                    label="Metafields"
                    name="meta_fields"
                    style={
                      Object {
                        "marginTop": "20px",
                      }
                    }
                  >
                    <WrapperField
                      label="Metafields"
                      messageVariables={
                        Object {
                          "label": "Metafields",
                        }
                      }
                      name="meta_fields"
                      onMetaChange={[Function]}
                      style={
                        Object {
                          "marginTop": "20px",
                        }
                      }
                      trigger="onChange"
                      validateTrigger="onChange"
                    >
                      <Field
                        fieldContext={
                          Object {
                            "__INTERNAL__": Object {
                              "itemRef": [Function],
                              "name": undefined,
                            },
                            "_init": true,
                            "getFieldError": [Function],
                            "getFieldInstance": [Function],
                            "getFieldValue": [Function],
                            "getFieldWarning": [Function],
                            "getFieldsError": [Function],
                            "getFieldsValue": [Function],
                            "getInternalHooks": [Function],
                            "isFieldTouched": [Function],
                            "isFieldValidating": [Function],
                            "isFieldsTouched": [Function],
                            "isFieldsValidating": [Function],
                            "resetFields": [Function],
                            "scrollToField": [Function],
                            "setFields": [Function],
                            "setFieldsValue": [Function],
                            "submit": [Function],
                            "validateFields": [Function],
                            "validateTrigger": "onChange",
                          }
                        }
                        key="_meta_fields"
                        label="Metafields"
                        messageVariables={
                          Object {
                            "label": "Metafields",
                          }
                        }
                        name={
                          Array [
                            "meta_fields",
                          ]
                        }
                        onMetaChange={[Function]}
                        style={
                          Object {
                            "marginTop": "20px",
                          }
                        }
                        trigger="onChange"
                        validateTrigger="onChange"
                        valuePropName="value"
                      >
                        <Row
                          className="ant-form-item"
                          key="row"
                          style={
                            Object {
                              "marginTop": "20px",
                            }
                          }
                        >
                          <div
                            className="ant-row ant-form-item"
                            role="row"
                            style={
                              Object {
                                "marginTop": "20px",
                              }
                            }
                          >
                            <FormItemLabel
                              htmlFor="meta_fields"
                              label="Metafields"
                              name="meta_fields"
                              prefixCls="ant-form"
                              required={false}
                              requiredMark={true}
                              style={
                                Object {
                                  "marginTop": "20px",
                                }
                              }
                            >
                              <Col
                                className="ant-form-item-label"
                              >
                                <div
                                  className="ant-col ant-form-item-label"
                                  role="cell"
                                  style={Object {}}
                                >
                                  <label
                                    className=""
                                    htmlFor="meta_fields"
                                    title="Metafields"
                                  >
                                    Metafields
                                  </label>
                                </div>
                              </Col>
                            </FormItemLabel>
                            <FormItemInput
                              errors={Array []}
                              label="Metafields"
                              name={Array []}
                              prefixCls="ant-form"
                              status=""
                              style={
                                Object {
                                  "marginTop": "20px",
                                }
                              }
                              touched={false}
                              validating={false}
                              warnings={Array []}
                            >
                              <Col
                                className="ant-form-item-control"
                              >
                                <div
                                  className="ant-col ant-form-item-control"
                                  role="cell"
                                  style={Object {}}
                                >
                                  <div
                                    className="ant-form-item-control-input"
                                  >
                                    <div
                                      className="ant-form-item-control-input-content"
                                    >
                                      <Component
                                        update={
                                          <MONACOEditor
                                            language="json"
                                          />
                                        }
                                      >
                                        <MONACOEditor
                                          id="meta_fields"
                                          language="json"
                                          onChange={[Function]}
                                        >
                                          <MonacoEditor
                                            height="240"
                                            language="json"
                                            onChange={[Function]}
                                            options={
                                              Object {
                                                "autoClosingBrackets": "auto",
                                                "autoClosingQuotes": "auto",
                                                "cursorBlinking": "smooth",
                                                "folding": true,
                                                "lineNumbersMinChars": 4,
                                                "minimap": Object {
                                                  "enabled": false,
                                                },
                                                "scrollBeyondLastLine": false,
                                                "scrollbar": Object {
                                                  "alwaysConsumeMouseWheel": false,
                                                },
                                                "theme": "vs-dark",
                                                "wordWrap": "on",
                                              }
                                            }
                                            width={440}
                                          >
                                            <div />
                                          </MonacoEditor>
                                        </MONACOEditor>
                                      </Component>
                                    </div>
                                  </div>
                                  <ErrorList
                                    className="ant-form-item-explain-connected"
                                    errors={Array []}
                                    helpStatus=""
                                    warnings={Array []}
                                  >
                                    <CSSMotion
                                      motionAppear={false}
                                      motionDeadline={500}
                                      motionEnter={false}
                                      motionName="ant-show-help"
                                      onAppearActive={[Function]}
                                      onAppearEnd={[Function]}
                                      onAppearStart={[Function]}
                                      onEnterActive={[Function]}
                                      onEnterEnd={[Function]}
                                      onEnterStart={[Function]}
                                      onLeaveActive={[Function]}
                                      onLeaveEnd={[Function]}
                                      onLeaveStart={[Function]}
                                      visible={false}
                                    >
                                      <DomWrapper />
                                    </CSSMotion>
                                  </ErrorList>
                                </div>
                              </Col>
                            </FormItemInput>
                          </div>
                        </Row>
                      </Field>
                    </WrapperField>
                  </FormItem>
                  <FormItem>
                    <Row
                      className="ant-form-item"
                      key="row"
                    >
                      <div
                        className="ant-row ant-form-item"
                        role="row"
                        style={Object {}}
                      >
                        <FormItemLabel
                          prefixCls="ant-form"
                          requiredMark={true}
                        />
                        <FormItemInput
                          errors={Array []}
                          name={Array []}
                          prefixCls="ant-form"
                          status=""
                          touched={false}
                          validating={false}
                          warnings={Array []}
                        >
                          <Col
                            className="ant-form-item-control"
                          >
                            <div
                              className="ant-col ant-form-item-control"
                              role="cell"
                              style={Object {}}
                            >
                              <div
                                className="ant-form-item-control-input"
                              >
                                <div
                                  className="ant-form-item-control-input-content"
                                >
                                  <Button
                                    disabled={true}
                                    htmlType="submit"
                                  >
                                    <Wave
                                      disabled={false}
                                    >
                                      <button
                                        className="ant-btn ant-btn-default"
                                        disabled={true}
                                        onClick={[Function]}
                                        type="submit"
                                      >
                                        <LoadingIcon
                                          existIcon={false}
                                          loading={false}
                                          prefixCls="ant-btn"
                                        >
                                          <CSSMotion
                                            motionName="ant-btn-loading-icon-motion"
                                            onAppearActive={[Function]}
                                            onAppearStart={[Function]}
                                            onEnterActive={[Function]}
                                            onEnterStart={[Function]}
                                            onLeaveActive={[Function]}
                                            onLeaveStart={[Function]}
                                            removeOnLeave={true}
                                            visible={false}
                                          >
                                            <DomWrapper />
                                          </CSSMotion>
                                        </LoadingIcon>
                                        <span
                                          key=".0"
                                        >
                                          Submit
                                        </span>
                                      </button>
                                    </Wave>
                                  </Button>
                                </div>
                              </div>
                              <ErrorList
                                className="ant-form-item-explain-connected"
                                errors={Array []}
                                helpStatus=""
                                warnings={Array []}
                              >
                                <CSSMotion
                                  motionAppear={false}
                                  motionDeadline={500}
                                  motionEnter={false}
                                  motionName="ant-show-help"
                                  onAppearActive={[Function]}
                                  onAppearEnd={[Function]}
                                  onAppearStart={[Function]}
                                  onEnterActive={[Function]}
                                  onEnterEnd={[Function]}
                                  onEnterStart={[Function]}
                                  onLeaveActive={[Function]}
                                  onLeaveEnd={[Function]}
                                  onLeaveStart={[Function]}
                                  visible={false}
                                >
                                  <DomWrapper />
                                </CSSMotion>
                              </ErrorList>
                            </div>
                          </Col>
                        </FormItemInput>
                      </div>
                    </Row>
                  </FormItem>
                </form>
              </ForwardRef(Form)>
            </SizeContextProvider>
          </ForwardRef(InternalForm)>
        </div>
      </MenuForm>
    </div>
  </CreateMenu>
</Provider>
`;

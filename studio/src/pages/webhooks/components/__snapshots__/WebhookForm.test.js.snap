// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Webhook form component snapshot testing should match component with data 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <WebhookForm
    data={
      Object {
        "enabled": true,
        "events": Array [],
        "name": "webhook",
        "url": "url",
      }
    }
    onCreate={[MockFunction]}
  >
    <ForwardRef(InternalForm)
      form={
        Object {
          "__INTERNAL__": Object {
            "itemRef": [Function],
            "name": "create-webhook",
          },
          "getFieldError": [Function],
          "getFieldInstance": [Function],
          "getFieldValue": [Function],
          "getFieldsError": [Function],
          "getFieldsValue": [Function],
          "getInternalHooks": [Function],
          "isFieldTouched": [Function],
          "isFieldValidating": [Function],
          "isFieldsTouched": [Function],
          "isFieldsValidating": [Function],
          "resetFields": [Function],
          "scrollToField": [Function],
          "setFields": [Function],
          "setFieldsValue": [Function],
          "submit": [Function],
          "validateFields": [Function],
        }
      }
      initialValues={
        Object {
          "enabled": true,
          "events": Array [],
          "name": "webhook",
          "url": "url",
        }
      }
      labelCol={
        Object {
          "span": 8,
        }
      }
      name="create-webhook"
      onFinish={[Function]}
      onValuesChange={[Function]}
      wrapperCol={
        Object {
          "span": 10,
        }
      }
    >
      <SizeContextProvider>
        <ForwardRef(Form)
          className="ant-form ant-form-horizontal"
          form={
            Object {
              "__INTERNAL__": Object {
                "itemRef": [Function],
                "name": "create-webhook",
              },
              "getFieldError": [Function],
              "getFieldInstance": [Function],
              "getFieldValue": [Function],
              "getFieldsError": [Function],
              "getFieldsValue": [Function],
              "getInternalHooks": [Function],
              "isFieldTouched": [Function],
              "isFieldValidating": [Function],
              "isFieldsTouched": [Function],
              "isFieldsValidating": [Function],
              "resetFields": [Function],
              "scrollToField": [Function],
              "setFields": [Function],
              "setFieldsValue": [Function],
              "submit": [Function],
              "validateFields": [Function],
            }
          }
          id="create-webhook"
          initialValues={
            Object {
              "enabled": true,
              "events": Array [],
              "name": "webhook",
              "url": "url",
            }
          }
          name="create-webhook"
          onFinish={[Function]}
          onFinishFailed={[Function]}
          onValuesChange={[Function]}
        >
          <form
            className="ant-form ant-form-horizontal"
            id="create-webhook"
            onReset={[Function]}
            onSubmit={[Function]}
          >
            <FormItem
              label="Name"
              name="name"
            >
              <WrapperField
                label="Name"
                messageVariables={
                  Object {
                    "label": "Name",
                  }
                }
                name="name"
                onReset={[Function]}
                trigger="onChange"
                validateTrigger="onChange"
              >
                <Field
                  fieldContext={
                    Object {
                      "__INTERNAL__": Object {
                        "itemRef": [Function],
                        "name": "create-webhook",
                      },
                      "getFieldError": [Function],
                      "getFieldInstance": [Function],
                      "getFieldValue": [Function],
                      "getFieldsError": [Function],
                      "getFieldsValue": [Function],
                      "getInternalHooks": [Function],
                      "isFieldTouched": [Function],
                      "isFieldValidating": [Function],
                      "isFieldsTouched": [Function],
                      "isFieldsValidating": [Function],
                      "resetFields": [Function],
                      "scrollToField": [Function],
                      "setFields": [Function],
                      "setFieldsValue": [Function],
                      "submit": [Function],
                      "validateFields": [Function],
                      "validateTrigger": "onChange",
                    }
                  }
                  key="_name"
                  label="Name"
                  messageVariables={
                    Object {
                      "label": "Name",
                    }
                  }
                  name={
                    Array [
                      "name",
                    ]
                  }
                  onReset={[Function]}
                  trigger="onChange"
                  validateTrigger="onChange"
                  valuePropName="value"
                >
                  <Row
                    className="ant-form-item"
                    key="row"
                  >
                    <div
                      className="ant-row ant-form-item"
                      style={Object {}}
                    >
                      <FormItemLabel
                        htmlFor="create-webhook_name"
                        label="Name"
                        name="name"
                        prefixCls="ant-form"
                        required={false}
                        requiredMark={true}
                      >
                        <Col
                          className="ant-form-item-label"
                          span={8}
                        >
                          <div
                            className="ant-col ant-col-8 ant-form-item-label"
                            style={Object {}}
                          >
                            <label
                              className=""
                              htmlFor="create-webhook_name"
                              title="Name"
                            >
                              Name
                            </label>
                          </div>
                        </Col>
                      </FormItemLabel>
                      <FormItemInput
                        errors={Array []}
                        label="Name"
                        name={
                          Array [
                            "name",
                          ]
                        }
                        onDomErrorVisibleChange={[Function]}
                        prefixCls="ant-form"
                        status=""
                        touched={false}
                        validateStatus=""
                        validating={false}
                      >
                        <Col
                          className="ant-form-item-control"
                          span={10}
                        >
                          <div
                            className="ant-col ant-col-10 ant-form-item-control"
                            style={Object {}}
                          >
                            <div
                              className="ant-form-item-control-input"
                            >
                              <div
                                className="ant-form-item-control-input-content"
                              >
                                <Component
                                  update={2}
                                  value="webhook"
                                >
                                  <Input
                                    id="create-webhook_name"
                                    onChange={[Function]}
                                    type="text"
                                    value="webhook"
                                  >
                                    <ClearableLabeledInput
                                      bordered={true}
                                      element={
                                        <input
                                          className="ant-input"
                                          id="create-webhook_name"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          onKeyDown={[Function]}
                                          type="text"
                                          value="webhook"
                                        />
                                      }
                                      focused={false}
                                      handleReset={[Function]}
                                      id="create-webhook_name"
                                      inputType="input"
                                      onChange={[Function]}
                                      prefixCls="ant-input"
                                      triggerFocus={[Function]}
                                      type="text"
                                      value="webhook"
                                    >
                                      <input
                                        className="ant-input"
                                        id="create-webhook_name"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        type="text"
                                        value="webhook"
                                      />
                                    </ClearableLabeledInput>
                                  </Input>
                                </Component>
                              </div>
                            </div>
                            <ErrorList
                              errors={Array []}
                              onDomErrorVisibleChange={[Function]}
                            >
                              <CSSMotion
                                motionAppear={true}
                                motionDeadline={500}
                                motionName="ant-show-help"
                                onLeaveEnd={[Function]}
                                removeOnLeave={true}
                                visible={false}
                              >
                                <DomWrapper />
                              </CSSMotion>
                            </ErrorList>
                          </div>
                        </Col>
                      </FormItemInput>
                    </div>
                  </Row>
                </Field>
              </WrapperField>
            </FormItem>
            <FormItem
              label="Url"
              name="url"
            >
              <WrapperField
                label="Url"
                messageVariables={
                  Object {
                    "label": "Url",
                  }
                }
                name="url"
                onReset={[Function]}
                trigger="onChange"
                validateTrigger="onChange"
              >
                <Field
                  fieldContext={
                    Object {
                      "__INTERNAL__": Object {
                        "itemRef": [Function],
                        "name": "create-webhook",
                      },
                      "getFieldError": [Function],
                      "getFieldInstance": [Function],
                      "getFieldValue": [Function],
                      "getFieldsError": [Function],
                      "getFieldsValue": [Function],
                      "getInternalHooks": [Function],
                      "isFieldTouched": [Function],
                      "isFieldValidating": [Function],
                      "isFieldsTouched": [Function],
                      "isFieldsValidating": [Function],
                      "resetFields": [Function],
                      "scrollToField": [Function],
                      "setFields": [Function],
                      "setFieldsValue": [Function],
                      "submit": [Function],
                      "validateFields": [Function],
                      "validateTrigger": "onChange",
                    }
                  }
                  key="_url"
                  label="Url"
                  messageVariables={
                    Object {
                      "label": "Url",
                    }
                  }
                  name={
                    Array [
                      "url",
                    ]
                  }
                  onReset={[Function]}
                  trigger="onChange"
                  validateTrigger="onChange"
                  valuePropName="value"
                >
                  <Row
                    className="ant-form-item"
                    key="row"
                  >
                    <div
                      className="ant-row ant-form-item"
                      style={Object {}}
                    >
                      <FormItemLabel
                        htmlFor="create-webhook_url"
                        label="Url"
                        name="url"
                        prefixCls="ant-form"
                        required={false}
                        requiredMark={true}
                      >
                        <Col
                          className="ant-form-item-label"
                          span={8}
                        >
                          <div
                            className="ant-col ant-col-8 ant-form-item-label"
                            style={Object {}}
                          >
                            <label
                              className=""
                              htmlFor="create-webhook_url"
                              title="Url"
                            >
                              Url
                            </label>
                          </div>
                        </Col>
                      </FormItemLabel>
                      <FormItemInput
                        errors={Array []}
                        label="Url"
                        name={
                          Array [
                            "url",
                          ]
                        }
                        onDomErrorVisibleChange={[Function]}
                        prefixCls="ant-form"
                        status=""
                        touched={false}
                        validateStatus=""
                        validating={false}
                      >
                        <Col
                          className="ant-form-item-control"
                          span={10}
                        >
                          <div
                            className="ant-col ant-col-10 ant-form-item-control"
                            style={Object {}}
                          >
                            <div
                              className="ant-form-item-control-input"
                            >
                              <div
                                className="ant-form-item-control-input-content"
                              >
                                <Component
                                  update={2}
                                  value="url"
                                >
                                  <Input
                                    id="create-webhook_url"
                                    onChange={[Function]}
                                    type="text"
                                    value="url"
                                  >
                                    <ClearableLabeledInput
                                      bordered={true}
                                      element={
                                        <input
                                          className="ant-input"
                                          id="create-webhook_url"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          onKeyDown={[Function]}
                                          type="text"
                                          value="url"
                                        />
                                      }
                                      focused={false}
                                      handleReset={[Function]}
                                      id="create-webhook_url"
                                      inputType="input"
                                      onChange={[Function]}
                                      prefixCls="ant-input"
                                      triggerFocus={[Function]}
                                      type="text"
                                      value="url"
                                    >
                                      <input
                                        className="ant-input"
                                        id="create-webhook_url"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        type="text"
                                        value="url"
                                      />
                                    </ClearableLabeledInput>
                                  </Input>
                                </Component>
                              </div>
                            </div>
                            <ErrorList
                              errors={Array []}
                              onDomErrorVisibleChange={[Function]}
                            >
                              <CSSMotion
                                motionAppear={true}
                                motionDeadline={500}
                                motionName="ant-show-help"
                                onLeaveEnd={[Function]}
                                removeOnLeave={true}
                                visible={false}
                              >
                                <DomWrapper />
                              </CSSMotion>
                            </ErrorList>
                          </div>
                        </Col>
                      </FormItemInput>
                    </div>
                  </Row>
                </Field>
              </WrapperField>
            </FormItem>
            <FormItem
              label="Enable"
              name="enabled"
              valuePropName="checked"
            >
              <WrapperField
                label="Enable"
                messageVariables={
                  Object {
                    "label": "Enable",
                  }
                }
                name="enabled"
                onReset={[Function]}
                trigger="onChange"
                validateTrigger="onChange"
                valuePropName="checked"
              >
                <Field
                  fieldContext={
                    Object {
                      "__INTERNAL__": Object {
                        "itemRef": [Function],
                        "name": "create-webhook",
                      },
                      "getFieldError": [Function],
                      "getFieldInstance": [Function],
                      "getFieldValue": [Function],
                      "getFieldsError": [Function],
                      "getFieldsValue": [Function],
                      "getInternalHooks": [Function],
                      "isFieldTouched": [Function],
                      "isFieldValidating": [Function],
                      "isFieldsTouched": [Function],
                      "isFieldsValidating": [Function],
                      "resetFields": [Function],
                      "scrollToField": [Function],
                      "setFields": [Function],
                      "setFieldsValue": [Function],
                      "submit": [Function],
                      "validateFields": [Function],
                      "validateTrigger": "onChange",
                    }
                  }
                  key="_enabled"
                  label="Enable"
                  messageVariables={
                    Object {
                      "label": "Enable",
                    }
                  }
                  name={
                    Array [
                      "enabled",
                    ]
                  }
                  onReset={[Function]}
                  trigger="onChange"
                  validateTrigger="onChange"
                  valuePropName="checked"
                >
                  <Row
                    className="ant-form-item"
                    key="row"
                  >
                    <div
                      className="ant-row ant-form-item"
                      style={Object {}}
                    >
                      <FormItemLabel
                        htmlFor="create-webhook_enabled"
                        label="Enable"
                        name="enabled"
                        prefixCls="ant-form"
                        required={false}
                        requiredMark={true}
                        valuePropName="checked"
                      >
                        <Col
                          className="ant-form-item-label"
                          span={8}
                        >
                          <div
                            className="ant-col ant-col-8 ant-form-item-label"
                            style={Object {}}
                          >
                            <label
                              className=""
                              htmlFor="create-webhook_enabled"
                              title="Enable"
                            >
                              Enable
                            </label>
                          </div>
                        </Col>
                      </FormItemLabel>
                      <FormItemInput
                        errors={Array []}
                        label="Enable"
                        name={
                          Array [
                            "enabled",
                          ]
                        }
                        onDomErrorVisibleChange={[Function]}
                        prefixCls="ant-form"
                        status=""
                        touched={false}
                        validateStatus=""
                        validating={false}
                        valuePropName="checked"
                      >
                        <Col
                          className="ant-form-item-control"
                          span={10}
                        >
                          <div
                            className="ant-col ant-col-10 ant-form-item-control"
                            style={Object {}}
                          >
                            <div
                              className="ant-form-item-control-input"
                            >
                              <div
                                className="ant-form-item-control-input-content"
                              >
                                <Component
                                  update={2}
                                  value={true}
                                >
                                  <Switch
                                    checked={true}
                                    id="create-webhook_enabled"
                                    onChange={[Function]}
                                  >
                                    <Wave
                                      insertExtraNode={true}
                                    >
                                      <Switch
                                        checked={true}
                                        className=""
                                        id="create-webhook_enabled"
                                        loadingIcon={
                                          <div
                                            className="ant-switch-handle"
                                          />
                                        }
                                        onChange={[Function]}
                                        prefixCls="ant-switch"
                                      >
                                        <button
                                          aria-checked={true}
                                          className="ant-switch ant-switch-checked"
                                          id="create-webhook_enabled"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="switch"
                                          type="button"
                                        >
                                          <div
                                            className="ant-switch-handle"
                                          />
                                          <span
                                            className="ant-switch-inner"
                                          />
                                        </button>
                                      </Switch>
                                    </Wave>
                                  </Switch>
                                </Component>
                              </div>
                            </div>
                            <ErrorList
                              errors={Array []}
                              onDomErrorVisibleChange={[Function]}
                            >
                              <CSSMotion
                                motionAppear={true}
                                motionDeadline={500}
                                motionName="ant-show-help"
                                onLeaveEnd={[Function]}
                                removeOnLeave={true}
                                visible={false}
                              >
                                <DomWrapper />
                              </CSSMotion>
                            </ErrorList>
                          </div>
                        </Col>
                      </FormItemInput>
                    </div>
                  </Row>
                </Field>
              </WrapperField>
            </FormItem>
            <FormItem
              label="Events"
              name="events"
            >
              <WrapperField
                label="Events"
                messageVariables={
                  Object {
                    "label": "Events",
                  }
                }
                name="events"
                onReset={[Function]}
                trigger="onChange"
                validateTrigger="onChange"
              >
                <Field
                  fieldContext={
                    Object {
                      "__INTERNAL__": Object {
                        "itemRef": [Function],
                        "name": "create-webhook",
                      },
                      "getFieldError": [Function],
                      "getFieldInstance": [Function],
                      "getFieldValue": [Function],
                      "getFieldsError": [Function],
                      "getFieldsValue": [Function],
                      "getInternalHooks": [Function],
                      "isFieldTouched": [Function],
                      "isFieldValidating": [Function],
                      "isFieldsTouched": [Function],
                      "isFieldsValidating": [Function],
                      "resetFields": [Function],
                      "scrollToField": [Function],
                      "setFields": [Function],
                      "setFieldsValue": [Function],
                      "submit": [Function],
                      "validateFields": [Function],
                      "validateTrigger": "onChange",
                    }
                  }
                  key="_events"
                  label="Events"
                  messageVariables={
                    Object {
                      "label": "Events",
                    }
                  }
                  name={
                    Array [
                      "events",
                    ]
                  }
                  onReset={[Function]}
                  trigger="onChange"
                  validateTrigger="onChange"
                  valuePropName="value"
                >
                  <Row
                    className="ant-form-item"
                    key="row"
                  >
                    <div
                      className="ant-row ant-form-item"
                      style={Object {}}
                    >
                      <FormItemLabel
                        htmlFor="create-webhook_events"
                        label="Events"
                        name="events"
                        prefixCls="ant-form"
                        required={false}
                        requiredMark={true}
                      >
                        <Col
                          className="ant-form-item-label"
                          span={8}
                        >
                          <div
                            className="ant-col ant-col-8 ant-form-item-label"
                            style={Object {}}
                          >
                            <label
                              className=""
                              htmlFor="create-webhook_events"
                              title="Events"
                            >
                              Events
                            </label>
                          </div>
                        </Col>
                      </FormItemLabel>
                      <FormItemInput
                        errors={Array []}
                        label="Events"
                        name={
                          Array [
                            "events",
                          ]
                        }
                        onDomErrorVisibleChange={[Function]}
                        prefixCls="ant-form"
                        status=""
                        touched={false}
                        validateStatus=""
                        validating={false}
                      >
                        <Col
                          className="ant-form-item-control"
                          span={10}
                        >
                          <div
                            className="ant-col ant-col-10 ant-form-item-control"
                            style={Object {}}
                          >
                            <div
                              className="ant-form-item-control-input"
                            >
                              <div
                                className="ant-form-item-control-input-content"
                              >
                                <Component
                                  update={2}
                                  value={Array []}
                                >
                                  <ForwardRef(InternalCheckboxGroup)
                                    id="create-webhook_events"
                                    onChange={[Function]}
                                    value={Array []}
                                  >
                                    <div
                                      className="ant-checkbox-group"
                                      id="create-webhook_events"
                                    >
                                      <Row
                                        gutter={
                                          Array [
                                            4,
                                            16,
                                          ]
                                        }
                                      >
                                        <div
                                          className="ant-row"
                                          style={
                                            Object {
                                              "marginBottom": -8,
                                              "marginLeft": -2,
                                              "marginRight": -2,
                                              "marginTop": -8,
                                            }
                                          }
                                        >
                                          <Col
                                            key="1"
                                            span={8}
                                            style={
                                              Object {
                                                "width": "550px",
                                              }
                                            }
                                          >
                                            <div
                                              className="ant-col ant-col-8"
                                              style={
                                                Object {
                                                  "paddingBottom": 8,
                                                  "paddingLeft": 2,
                                                  "paddingRight": 2,
                                                  "paddingTop": 8,
                                                  "width": "550px",
                                                }
                                              }
                                            >
                                              <Checkbox
                                                label="event"
                                                value={1}
                                              >
                                                <label
                                                  className="ant-checkbox-wrapper"
                                                >
                                                  <Checkbox
                                                    checked={false}
                                                    className=""
                                                    defaultChecked={false}
                                                    label="event"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onFocus={[Function]}
                                                    onKeyDown={[Function]}
                                                    onKeyPress={[Function]}
                                                    onKeyUp={[Function]}
                                                    prefixCls="ant-checkbox"
                                                    style={Object {}}
                                                    type="checkbox"
                                                    value={1}
                                                  >
                                                    <span
                                                      className="ant-checkbox"
                                                      style={Object {}}
                                                    >
                                                      <input
                                                        checked={false}
                                                        className="ant-checkbox-input"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        onKeyPress={[Function]}
                                                        onKeyUp={[Function]}
                                                        type="checkbox"
                                                        value={1}
                                                      />
                                                      <span
                                                        className="ant-checkbox-inner"
                                                      />
                                                    </span>
                                                  </Checkbox>
                                                  <span>
                                                    Event
                                                  </span>
                                                </label>
                                              </Checkbox>
                                            </div>
                                          </Col>
                                        </div>
                                      </Row>
                                    </div>
                                  </ForwardRef(InternalCheckboxGroup)>
                                </Component>
                              </div>
                            </div>
                            <ErrorList
                              errors={Array []}
                              onDomErrorVisibleChange={[Function]}
                            >
                              <CSSMotion
                                motionAppear={true}
                                motionDeadline={500}
                                motionName="ant-show-help"
                                onLeaveEnd={[Function]}
                                removeOnLeave={true}
                                visible={false}
                              >
                                <DomWrapper />
                              </CSSMotion>
                            </ErrorList>
                          </div>
                        </Col>
                      </FormItemInput>
                    </div>
                  </Row>
                </Field>
              </WrapperField>
            </FormItem>
            <FormItem
              style={
                Object {
                  "alignItems": "center",
                  "display": "flex",
                  "justifyContent": "center",
                }
              }
              wrapperCol={
                Object {
                  "offset": 2,
                  "span": 10,
                }
              }
            >
              <Row
                className="ant-form-item"
                key="row"
                style={
                  Object {
                    "alignItems": "center",
                    "display": "flex",
                    "justifyContent": "center",
                  }
                }
              >
                <div
                  className="ant-row ant-form-item"
                  style={
                    Object {
                      "alignItems": "center",
                      "display": "flex",
                      "justifyContent": "center",
                    }
                  }
                >
                  <FormItemLabel
                    prefixCls="ant-form"
                    requiredMark={true}
                    style={
                      Object {
                        "alignItems": "center",
                        "display": "flex",
                        "justifyContent": "center",
                      }
                    }
                    wrapperCol={
                      Object {
                        "offset": 2,
                        "span": 10,
                      }
                    }
                  />
                  <FormItemInput
                    errors={Array []}
                    onDomErrorVisibleChange={[Function]}
                    prefixCls="ant-form"
                    status=""
                    style={
                      Object {
                        "alignItems": "center",
                        "display": "flex",
                        "justifyContent": "center",
                      }
                    }
                    validateStatus=""
                    wrapperCol={
                      Object {
                        "offset": 2,
                        "span": 10,
                      }
                    }
                  >
                    <Col
                      className="ant-form-item-control"
                      offset={2}
                      span={10}
                    >
                      <div
                        className="ant-col ant-col-10 ant-col-offset-2 ant-form-item-control"
                        style={Object {}}
                      >
                        <div
                          className="ant-form-item-control-input"
                        >
                          <div
                            className="ant-form-item-control-input-content"
                          >
                            <Button
                              onClick={[Function]}
                              size="small"
                              style={
                                Object {
                                  "width": "90%",
                                }
                              }
                            >
                              <Wave>
                                <button
                                  className="ant-btn ant-btn-sm"
                                  onClick={[Function]}
                                  style={
                                    Object {
                                      "width": "90%",
                                    }
                                  }
                                  type="button"
                                >
                                  <LoadingIcon
                                    existIcon={false}
                                    loading={false}
                                    prefixCls="ant-btn"
                                  >
                                    <CSSMotion
                                      motionName="ant-btn-loading-icon-motion"
                                      onAppearActive={[Function]}
                                      onAppearStart={[Function]}
                                      onEnterActive={[Function]}
                                      onEnterStart={[Function]}
                                      onLeaveActive={[Function]}
                                      onLeaveStart={[Function]}
                                      removeOnLeave={true}
                                      visible={false}
                                    >
                                      <DomWrapper />
                                    </CSSMotion>
                                  </LoadingIcon>
                                  <span
                                    key=".0"
                                  >
                                    Load More Events
                                  </span>
                                </button>
                              </Wave>
                            </Button>
                          </div>
                        </div>
                        <ErrorList
                          errors={Array []}
                          onDomErrorVisibleChange={[Function]}
                        >
                          <CSSMotion
                            motionAppear={true}
                            motionDeadline={500}
                            motionName="ant-show-help"
                            onLeaveEnd={[Function]}
                            removeOnLeave={true}
                            visible={false}
                          >
                            <DomWrapper />
                          </CSSMotion>
                        </ErrorList>
                      </div>
                    </Col>
                  </FormItemInput>
                </div>
              </Row>
            </FormItem>
            <FormItem
              wrapperCol={
                Object {
                  "offset": 10,
                  "span": 14,
                }
              }
            >
              <Row
                className="ant-form-item"
                key="row"
              >
                <div
                  className="ant-row ant-form-item"
                  style={Object {}}
                >
                  <FormItemLabel
                    prefixCls="ant-form"
                    requiredMark={true}
                    wrapperCol={
                      Object {
                        "offset": 10,
                        "span": 14,
                      }
                    }
                  />
                  <FormItemInput
                    errors={Array []}
                    onDomErrorVisibleChange={[Function]}
                    prefixCls="ant-form"
                    status=""
                    validateStatus=""
                    wrapperCol={
                      Object {
                        "offset": 10,
                        "span": 14,
                      }
                    }
                  >
                    <Col
                      className="ant-form-item-control"
                      offset={10}
                      span={14}
                    >
                      <div
                        className="ant-col ant-col-14 ant-col-offset-10 ant-form-item-control"
                        style={Object {}}
                      >
                        <div
                          className="ant-form-item-control-input"
                        >
                          <div
                            className="ant-form-item-control-input-content"
                          >
                            <Space>
                              <div
                                className="ant-space ant-space-horizontal ant-space-align-center"
                                style={Object {}}
                              >
                                <Item
                                  className="ant-space-item"
                                  direction="horizontal"
                                  index={0}
                                  key="ant-space-item-0"
                                  marginDirection="marginRight"
                                  wrap={false}
                                >
                                  <div
                                    className="ant-space-item"
                                    style={
                                      Object {
                                        "marginRight": 8,
                                      }
                                    }
                                  >
                                    <Button
                                      disabled={true}
                                      htmlType="submit"
                                      type="primary"
                                    >
                                      <Wave>
                                        <button
                                          className="ant-btn ant-btn-primary"
                                          disabled={true}
                                          onClick={[Function]}
                                          type="submit"
                                        >
                                          <LoadingIcon
                                            existIcon={false}
                                            loading={false}
                                            prefixCls="ant-btn"
                                          >
                                            <CSSMotion
                                              motionName="ant-btn-loading-icon-motion"
                                              onAppearActive={[Function]}
                                              onAppearStart={[Function]}
                                              onEnterActive={[Function]}
                                              onEnterStart={[Function]}
                                              onLeaveActive={[Function]}
                                              onLeaveStart={[Function]}
                                              removeOnLeave={true}
                                              visible={false}
                                            >
                                              <DomWrapper />
                                            </CSSMotion>
                                          </LoadingIcon>
                                          <span
                                            key=".0"
                                          >
                                            Submit
                                          </span>
                                        </button>
                                      </Wave>
                                    </Button>
                                  </div>
                                </Item>
                                <Item
                                  className="ant-space-item"
                                  direction="horizontal"
                                  index={1}
                                  key="ant-space-item-1"
                                  marginDirection="marginRight"
                                  wrap={false}
                                >
                                  <div
                                    className="ant-space-item"
                                    style={Object {}}
                                  >
                                    <Button
                                      htmlType="button"
                                      onClick={[Function]}
                                    >
                                      <Wave>
                                        <button
                                          className="ant-btn"
                                          onClick={[Function]}
                                          type="button"
                                        >
                                          <LoadingIcon
                                            existIcon={false}
                                            loading={false}
                                            prefixCls="ant-btn"
                                          >
                                            <CSSMotion
                                              motionName="ant-btn-loading-icon-motion"
                                              onAppearActive={[Function]}
                                              onAppearStart={[Function]}
                                              onEnterActive={[Function]}
                                              onEnterStart={[Function]}
                                              onLeaveActive={[Function]}
                                              onLeaveStart={[Function]}
                                              removeOnLeave={true}
                                              visible={false}
                                            >
                                              <DomWrapper />
                                            </CSSMotion>
                                          </LoadingIcon>
                                          <span
                                            key=".0"
                                          >
                                            Reset
                                          </span>
                                        </button>
                                      </Wave>
                                    </Button>
                                  </div>
                                </Item>
                              </div>
                            </Space>
                          </div>
                        </div>
                        <ErrorList
                          errors={Array []}
                          onDomErrorVisibleChange={[Function]}
                        >
                          <CSSMotion
                            motionAppear={true}
                            motionDeadline={500}
                            motionName="ant-show-help"
                            onLeaveEnd={[Function]}
                            removeOnLeave={true}
                            visible={false}
                          >
                            <DomWrapper />
                          </CSSMotion>
                        </ErrorList>
                      </div>
                    </Col>
                  </FormItemInput>
                </div>
              </Row>
            </FormItem>
          </form>
        </ForwardRef(Form)>
      </SizeContextProvider>
    </ForwardRef(InternalForm)>
  </WebhookForm>
</Provider>
`;

exports[`Webhook form component snapshot testing should match component with empty data 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <WebhookForm
    data={Array []}
  >
    <ForwardRef(InternalForm)
      form={
        Object {
          "__INTERNAL__": Object {
            "itemRef": [Function],
            "name": "create-webhook",
          },
          "getFieldError": [Function],
          "getFieldInstance": [Function],
          "getFieldValue": [Function],
          "getFieldsError": [Function],
          "getFieldsValue": [Function],
          "getInternalHooks": [Function],
          "isFieldTouched": [Function],
          "isFieldValidating": [Function],
          "isFieldsTouched": [Function],
          "isFieldsValidating": [Function],
          "resetFields": [Function],
          "scrollToField": [Function],
          "setFields": [Function],
          "setFieldsValue": [Function],
          "submit": [Function],
          "validateFields": [Function],
        }
      }
      initialValues={Object {}}
      labelCol={
        Object {
          "span": 8,
        }
      }
      name="create-webhook"
      onFinish={[Function]}
      onValuesChange={[Function]}
      wrapperCol={
        Object {
          "span": 10,
        }
      }
    >
      <SizeContextProvider>
        <ForwardRef(Form)
          className="ant-form ant-form-horizontal"
          form={
            Object {
              "__INTERNAL__": Object {
                "itemRef": [Function],
                "name": "create-webhook",
              },
              "getFieldError": [Function],
              "getFieldInstance": [Function],
              "getFieldValue": [Function],
              "getFieldsError": [Function],
              "getFieldsValue": [Function],
              "getInternalHooks": [Function],
              "isFieldTouched": [Function],
              "isFieldValidating": [Function],
              "isFieldsTouched": [Function],
              "isFieldsValidating": [Function],
              "resetFields": [Function],
              "scrollToField": [Function],
              "setFields": [Function],
              "setFieldsValue": [Function],
              "submit": [Function],
              "validateFields": [Function],
            }
          }
          id="create-webhook"
          initialValues={Object {}}
          name="create-webhook"
          onFinish={[Function]}
          onFinishFailed={[Function]}
          onValuesChange={[Function]}
        >
          <form
            className="ant-form ant-form-horizontal"
            id="create-webhook"
            onReset={[Function]}
            onSubmit={[Function]}
          >
            <FormItem
              label="Name"
              name="name"
            >
              <WrapperField
                label="Name"
                messageVariables={
                  Object {
                    "label": "Name",
                  }
                }
                name="name"
                onReset={[Function]}
                trigger="onChange"
                validateTrigger="onChange"
              >
                <Field
                  fieldContext={
                    Object {
                      "__INTERNAL__": Object {
                        "itemRef": [Function],
                        "name": "create-webhook",
                      },
                      "getFieldError": [Function],
                      "getFieldInstance": [Function],
                      "getFieldValue": [Function],
                      "getFieldsError": [Function],
                      "getFieldsValue": [Function],
                      "getInternalHooks": [Function],
                      "isFieldTouched": [Function],
                      "isFieldValidating": [Function],
                      "isFieldsTouched": [Function],
                      "isFieldsValidating": [Function],
                      "resetFields": [Function],
                      "scrollToField": [Function],
                      "setFields": [Function],
                      "setFieldsValue": [Function],
                      "submit": [Function],
                      "validateFields": [Function],
                      "validateTrigger": "onChange",
                    }
                  }
                  key="_name"
                  label="Name"
                  messageVariables={
                    Object {
                      "label": "Name",
                    }
                  }
                  name={
                    Array [
                      "name",
                    ]
                  }
                  onReset={[Function]}
                  trigger="onChange"
                  validateTrigger="onChange"
                  valuePropName="value"
                >
                  <Row
                    className="ant-form-item"
                    key="row"
                  >
                    <div
                      className="ant-row ant-form-item"
                      style={Object {}}
                    >
                      <FormItemLabel
                        htmlFor="create-webhook_name"
                        label="Name"
                        name="name"
                        prefixCls="ant-form"
                        required={false}
                        requiredMark={true}
                      >
                        <Col
                          className="ant-form-item-label"
                          span={8}
                        >
                          <div
                            className="ant-col ant-col-8 ant-form-item-label"
                            style={Object {}}
                          >
                            <label
                              className=""
                              htmlFor="create-webhook_name"
                              title="Name"
                            >
                              Name
                            </label>
                          </div>
                        </Col>
                      </FormItemLabel>
                      <FormItemInput
                        errors={Array []}
                        label="Name"
                        name={
                          Array [
                            "name",
                          ]
                        }
                        onDomErrorVisibleChange={[Function]}
                        prefixCls="ant-form"
                        status=""
                        touched={false}
                        validateStatus=""
                        validating={false}
                      >
                        <Col
                          className="ant-form-item-control"
                          span={10}
                        >
                          <div
                            className="ant-col ant-col-10 ant-form-item-control"
                            style={Object {}}
                          >
                            <div
                              className="ant-form-item-control-input"
                            >
                              <div
                                className="ant-form-item-control-input-content"
                              >
                                <Component
                                  update={2}
                                >
                                  <Input
                                    id="create-webhook_name"
                                    onChange={[Function]}
                                    type="text"
                                  >
                                    <ClearableLabeledInput
                                      bordered={true}
                                      element={
                                        <input
                                          className="ant-input"
                                          id="create-webhook_name"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          onKeyDown={[Function]}
                                          type="text"
                                        />
                                      }
                                      focused={false}
                                      handleReset={[Function]}
                                      id="create-webhook_name"
                                      inputType="input"
                                      onChange={[Function]}
                                      prefixCls="ant-input"
                                      triggerFocus={[Function]}
                                      type="text"
                                      value=""
                                    >
                                      <input
                                        className="ant-input"
                                        id="create-webhook_name"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        type="text"
                                        value=""
                                      />
                                    </ClearableLabeledInput>
                                  </Input>
                                </Component>
                              </div>
                            </div>
                            <ErrorList
                              errors={Array []}
                              onDomErrorVisibleChange={[Function]}
                            >
                              <CSSMotion
                                motionAppear={true}
                                motionDeadline={500}
                                motionName="ant-show-help"
                                onLeaveEnd={[Function]}
                                removeOnLeave={true}
                                visible={false}
                              >
                                <DomWrapper />
                              </CSSMotion>
                            </ErrorList>
                          </div>
                        </Col>
                      </FormItemInput>
                    </div>
                  </Row>
                </Field>
              </WrapperField>
            </FormItem>
            <FormItem
              label="Url"
              name="url"
            >
              <WrapperField
                label="Url"
                messageVariables={
                  Object {
                    "label": "Url",
                  }
                }
                name="url"
                onReset={[Function]}
                trigger="onChange"
                validateTrigger="onChange"
              >
                <Field
                  fieldContext={
                    Object {
                      "__INTERNAL__": Object {
                        "itemRef": [Function],
                        "name": "create-webhook",
                      },
                      "getFieldError": [Function],
                      "getFieldInstance": [Function],
                      "getFieldValue": [Function],
                      "getFieldsError": [Function],
                      "getFieldsValue": [Function],
                      "getInternalHooks": [Function],
                      "isFieldTouched": [Function],
                      "isFieldValidating": [Function],
                      "isFieldsTouched": [Function],
                      "isFieldsValidating": [Function],
                      "resetFields": [Function],
                      "scrollToField": [Function],
                      "setFields": [Function],
                      "setFieldsValue": [Function],
                      "submit": [Function],
                      "validateFields": [Function],
                      "validateTrigger": "onChange",
                    }
                  }
                  key="_url"
                  label="Url"
                  messageVariables={
                    Object {
                      "label": "Url",
                    }
                  }
                  name={
                    Array [
                      "url",
                    ]
                  }
                  onReset={[Function]}
                  trigger="onChange"
                  validateTrigger="onChange"
                  valuePropName="value"
                >
                  <Row
                    className="ant-form-item"
                    key="row"
                  >
                    <div
                      className="ant-row ant-form-item"
                      style={Object {}}
                    >
                      <FormItemLabel
                        htmlFor="create-webhook_url"
                        label="Url"
                        name="url"
                        prefixCls="ant-form"
                        required={false}
                        requiredMark={true}
                      >
                        <Col
                          className="ant-form-item-label"
                          span={8}
                        >
                          <div
                            className="ant-col ant-col-8 ant-form-item-label"
                            style={Object {}}
                          >
                            <label
                              className=""
                              htmlFor="create-webhook_url"
                              title="Url"
                            >
                              Url
                            </label>
                          </div>
                        </Col>
                      </FormItemLabel>
                      <FormItemInput
                        errors={Array []}
                        label="Url"
                        name={
                          Array [
                            "url",
                          ]
                        }
                        onDomErrorVisibleChange={[Function]}
                        prefixCls="ant-form"
                        status=""
                        touched={false}
                        validateStatus=""
                        validating={false}
                      >
                        <Col
                          className="ant-form-item-control"
                          span={10}
                        >
                          <div
                            className="ant-col ant-col-10 ant-form-item-control"
                            style={Object {}}
                          >
                            <div
                              className="ant-form-item-control-input"
                            >
                              <div
                                className="ant-form-item-control-input-content"
                              >
                                <Component
                                  update={2}
                                >
                                  <Input
                                    id="create-webhook_url"
                                    onChange={[Function]}
                                    type="text"
                                  >
                                    <ClearableLabeledInput
                                      bordered={true}
                                      element={
                                        <input
                                          className="ant-input"
                                          id="create-webhook_url"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          onKeyDown={[Function]}
                                          type="text"
                                        />
                                      }
                                      focused={false}
                                      handleReset={[Function]}
                                      id="create-webhook_url"
                                      inputType="input"
                                      onChange={[Function]}
                                      prefixCls="ant-input"
                                      triggerFocus={[Function]}
                                      type="text"
                                      value=""
                                    >
                                      <input
                                        className="ant-input"
                                        id="create-webhook_url"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        type="text"
                                        value=""
                                      />
                                    </ClearableLabeledInput>
                                  </Input>
                                </Component>
                              </div>
                            </div>
                            <ErrorList
                              errors={Array []}
                              onDomErrorVisibleChange={[Function]}
                            >
                              <CSSMotion
                                motionAppear={true}
                                motionDeadline={500}
                                motionName="ant-show-help"
                                onLeaveEnd={[Function]}
                                removeOnLeave={true}
                                visible={false}
                              >
                                <DomWrapper />
                              </CSSMotion>
                            </ErrorList>
                          </div>
                        </Col>
                      </FormItemInput>
                    </div>
                  </Row>
                </Field>
              </WrapperField>
            </FormItem>
            <FormItem
              label="Enable"
              name="enabled"
              valuePropName="checked"
            >
              <WrapperField
                label="Enable"
                messageVariables={
                  Object {
                    "label": "Enable",
                  }
                }
                name="enabled"
                onReset={[Function]}
                trigger="onChange"
                validateTrigger="onChange"
                valuePropName="checked"
              >
                <Field
                  fieldContext={
                    Object {
                      "__INTERNAL__": Object {
                        "itemRef": [Function],
                        "name": "create-webhook",
                      },
                      "getFieldError": [Function],
                      "getFieldInstance": [Function],
                      "getFieldValue": [Function],
                      "getFieldsError": [Function],
                      "getFieldsValue": [Function],
                      "getInternalHooks": [Function],
                      "isFieldTouched": [Function],
                      "isFieldValidating": [Function],
                      "isFieldsTouched": [Function],
                      "isFieldsValidating": [Function],
                      "resetFields": [Function],
                      "scrollToField": [Function],
                      "setFields": [Function],
                      "setFieldsValue": [Function],
                      "submit": [Function],
                      "validateFields": [Function],
                      "validateTrigger": "onChange",
                    }
                  }
                  key="_enabled"
                  label="Enable"
                  messageVariables={
                    Object {
                      "label": "Enable",
                    }
                  }
                  name={
                    Array [
                      "enabled",
                    ]
                  }
                  onReset={[Function]}
                  trigger="onChange"
                  validateTrigger="onChange"
                  valuePropName="checked"
                >
                  <Row
                    className="ant-form-item"
                    key="row"
                  >
                    <div
                      className="ant-row ant-form-item"
                      style={Object {}}
                    >
                      <FormItemLabel
                        htmlFor="create-webhook_enabled"
                        label="Enable"
                        name="enabled"
                        prefixCls="ant-form"
                        required={false}
                        requiredMark={true}
                        valuePropName="checked"
                      >
                        <Col
                          className="ant-form-item-label"
                          span={8}
                        >
                          <div
                            className="ant-col ant-col-8 ant-form-item-label"
                            style={Object {}}
                          >
                            <label
                              className=""
                              htmlFor="create-webhook_enabled"
                              title="Enable"
                            >
                              Enable
                            </label>
                          </div>
                        </Col>
                      </FormItemLabel>
                      <FormItemInput
                        errors={Array []}
                        label="Enable"
                        name={
                          Array [
                            "enabled",
                          ]
                        }
                        onDomErrorVisibleChange={[Function]}
                        prefixCls="ant-form"
                        status=""
                        touched={false}
                        validateStatus=""
                        validating={false}
                        valuePropName="checked"
                      >
                        <Col
                          className="ant-form-item-control"
                          span={10}
                        >
                          <div
                            className="ant-col ant-col-10 ant-form-item-control"
                            style={Object {}}
                          >
                            <div
                              className="ant-form-item-control-input"
                            >
                              <div
                                className="ant-form-item-control-input-content"
                              >
                                <Component
                                  update={2}
                                >
                                  <Switch
                                    id="create-webhook_enabled"
                                    onChange={[Function]}
                                  >
                                    <Wave
                                      insertExtraNode={true}
                                    >
                                      <Switch
                                        className=""
                                        id="create-webhook_enabled"
                                        loadingIcon={
                                          <div
                                            className="ant-switch-handle"
                                          />
                                        }
                                        onChange={[Function]}
                                        prefixCls="ant-switch"
                                      >
                                        <button
                                          aria-checked={false}
                                          className="ant-switch"
                                          id="create-webhook_enabled"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="switch"
                                          type="button"
                                        >
                                          <div
                                            className="ant-switch-handle"
                                          />
                                          <span
                                            className="ant-switch-inner"
                                          />
                                        </button>
                                      </Switch>
                                    </Wave>
                                  </Switch>
                                </Component>
                              </div>
                            </div>
                            <ErrorList
                              errors={Array []}
                              onDomErrorVisibleChange={[Function]}
                            >
                              <CSSMotion
                                motionAppear={true}
                                motionDeadline={500}
                                motionName="ant-show-help"
                                onLeaveEnd={[Function]}
                                removeOnLeave={true}
                                visible={false}
                              >
                                <DomWrapper />
                              </CSSMotion>
                            </ErrorList>
                          </div>
                        </Col>
                      </FormItemInput>
                    </div>
                  </Row>
                </Field>
              </WrapperField>
            </FormItem>
            <FormItem
              label="Events"
              name="events"
            >
              <WrapperField
                label="Events"
                messageVariables={
                  Object {
                    "label": "Events",
                  }
                }
                name="events"
                onReset={[Function]}
                trigger="onChange"
                validateTrigger="onChange"
              >
                <Field
                  fieldContext={
                    Object {
                      "__INTERNAL__": Object {
                        "itemRef": [Function],
                        "name": "create-webhook",
                      },
                      "getFieldError": [Function],
                      "getFieldInstance": [Function],
                      "getFieldValue": [Function],
                      "getFieldsError": [Function],
                      "getFieldsValue": [Function],
                      "getInternalHooks": [Function],
                      "isFieldTouched": [Function],
                      "isFieldValidating": [Function],
                      "isFieldsTouched": [Function],
                      "isFieldsValidating": [Function],
                      "resetFields": [Function],
                      "scrollToField": [Function],
                      "setFields": [Function],
                      "setFieldsValue": [Function],
                      "submit": [Function],
                      "validateFields": [Function],
                      "validateTrigger": "onChange",
                    }
                  }
                  key="_events"
                  label="Events"
                  messageVariables={
                    Object {
                      "label": "Events",
                    }
                  }
                  name={
                    Array [
                      "events",
                    ]
                  }
                  onReset={[Function]}
                  trigger="onChange"
                  validateTrigger="onChange"
                  valuePropName="value"
                >
                  <Row
                    className="ant-form-item"
                    key="row"
                  >
                    <div
                      className="ant-row ant-form-item"
                      style={Object {}}
                    >
                      <FormItemLabel
                        htmlFor="create-webhook_events"
                        label="Events"
                        name="events"
                        prefixCls="ant-form"
                        required={false}
                        requiredMark={true}
                      >
                        <Col
                          className="ant-form-item-label"
                          span={8}
                        >
                          <div
                            className="ant-col ant-col-8 ant-form-item-label"
                            style={Object {}}
                          >
                            <label
                              className=""
                              htmlFor="create-webhook_events"
                              title="Events"
                            >
                              Events
                            </label>
                          </div>
                        </Col>
                      </FormItemLabel>
                      <FormItemInput
                        errors={Array []}
                        label="Events"
                        name={
                          Array [
                            "events",
                          ]
                        }
                        onDomErrorVisibleChange={[Function]}
                        prefixCls="ant-form"
                        status=""
                        touched={false}
                        validateStatus=""
                        validating={false}
                      >
                        <Col
                          className="ant-form-item-control"
                          span={10}
                        >
                          <div
                            className="ant-col ant-col-10 ant-form-item-control"
                            style={Object {}}
                          >
                            <div
                              className="ant-form-item-control-input"
                            >
                              <div
                                className="ant-form-item-control-input-content"
                              >
                                <Component
                                  update={2}
                                >
                                  <ForwardRef(InternalCheckboxGroup)
                                    id="create-webhook_events"
                                    onChange={[Function]}
                                  >
                                    <div
                                      className="ant-checkbox-group"
                                      id="create-webhook_events"
                                    >
                                      <Row
                                        gutter={
                                          Array [
                                            4,
                                            16,
                                          ]
                                        }
                                      >
                                        <div
                                          className="ant-row"
                                          style={
                                            Object {
                                              "marginBottom": -8,
                                              "marginLeft": -2,
                                              "marginRight": -2,
                                              "marginTop": -8,
                                            }
                                          }
                                        >
                                          <Col
                                            key="1"
                                            span={8}
                                            style={
                                              Object {
                                                "width": "550px",
                                              }
                                            }
                                          >
                                            <div
                                              className="ant-col ant-col-8"
                                              style={
                                                Object {
                                                  "paddingBottom": 8,
                                                  "paddingLeft": 2,
                                                  "paddingRight": 2,
                                                  "paddingTop": 8,
                                                  "width": "550px",
                                                }
                                              }
                                            >
                                              <Checkbox
                                                label="event"
                                                value={1}
                                              >
                                                <label
                                                  className="ant-checkbox-wrapper"
                                                >
                                                  <Checkbox
                                                    checked={false}
                                                    className=""
                                                    defaultChecked={false}
                                                    label="event"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onFocus={[Function]}
                                                    onKeyDown={[Function]}
                                                    onKeyPress={[Function]}
                                                    onKeyUp={[Function]}
                                                    prefixCls="ant-checkbox"
                                                    style={Object {}}
                                                    type="checkbox"
                                                    value={1}
                                                  >
                                                    <span
                                                      className="ant-checkbox"
                                                      style={Object {}}
                                                    >
                                                      <input
                                                        checked={false}
                                                        className="ant-checkbox-input"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        onKeyPress={[Function]}
                                                        onKeyUp={[Function]}
                                                        type="checkbox"
                                                        value={1}
                                                      />
                                                      <span
                                                        className="ant-checkbox-inner"
                                                      />
                                                    </span>
                                                  </Checkbox>
                                                  <span>
                                                    Event
                                                  </span>
                                                </label>
                                              </Checkbox>
                                            </div>
                                          </Col>
                                        </div>
                                      </Row>
                                    </div>
                                  </ForwardRef(InternalCheckboxGroup)>
                                </Component>
                              </div>
                            </div>
                            <ErrorList
                              errors={Array []}
                              onDomErrorVisibleChange={[Function]}
                            >
                              <CSSMotion
                                motionAppear={true}
                                motionDeadline={500}
                                motionName="ant-show-help"
                                onLeaveEnd={[Function]}
                                removeOnLeave={true}
                                visible={false}
                              >
                                <DomWrapper />
                              </CSSMotion>
                            </ErrorList>
                          </div>
                        </Col>
                      </FormItemInput>
                    </div>
                  </Row>
                </Field>
              </WrapperField>
            </FormItem>
            <FormItem
              style={
                Object {
                  "alignItems": "center",
                  "display": "flex",
                  "justifyContent": "center",
                }
              }
              wrapperCol={
                Object {
                  "offset": 2,
                  "span": 10,
                }
              }
            >
              <Row
                className="ant-form-item"
                key="row"
                style={
                  Object {
                    "alignItems": "center",
                    "display": "flex",
                    "justifyContent": "center",
                  }
                }
              >
                <div
                  className="ant-row ant-form-item"
                  style={
                    Object {
                      "alignItems": "center",
                      "display": "flex",
                      "justifyContent": "center",
                    }
                  }
                >
                  <FormItemLabel
                    prefixCls="ant-form"
                    requiredMark={true}
                    style={
                      Object {
                        "alignItems": "center",
                        "display": "flex",
                        "justifyContent": "center",
                      }
                    }
                    wrapperCol={
                      Object {
                        "offset": 2,
                        "span": 10,
                      }
                    }
                  />
                  <FormItemInput
                    errors={Array []}
                    onDomErrorVisibleChange={[Function]}
                    prefixCls="ant-form"
                    status=""
                    style={
                      Object {
                        "alignItems": "center",
                        "display": "flex",
                        "justifyContent": "center",
                      }
                    }
                    validateStatus=""
                    wrapperCol={
                      Object {
                        "offset": 2,
                        "span": 10,
                      }
                    }
                  >
                    <Col
                      className="ant-form-item-control"
                      offset={2}
                      span={10}
                    >
                      <div
                        className="ant-col ant-col-10 ant-col-offset-2 ant-form-item-control"
                        style={Object {}}
                      >
                        <div
                          className="ant-form-item-control-input"
                        >
                          <div
                            className="ant-form-item-control-input-content"
                          >
                            <Button
                              onClick={[Function]}
                              size="small"
                              style={
                                Object {
                                  "width": "90%",
                                }
                              }
                            >
                              <Wave>
                                <button
                                  className="ant-btn ant-btn-sm"
                                  onClick={[Function]}
                                  style={
                                    Object {
                                      "width": "90%",
                                    }
                                  }
                                  type="button"
                                >
                                  <LoadingIcon
                                    existIcon={false}
                                    loading={false}
                                    prefixCls="ant-btn"
                                  >
                                    <CSSMotion
                                      motionName="ant-btn-loading-icon-motion"
                                      onAppearActive={[Function]}
                                      onAppearStart={[Function]}
                                      onEnterActive={[Function]}
                                      onEnterStart={[Function]}
                                      onLeaveActive={[Function]}
                                      onLeaveStart={[Function]}
                                      removeOnLeave={true}
                                      visible={false}
                                    >
                                      <DomWrapper />
                                    </CSSMotion>
                                  </LoadingIcon>
                                  <span
                                    key=".0"
                                  >
                                    Load More Events
                                  </span>
                                </button>
                              </Wave>
                            </Button>
                          </div>
                        </div>
                        <ErrorList
                          errors={Array []}
                          onDomErrorVisibleChange={[Function]}
                        >
                          <CSSMotion
                            motionAppear={true}
                            motionDeadline={500}
                            motionName="ant-show-help"
                            onLeaveEnd={[Function]}
                            removeOnLeave={true}
                            visible={false}
                          >
                            <DomWrapper />
                          </CSSMotion>
                        </ErrorList>
                      </div>
                    </Col>
                  </FormItemInput>
                </div>
              </Row>
            </FormItem>
            <FormItem
              wrapperCol={
                Object {
                  "offset": 10,
                  "span": 14,
                }
              }
            >
              <Row
                className="ant-form-item"
                key="row"
              >
                <div
                  className="ant-row ant-form-item"
                  style={Object {}}
                >
                  <FormItemLabel
                    prefixCls="ant-form"
                    requiredMark={true}
                    wrapperCol={
                      Object {
                        "offset": 10,
                        "span": 14,
                      }
                    }
                  />
                  <FormItemInput
                    errors={Array []}
                    onDomErrorVisibleChange={[Function]}
                    prefixCls="ant-form"
                    status=""
                    validateStatus=""
                    wrapperCol={
                      Object {
                        "offset": 10,
                        "span": 14,
                      }
                    }
                  >
                    <Col
                      className="ant-form-item-control"
                      offset={10}
                      span={14}
                    >
                      <div
                        className="ant-col ant-col-14 ant-col-offset-10 ant-form-item-control"
                        style={Object {}}
                      >
                        <div
                          className="ant-form-item-control-input"
                        >
                          <div
                            className="ant-form-item-control-input-content"
                          >
                            <Space>
                              <div
                                className="ant-space ant-space-horizontal ant-space-align-center"
                                style={Object {}}
                              >
                                <Item
                                  className="ant-space-item"
                                  direction="horizontal"
                                  index={0}
                                  key="ant-space-item-0"
                                  marginDirection="marginRight"
                                  wrap={false}
                                >
                                  <div
                                    className="ant-space-item"
                                    style={
                                      Object {
                                        "marginRight": 8,
                                      }
                                    }
                                  >
                                    <Button
                                      disabled={true}
                                      htmlType="submit"
                                      type="primary"
                                    >
                                      <Wave>
                                        <button
                                          className="ant-btn ant-btn-primary"
                                          disabled={true}
                                          onClick={[Function]}
                                          type="submit"
                                        >
                                          <LoadingIcon
                                            existIcon={false}
                                            loading={false}
                                            prefixCls="ant-btn"
                                          >
                                            <CSSMotion
                                              motionName="ant-btn-loading-icon-motion"
                                              onAppearActive={[Function]}
                                              onAppearStart={[Function]}
                                              onEnterActive={[Function]}
                                              onEnterStart={[Function]}
                                              onLeaveActive={[Function]}
                                              onLeaveStart={[Function]}
                                              removeOnLeave={true}
                                              visible={false}
                                            >
                                              <DomWrapper />
                                            </CSSMotion>
                                          </LoadingIcon>
                                          <span
                                            key=".0"
                                          >
                                            Submit
                                          </span>
                                        </button>
                                      </Wave>
                                    </Button>
                                  </div>
                                </Item>
                                <Item
                                  className="ant-space-item"
                                  direction="horizontal"
                                  index={1}
                                  key="ant-space-item-1"
                                  marginDirection="marginRight"
                                  wrap={false}
                                >
                                  <div
                                    className="ant-space-item"
                                    style={Object {}}
                                  >
                                    <Button
                                      htmlType="button"
                                      onClick={[Function]}
                                    >
                                      <Wave>
                                        <button
                                          className="ant-btn"
                                          onClick={[Function]}
                                          type="button"
                                        >
                                          <LoadingIcon
                                            existIcon={false}
                                            loading={false}
                                            prefixCls="ant-btn"
                                          >
                                            <CSSMotion
                                              motionName="ant-btn-loading-icon-motion"
                                              onAppearActive={[Function]}
                                              onAppearStart={[Function]}
                                              onEnterActive={[Function]}
                                              onEnterStart={[Function]}
                                              onLeaveActive={[Function]}
                                              onLeaveStart={[Function]}
                                              removeOnLeave={true}
                                              visible={false}
                                            >
                                              <DomWrapper />
                                            </CSSMotion>
                                          </LoadingIcon>
                                          <span
                                            key=".0"
                                          >
                                            Reset
                                          </span>
                                        </button>
                                      </Wave>
                                    </Button>
                                  </div>
                                </Item>
                              </div>
                            </Space>
                          </div>
                        </div>
                        <ErrorList
                          errors={Array []}
                          onDomErrorVisibleChange={[Function]}
                        >
                          <CSSMotion
                            motionAppear={true}
                            motionDeadline={500}
                            motionName="ant-show-help"
                            onLeaveEnd={[Function]}
                            removeOnLeave={true}
                            visible={false}
                          >
                            <DomWrapper />
                          </CSSMotion>
                        </ErrorList>
                      </div>
                    </Col>
                  </FormItemInput>
                </div>
              </Row>
            </FormItem>
          </form>
        </ForwardRef(Form)>
      </SizeContextProvider>
    </ForwardRef(InternalForm)>
  </WebhookForm>
</Provider>
`;

exports[`Webhook form component snapshot testing should render the component 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <WebhookForm>
    <ForwardRef(InternalForm)
      form={
        Object {
          "__INTERNAL__": Object {
            "itemRef": [Function],
            "name": "create-webhook",
          },
          "getFieldError": [Function],
          "getFieldInstance": [Function],
          "getFieldValue": [Function],
          "getFieldsError": [Function],
          "getFieldsValue": [Function],
          "getInternalHooks": [Function],
          "isFieldTouched": [Function],
          "isFieldValidating": [Function],
          "isFieldsTouched": [Function],
          "isFieldsValidating": [Function],
          "resetFields": [Function],
          "scrollToField": [Function],
          "setFields": [Function],
          "setFieldsValue": [Function],
          "submit": [Function],
          "validateFields": [Function],
        }
      }
      initialValues={Object {}}
      labelCol={
        Object {
          "span": 8,
        }
      }
      name="create-webhook"
      onFinish={[Function]}
      onValuesChange={[Function]}
      wrapperCol={
        Object {
          "span": 10,
        }
      }
    >
      <SizeContextProvider>
        <ForwardRef(Form)
          className="ant-form ant-form-horizontal"
          form={
            Object {
              "__INTERNAL__": Object {
                "itemRef": [Function],
                "name": "create-webhook",
              },
              "getFieldError": [Function],
              "getFieldInstance": [Function],
              "getFieldValue": [Function],
              "getFieldsError": [Function],
              "getFieldsValue": [Function],
              "getInternalHooks": [Function],
              "isFieldTouched": [Function],
              "isFieldValidating": [Function],
              "isFieldsTouched": [Function],
              "isFieldsValidating": [Function],
              "resetFields": [Function],
              "scrollToField": [Function],
              "setFields": [Function],
              "setFieldsValue": [Function],
              "submit": [Function],
              "validateFields": [Function],
            }
          }
          id="create-webhook"
          initialValues={Object {}}
          name="create-webhook"
          onFinish={[Function]}
          onFinishFailed={[Function]}
          onValuesChange={[Function]}
        >
          <form
            className="ant-form ant-form-horizontal"
            id="create-webhook"
            onReset={[Function]}
            onSubmit={[Function]}
          >
            <FormItem
              label="Name"
              name="name"
            >
              <WrapperField
                label="Name"
                messageVariables={
                  Object {
                    "label": "Name",
                  }
                }
                name="name"
                onReset={[Function]}
                trigger="onChange"
                validateTrigger="onChange"
              >
                <Field
                  fieldContext={
                    Object {
                      "__INTERNAL__": Object {
                        "itemRef": [Function],
                        "name": "create-webhook",
                      },
                      "getFieldError": [Function],
                      "getFieldInstance": [Function],
                      "getFieldValue": [Function],
                      "getFieldsError": [Function],
                      "getFieldsValue": [Function],
                      "getInternalHooks": [Function],
                      "isFieldTouched": [Function],
                      "isFieldValidating": [Function],
                      "isFieldsTouched": [Function],
                      "isFieldsValidating": [Function],
                      "resetFields": [Function],
                      "scrollToField": [Function],
                      "setFields": [Function],
                      "setFieldsValue": [Function],
                      "submit": [Function],
                      "validateFields": [Function],
                      "validateTrigger": "onChange",
                    }
                  }
                  key="_name"
                  label="Name"
                  messageVariables={
                    Object {
                      "label": "Name",
                    }
                  }
                  name={
                    Array [
                      "name",
                    ]
                  }
                  onReset={[Function]}
                  trigger="onChange"
                  validateTrigger="onChange"
                  valuePropName="value"
                >
                  <Row
                    className="ant-form-item"
                    key="row"
                  >
                    <div
                      className="ant-row ant-form-item"
                      style={Object {}}
                    >
                      <FormItemLabel
                        htmlFor="create-webhook_name"
                        label="Name"
                        name="name"
                        prefixCls="ant-form"
                        required={false}
                        requiredMark={true}
                      >
                        <Col
                          className="ant-form-item-label"
                          span={8}
                        >
                          <div
                            className="ant-col ant-col-8 ant-form-item-label"
                            style={Object {}}
                          >
                            <label
                              className=""
                              htmlFor="create-webhook_name"
                              title="Name"
                            >
                              Name
                            </label>
                          </div>
                        </Col>
                      </FormItemLabel>
                      <FormItemInput
                        errors={Array []}
                        label="Name"
                        name={
                          Array [
                            "name",
                          ]
                        }
                        onDomErrorVisibleChange={[Function]}
                        prefixCls="ant-form"
                        status=""
                        touched={false}
                        validateStatus=""
                        validating={false}
                      >
                        <Col
                          className="ant-form-item-control"
                          span={10}
                        >
                          <div
                            className="ant-col ant-col-10 ant-form-item-control"
                            style={Object {}}
                          >
                            <div
                              className="ant-form-item-control-input"
                            >
                              <div
                                className="ant-form-item-control-input-content"
                              >
                                <Component
                                  update={1}
                                >
                                  <Input
                                    id="create-webhook_name"
                                    onChange={[Function]}
                                    type="text"
                                  >
                                    <ClearableLabeledInput
                                      bordered={true}
                                      element={
                                        <input
                                          className="ant-input"
                                          id="create-webhook_name"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          onKeyDown={[Function]}
                                          type="text"
                                        />
                                      }
                                      focused={false}
                                      handleReset={[Function]}
                                      id="create-webhook_name"
                                      inputType="input"
                                      onChange={[Function]}
                                      prefixCls="ant-input"
                                      triggerFocus={[Function]}
                                      type="text"
                                      value=""
                                    >
                                      <input
                                        className="ant-input"
                                        id="create-webhook_name"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        type="text"
                                        value=""
                                      />
                                    </ClearableLabeledInput>
                                  </Input>
                                </Component>
                              </div>
                            </div>
                            <ErrorList
                              errors={Array []}
                              onDomErrorVisibleChange={[Function]}
                            >
                              <CSSMotion
                                motionAppear={true}
                                motionDeadline={500}
                                motionName="ant-show-help"
                                onLeaveEnd={[Function]}
                                removeOnLeave={true}
                                visible={false}
                              >
                                <DomWrapper />
                              </CSSMotion>
                            </ErrorList>
                          </div>
                        </Col>
                      </FormItemInput>
                    </div>
                  </Row>
                </Field>
              </WrapperField>
            </FormItem>
            <FormItem
              label="Url"
              name="url"
            >
              <WrapperField
                label="Url"
                messageVariables={
                  Object {
                    "label": "Url",
                  }
                }
                name="url"
                onReset={[Function]}
                trigger="onChange"
                validateTrigger="onChange"
              >
                <Field
                  fieldContext={
                    Object {
                      "__INTERNAL__": Object {
                        "itemRef": [Function],
                        "name": "create-webhook",
                      },
                      "getFieldError": [Function],
                      "getFieldInstance": [Function],
                      "getFieldValue": [Function],
                      "getFieldsError": [Function],
                      "getFieldsValue": [Function],
                      "getInternalHooks": [Function],
                      "isFieldTouched": [Function],
                      "isFieldValidating": [Function],
                      "isFieldsTouched": [Function],
                      "isFieldsValidating": [Function],
                      "resetFields": [Function],
                      "scrollToField": [Function],
                      "setFields": [Function],
                      "setFieldsValue": [Function],
                      "submit": [Function],
                      "validateFields": [Function],
                      "validateTrigger": "onChange",
                    }
                  }
                  key="_url"
                  label="Url"
                  messageVariables={
                    Object {
                      "label": "Url",
                    }
                  }
                  name={
                    Array [
                      "url",
                    ]
                  }
                  onReset={[Function]}
                  trigger="onChange"
                  validateTrigger="onChange"
                  valuePropName="value"
                >
                  <Row
                    className="ant-form-item"
                    key="row"
                  >
                    <div
                      className="ant-row ant-form-item"
                      style={Object {}}
                    >
                      <FormItemLabel
                        htmlFor="create-webhook_url"
                        label="Url"
                        name="url"
                        prefixCls="ant-form"
                        required={false}
                        requiredMark={true}
                      >
                        <Col
                          className="ant-form-item-label"
                          span={8}
                        >
                          <div
                            className="ant-col ant-col-8 ant-form-item-label"
                            style={Object {}}
                          >
                            <label
                              className=""
                              htmlFor="create-webhook_url"
                              title="Url"
                            >
                              Url
                            </label>
                          </div>
                        </Col>
                      </FormItemLabel>
                      <FormItemInput
                        errors={Array []}
                        label="Url"
                        name={
                          Array [
                            "url",
                          ]
                        }
                        onDomErrorVisibleChange={[Function]}
                        prefixCls="ant-form"
                        status=""
                        touched={false}
                        validateStatus=""
                        validating={false}
                      >
                        <Col
                          className="ant-form-item-control"
                          span={10}
                        >
                          <div
                            className="ant-col ant-col-10 ant-form-item-control"
                            style={Object {}}
                          >
                            <div
                              className="ant-form-item-control-input"
                            >
                              <div
                                className="ant-form-item-control-input-content"
                              >
                                <Component
                                  update={1}
                                >
                                  <Input
                                    id="create-webhook_url"
                                    onChange={[Function]}
                                    type="text"
                                  >
                                    <ClearableLabeledInput
                                      bordered={true}
                                      element={
                                        <input
                                          className="ant-input"
                                          id="create-webhook_url"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          onKeyDown={[Function]}
                                          type="text"
                                        />
                                      }
                                      focused={false}
                                      handleReset={[Function]}
                                      id="create-webhook_url"
                                      inputType="input"
                                      onChange={[Function]}
                                      prefixCls="ant-input"
                                      triggerFocus={[Function]}
                                      type="text"
                                      value=""
                                    >
                                      <input
                                        className="ant-input"
                                        id="create-webhook_url"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        type="text"
                                        value=""
                                      />
                                    </ClearableLabeledInput>
                                  </Input>
                                </Component>
                              </div>
                            </div>
                            <ErrorList
                              errors={Array []}
                              onDomErrorVisibleChange={[Function]}
                            >
                              <CSSMotion
                                motionAppear={true}
                                motionDeadline={500}
                                motionName="ant-show-help"
                                onLeaveEnd={[Function]}
                                removeOnLeave={true}
                                visible={false}
                              >
                                <DomWrapper />
                              </CSSMotion>
                            </ErrorList>
                          </div>
                        </Col>
                      </FormItemInput>
                    </div>
                  </Row>
                </Field>
              </WrapperField>
            </FormItem>
            <FormItem
              label="Enable"
              name="enabled"
              valuePropName="checked"
            >
              <WrapperField
                label="Enable"
                messageVariables={
                  Object {
                    "label": "Enable",
                  }
                }
                name="enabled"
                onReset={[Function]}
                trigger="onChange"
                validateTrigger="onChange"
                valuePropName="checked"
              >
                <Field
                  fieldContext={
                    Object {
                      "__INTERNAL__": Object {
                        "itemRef": [Function],
                        "name": "create-webhook",
                      },
                      "getFieldError": [Function],
                      "getFieldInstance": [Function],
                      "getFieldValue": [Function],
                      "getFieldsError": [Function],
                      "getFieldsValue": [Function],
                      "getInternalHooks": [Function],
                      "isFieldTouched": [Function],
                      "isFieldValidating": [Function],
                      "isFieldsTouched": [Function],
                      "isFieldsValidating": [Function],
                      "resetFields": [Function],
                      "scrollToField": [Function],
                      "setFields": [Function],
                      "setFieldsValue": [Function],
                      "submit": [Function],
                      "validateFields": [Function],
                      "validateTrigger": "onChange",
                    }
                  }
                  key="_enabled"
                  label="Enable"
                  messageVariables={
                    Object {
                      "label": "Enable",
                    }
                  }
                  name={
                    Array [
                      "enabled",
                    ]
                  }
                  onReset={[Function]}
                  trigger="onChange"
                  validateTrigger="onChange"
                  valuePropName="checked"
                >
                  <Row
                    className="ant-form-item"
                    key="row"
                  >
                    <div
                      className="ant-row ant-form-item"
                      style={Object {}}
                    >
                      <FormItemLabel
                        htmlFor="create-webhook_enabled"
                        label="Enable"
                        name="enabled"
                        prefixCls="ant-form"
                        required={false}
                        requiredMark={true}
                        valuePropName="checked"
                      >
                        <Col
                          className="ant-form-item-label"
                          span={8}
                        >
                          <div
                            className="ant-col ant-col-8 ant-form-item-label"
                            style={Object {}}
                          >
                            <label
                              className=""
                              htmlFor="create-webhook_enabled"
                              title="Enable"
                            >
                              Enable
                            </label>
                          </div>
                        </Col>
                      </FormItemLabel>
                      <FormItemInput
                        errors={Array []}
                        label="Enable"
                        name={
                          Array [
                            "enabled",
                          ]
                        }
                        onDomErrorVisibleChange={[Function]}
                        prefixCls="ant-form"
                        status=""
                        touched={false}
                        validateStatus=""
                        validating={false}
                        valuePropName="checked"
                      >
                        <Col
                          className="ant-form-item-control"
                          span={10}
                        >
                          <div
                            className="ant-col ant-col-10 ant-form-item-control"
                            style={Object {}}
                          >
                            <div
                              className="ant-form-item-control-input"
                            >
                              <div
                                className="ant-form-item-control-input-content"
                              >
                                <Component
                                  update={1}
                                >
                                  <Switch
                                    id="create-webhook_enabled"
                                    onChange={[Function]}
                                  >
                                    <Wave
                                      insertExtraNode={true}
                                    >
                                      <Switch
                                        className=""
                                        id="create-webhook_enabled"
                                        loadingIcon={
                                          <div
                                            className="ant-switch-handle"
                                          />
                                        }
                                        onChange={[Function]}
                                        prefixCls="ant-switch"
                                      >
                                        <button
                                          aria-checked={false}
                                          className="ant-switch"
                                          id="create-webhook_enabled"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="switch"
                                          type="button"
                                        >
                                          <div
                                            className="ant-switch-handle"
                                          />
                                          <span
                                            className="ant-switch-inner"
                                          />
                                        </button>
                                      </Switch>
                                    </Wave>
                                  </Switch>
                                </Component>
                              </div>
                            </div>
                            <ErrorList
                              errors={Array []}
                              onDomErrorVisibleChange={[Function]}
                            >
                              <CSSMotion
                                motionAppear={true}
                                motionDeadline={500}
                                motionName="ant-show-help"
                                onLeaveEnd={[Function]}
                                removeOnLeave={true}
                                visible={false}
                              >
                                <DomWrapper />
                              </CSSMotion>
                            </ErrorList>
                          </div>
                        </Col>
                      </FormItemInput>
                    </div>
                  </Row>
                </Field>
              </WrapperField>
            </FormItem>
            <FormItem
              label="Events"
              name="events"
            >
              <WrapperField
                label="Events"
                messageVariables={
                  Object {
                    "label": "Events",
                  }
                }
                name="events"
                onReset={[Function]}
                trigger="onChange"
                validateTrigger="onChange"
              >
                <Field
                  fieldContext={
                    Object {
                      "__INTERNAL__": Object {
                        "itemRef": [Function],
                        "name": "create-webhook",
                      },
                      "getFieldError": [Function],
                      "getFieldInstance": [Function],
                      "getFieldValue": [Function],
                      "getFieldsError": [Function],
                      "getFieldsValue": [Function],
                      "getInternalHooks": [Function],
                      "isFieldTouched": [Function],
                      "isFieldValidating": [Function],
                      "isFieldsTouched": [Function],
                      "isFieldsValidating": [Function],
                      "resetFields": [Function],
                      "scrollToField": [Function],
                      "setFields": [Function],
                      "setFieldsValue": [Function],
                      "submit": [Function],
                      "validateFields": [Function],
                      "validateTrigger": "onChange",
                    }
                  }
                  key="_events"
                  label="Events"
                  messageVariables={
                    Object {
                      "label": "Events",
                    }
                  }
                  name={
                    Array [
                      "events",
                    ]
                  }
                  onReset={[Function]}
                  trigger="onChange"
                  validateTrigger="onChange"
                  valuePropName="value"
                >
                  <Row
                    className="ant-form-item"
                    key="row"
                  >
                    <div
                      className="ant-row ant-form-item"
                      style={Object {}}
                    >
                      <FormItemLabel
                        htmlFor="create-webhook_events"
                        label="Events"
                        name="events"
                        prefixCls="ant-form"
                        required={false}
                        requiredMark={true}
                      >
                        <Col
                          className="ant-form-item-label"
                          span={8}
                        >
                          <div
                            className="ant-col ant-col-8 ant-form-item-label"
                            style={Object {}}
                          >
                            <label
                              className=""
                              htmlFor="create-webhook_events"
                              title="Events"
                            >
                              Events
                            </label>
                          </div>
                        </Col>
                      </FormItemLabel>
                      <FormItemInput
                        errors={Array []}
                        label="Events"
                        name={
                          Array [
                            "events",
                          ]
                        }
                        onDomErrorVisibleChange={[Function]}
                        prefixCls="ant-form"
                        status=""
                        touched={false}
                        validateStatus=""
                        validating={false}
                      >
                        <Col
                          className="ant-form-item-control"
                          span={10}
                        >
                          <div
                            className="ant-col ant-col-10 ant-form-item-control"
                            style={Object {}}
                          >
                            <div
                              className="ant-form-item-control-input"
                            >
                              <div
                                className="ant-form-item-control-input-content"
                              >
                                <Component
                                  update={1}
                                >
                                  <ForwardRef(InternalCheckboxGroup)
                                    id="create-webhook_events"
                                    onChange={[Function]}
                                  >
                                    <div
                                      className="ant-checkbox-group"
                                      id="create-webhook_events"
                                    >
                                      <Row
                                        gutter={
                                          Array [
                                            4,
                                            16,
                                          ]
                                        }
                                      >
                                        <div
                                          className="ant-row"
                                          style={
                                            Object {
                                              "marginBottom": -8,
                                              "marginLeft": -2,
                                              "marginRight": -2,
                                              "marginTop": -8,
                                            }
                                          }
                                        >
                                          <Col
                                            key="1"
                                            span={8}
                                            style={
                                              Object {
                                                "width": "550px",
                                              }
                                            }
                                          >
                                            <div
                                              className="ant-col ant-col-8"
                                              style={
                                                Object {
                                                  "paddingBottom": 8,
                                                  "paddingLeft": 2,
                                                  "paddingRight": 2,
                                                  "paddingTop": 8,
                                                  "width": "550px",
                                                }
                                              }
                                            >
                                              <Checkbox
                                                label="event"
                                                value={1}
                                              >
                                                <label
                                                  className="ant-checkbox-wrapper"
                                                >
                                                  <Checkbox
                                                    checked={false}
                                                    className=""
                                                    defaultChecked={false}
                                                    label="event"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onFocus={[Function]}
                                                    onKeyDown={[Function]}
                                                    onKeyPress={[Function]}
                                                    onKeyUp={[Function]}
                                                    prefixCls="ant-checkbox"
                                                    style={Object {}}
                                                    type="checkbox"
                                                    value={1}
                                                  >
                                                    <span
                                                      className="ant-checkbox"
                                                      style={Object {}}
                                                    >
                                                      <input
                                                        checked={false}
                                                        className="ant-checkbox-input"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        onKeyPress={[Function]}
                                                        onKeyUp={[Function]}
                                                        type="checkbox"
                                                        value={1}
                                                      />
                                                      <span
                                                        className="ant-checkbox-inner"
                                                      />
                                                    </span>
                                                  </Checkbox>
                                                  <span>
                                                    Event
                                                  </span>
                                                </label>
                                              </Checkbox>
                                            </div>
                                          </Col>
                                        </div>
                                      </Row>
                                    </div>
                                  </ForwardRef(InternalCheckboxGroup)>
                                </Component>
                              </div>
                            </div>
                            <ErrorList
                              errors={Array []}
                              onDomErrorVisibleChange={[Function]}
                            >
                              <CSSMotion
                                motionAppear={true}
                                motionDeadline={500}
                                motionName="ant-show-help"
                                onLeaveEnd={[Function]}
                                removeOnLeave={true}
                                visible={false}
                              >
                                <DomWrapper />
                              </CSSMotion>
                            </ErrorList>
                          </div>
                        </Col>
                      </FormItemInput>
                    </div>
                  </Row>
                </Field>
              </WrapperField>
            </FormItem>
            <FormItem
              style={
                Object {
                  "alignItems": "center",
                  "display": "flex",
                  "justifyContent": "center",
                }
              }
              wrapperCol={
                Object {
                  "offset": 2,
                  "span": 10,
                }
              }
            >
              <Row
                className="ant-form-item"
                key="row"
                style={
                  Object {
                    "alignItems": "center",
                    "display": "flex",
                    "justifyContent": "center",
                  }
                }
              >
                <div
                  className="ant-row ant-form-item"
                  style={
                    Object {
                      "alignItems": "center",
                      "display": "flex",
                      "justifyContent": "center",
                    }
                  }
                >
                  <FormItemLabel
                    prefixCls="ant-form"
                    requiredMark={true}
                    style={
                      Object {
                        "alignItems": "center",
                        "display": "flex",
                        "justifyContent": "center",
                      }
                    }
                    wrapperCol={
                      Object {
                        "offset": 2,
                        "span": 10,
                      }
                    }
                  />
                  <FormItemInput
                    errors={Array []}
                    onDomErrorVisibleChange={[Function]}
                    prefixCls="ant-form"
                    status=""
                    style={
                      Object {
                        "alignItems": "center",
                        "display": "flex",
                        "justifyContent": "center",
                      }
                    }
                    validateStatus=""
                    wrapperCol={
                      Object {
                        "offset": 2,
                        "span": 10,
                      }
                    }
                  >
                    <Col
                      className="ant-form-item-control"
                      offset={2}
                      span={10}
                    >
                      <div
                        className="ant-col ant-col-10 ant-col-offset-2 ant-form-item-control"
                        style={Object {}}
                      >
                        <div
                          className="ant-form-item-control-input"
                        >
                          <div
                            className="ant-form-item-control-input-content"
                          >
                            <Button
                              onClick={[Function]}
                              size="small"
                              style={
                                Object {
                                  "width": "90%",
                                }
                              }
                            >
                              <Wave>
                                <button
                                  className="ant-btn ant-btn-sm"
                                  onClick={[Function]}
                                  style={
                                    Object {
                                      "width": "90%",
                                    }
                                  }
                                  type="button"
                                >
                                  <LoadingIcon
                                    existIcon={false}
                                    loading={false}
                                    prefixCls="ant-btn"
                                  >
                                    <CSSMotion
                                      motionName="ant-btn-loading-icon-motion"
                                      onAppearActive={[Function]}
                                      onAppearStart={[Function]}
                                      onEnterActive={[Function]}
                                      onEnterStart={[Function]}
                                      onLeaveActive={[Function]}
                                      onLeaveStart={[Function]}
                                      removeOnLeave={true}
                                      visible={false}
                                    >
                                      <DomWrapper />
                                    </CSSMotion>
                                  </LoadingIcon>
                                  <span
                                    key=".0"
                                  >
                                    Load More Events
                                  </span>
                                </button>
                              </Wave>
                            </Button>
                          </div>
                        </div>
                        <ErrorList
                          errors={Array []}
                          onDomErrorVisibleChange={[Function]}
                        >
                          <CSSMotion
                            motionAppear={true}
                            motionDeadline={500}
                            motionName="ant-show-help"
                            onLeaveEnd={[Function]}
                            removeOnLeave={true}
                            visible={false}
                          >
                            <DomWrapper />
                          </CSSMotion>
                        </ErrorList>
                      </div>
                    </Col>
                  </FormItemInput>
                </div>
              </Row>
            </FormItem>
            <FormItem
              wrapperCol={
                Object {
                  "offset": 10,
                  "span": 14,
                }
              }
            >
              <Row
                className="ant-form-item"
                key="row"
              >
                <div
                  className="ant-row ant-form-item"
                  style={Object {}}
                >
                  <FormItemLabel
                    prefixCls="ant-form"
                    requiredMark={true}
                    wrapperCol={
                      Object {
                        "offset": 10,
                        "span": 14,
                      }
                    }
                  />
                  <FormItemInput
                    errors={Array []}
                    onDomErrorVisibleChange={[Function]}
                    prefixCls="ant-form"
                    status=""
                    validateStatus=""
                    wrapperCol={
                      Object {
                        "offset": 10,
                        "span": 14,
                      }
                    }
                  >
                    <Col
                      className="ant-form-item-control"
                      offset={10}
                      span={14}
                    >
                      <div
                        className="ant-col ant-col-14 ant-col-offset-10 ant-form-item-control"
                        style={Object {}}
                      >
                        <div
                          className="ant-form-item-control-input"
                        >
                          <div
                            className="ant-form-item-control-input-content"
                          >
                            <Space>
                              <div
                                className="ant-space ant-space-horizontal ant-space-align-center"
                                style={Object {}}
                              >
                                <Item
                                  className="ant-space-item"
                                  direction="horizontal"
                                  index={0}
                                  key="ant-space-item-0"
                                  marginDirection="marginRight"
                                  wrap={false}
                                >
                                  <div
                                    className="ant-space-item"
                                    style={
                                      Object {
                                        "marginRight": 8,
                                      }
                                    }
                                  >
                                    <Button
                                      disabled={true}
                                      htmlType="submit"
                                      type="primary"
                                    >
                                      <Wave>
                                        <button
                                          className="ant-btn ant-btn-primary"
                                          disabled={true}
                                          onClick={[Function]}
                                          type="submit"
                                        >
                                          <LoadingIcon
                                            existIcon={false}
                                            loading={false}
                                            prefixCls="ant-btn"
                                          >
                                            <CSSMotion
                                              motionName="ant-btn-loading-icon-motion"
                                              onAppearActive={[Function]}
                                              onAppearStart={[Function]}
                                              onEnterActive={[Function]}
                                              onEnterStart={[Function]}
                                              onLeaveActive={[Function]}
                                              onLeaveStart={[Function]}
                                              removeOnLeave={true}
                                              visible={false}
                                            >
                                              <DomWrapper />
                                            </CSSMotion>
                                          </LoadingIcon>
                                          <span
                                            key=".0"
                                          >
                                            Submit
                                          </span>
                                        </button>
                                      </Wave>
                                    </Button>
                                  </div>
                                </Item>
                                <Item
                                  className="ant-space-item"
                                  direction="horizontal"
                                  index={1}
                                  key="ant-space-item-1"
                                  marginDirection="marginRight"
                                  wrap={false}
                                >
                                  <div
                                    className="ant-space-item"
                                    style={Object {}}
                                  >
                                    <Button
                                      htmlType="button"
                                      onClick={[Function]}
                                    >
                                      <Wave>
                                        <button
                                          className="ant-btn"
                                          onClick={[Function]}
                                          type="button"
                                        >
                                          <LoadingIcon
                                            existIcon={false}
                                            loading={false}
                                            prefixCls="ant-btn"
                                          >
                                            <CSSMotion
                                              motionName="ant-btn-loading-icon-motion"
                                              onAppearActive={[Function]}
                                              onAppearStart={[Function]}
                                              onEnterActive={[Function]}
                                              onEnterStart={[Function]}
                                              onLeaveActive={[Function]}
                                              onLeaveStart={[Function]}
                                              removeOnLeave={true}
                                              visible={false}
                                            >
                                              <DomWrapper />
                                            </CSSMotion>
                                          </LoadingIcon>
                                          <span
                                            key=".0"
                                          >
                                            Reset
                                          </span>
                                        </button>
                                      </Wave>
                                    </Button>
                                  </div>
                                </Item>
                              </div>
                            </Space>
                          </div>
                        </div>
                        <ErrorList
                          errors={Array []}
                          onDomErrorVisibleChange={[Function]}
                        >
                          <CSSMotion
                            motionAppear={true}
                            motionDeadline={500}
                            motionName="ant-show-help"
                            onLeaveEnd={[Function]}
                            removeOnLeave={true}
                            visible={false}
                          >
                            <DomWrapper />
                          </CSSMotion>
                        </ErrorList>
                      </div>
                    </Col>
                  </FormItemInput>
                </div>
              </Row>
            </FormItem>
          </form>
        </ForwardRef(Form)>
      </SizeContextProvider>
    </ForwardRef(InternalForm)>
  </WebhookForm>
</Provider>
`;

// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Formats Create Form component snapshot testing should match component with data 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <FormatForm
    data={
      Object {
        "description": "description",
        "name": "name",
        "slug": "slug",
      }
    }
    onCreate={[MockFunction]}
  >
    <ForwardRef(InternalForm)
      form={
        Object {
          "__INTERNAL__": Object {
            "itemRef": [Function],
            "name": "create-format",
          },
          "getFieldError": [Function],
          "getFieldInstance": [Function],
          "getFieldValue": [Function],
          "getFieldsError": [Function],
          "getFieldsValue": [Function],
          "getInternalHooks": [Function],
          "isFieldTouched": [Function],
          "isFieldValidating": [Function],
          "isFieldsTouched": [Function],
          "isFieldsValidating": [Function],
          "resetFields": [Function],
          "scrollToField": [Function],
          "setFields": [Function],
          "setFieldsValue": [Function],
          "submit": [Function],
          "validateFields": [Function],
        }
      }
      initialValues={
        Object {
          "description": "description",
          "name": "name",
          "slug": "slug",
        }
      }
      layout="vertical"
      name="create-format"
      onFinish={[Function]}
      onValuesChange={[Function]}
    >
      <SizeContextProvider>
        <ForwardRef(Form)
          className="ant-form ant-form-vertical"
          form={
            Object {
              "__INTERNAL__": Object {
                "itemRef": [Function],
                "name": "create-format",
              },
              "getFieldError": [Function],
              "getFieldInstance": [Function],
              "getFieldValue": [Function],
              "getFieldsError": [Function],
              "getFieldsValue": [Function],
              "getInternalHooks": [Function],
              "isFieldTouched": [Function],
              "isFieldValidating": [Function],
              "isFieldsTouched": [Function],
              "isFieldsValidating": [Function],
              "resetFields": [Function],
              "scrollToField": [Function],
              "setFields": [Function],
              "setFieldsValue": [Function],
              "submit": [Function],
              "validateFields": [Function],
            }
          }
          id="create-format"
          initialValues={
            Object {
              "description": "description",
              "name": "name",
              "slug": "slug",
            }
          }
          name="create-format"
          onFinish={[Function]}
          onFinishFailed={[Function]}
          onValuesChange={[Function]}
        >
          <form
            className="ant-form ant-form-vertical"
            id="create-format"
            onReset={[Function]}
            onSubmit={[Function]}
          >
            <Row
              justify="center"
              style={
                Object {
                  "margin": "0 auto",
                  "maxWidth": "1200px",
                  "width": "100%",
                }
              }
            >
              <div
                className="ant-row ant-row-center"
                style={
                  Object {
                    "margin": "0 auto",
                    "maxWidth": "1200px",
                    "width": "100%",
                  }
                }
              >
                <Col
                  span={24}
                >
                  <div
                    className="ant-col ant-col-24"
                    style={Object {}}
                  >
                    <Row
                      gutter={40}
                      justify="end"
                    >
                      <div
                        className="ant-row ant-row-end"
                        style={
                          Object {
                            "marginLeft": -20,
                            "marginRight": -20,
                          }
                        }
                      >
                        <FormItem>
                          <Row
                            className="ant-form-item"
                            key="row"
                          >
                            <div
                              className="ant-row ant-form-item"
                              style={Object {}}
                            >
                              <FormItemLabel
                                prefixCls="ant-form"
                                requiredMark={true}
                              />
                              <FormItemInput
                                errors={Array []}
                                onDomErrorVisibleChange={[Function]}
                                prefixCls="ant-form"
                                status=""
                                validateStatus=""
                              >
                                <Col
                                  className="ant-form-item-control"
                                >
                                  <div
                                    className="ant-col ant-form-item-control"
                                    style={Object {}}
                                  >
                                    <div
                                      className="ant-form-item-control-input"
                                    >
                                      <div
                                        className="ant-form-item-control-input-content"
                                      >
                                        <Space>
                                          <div
                                            className="ant-space ant-space-horizontal ant-space-align-center"
                                            style={Object {}}
                                          >
                                            <Item
                                              className="ant-space-item"
                                              direction="horizontal"
                                              index={0}
                                              key="ant-space-item-0"
                                              marginDirection="marginRight"
                                              wrap={false}
                                            >
                                              <div
                                                className="ant-space-item"
                                                style={
                                                  Object {
                                                    "marginRight": 8,
                                                  }
                                                }
                                              >
                                                <Button
                                                  htmlType="button"
                                                  onClick={[Function]}
                                                >
                                                  <Wave>
                                                    <button
                                                      className="ant-btn"
                                                      onClick={[Function]}
                                                      type="button"
                                                    >
                                                      <LoadingIcon
                                                        existIcon={false}
                                                        loading={false}
                                                        prefixCls="ant-btn"
                                                      >
                                                        <CSSMotion
                                                          motionName="ant-btn-loading-icon-motion"
                                                          onAppearActive={[Function]}
                                                          onAppearStart={[Function]}
                                                          onEnterActive={[Function]}
                                                          onEnterStart={[Function]}
                                                          onLeaveActive={[Function]}
                                                          onLeaveStart={[Function]}
                                                          removeOnLeave={true}
                                                          visible={false}
                                                        >
                                                          <DomWrapper />
                                                        </CSSMotion>
                                                      </LoadingIcon>
                                                      <span
                                                        key=".0"
                                                      >
                                                        Reset
                                                      </span>
                                                    </button>
                                                  </Wave>
                                                </Button>
                                              </div>
                                            </Item>
                                            <Item
                                              className="ant-space-item"
                                              direction="horizontal"
                                              index={1}
                                              key="ant-space-item-1"
                                              marginDirection="marginRight"
                                              wrap={false}
                                            >
                                              <div
                                                className="ant-space-item"
                                                style={Object {}}
                                              >
                                                <Button
                                                  disabled={true}
                                                  htmlType="submit"
                                                  type="primary"
                                                >
                                                  <Wave>
                                                    <button
                                                      className="ant-btn ant-btn-primary"
                                                      disabled={true}
                                                      onClick={[Function]}
                                                      type="submit"
                                                    >
                                                      <LoadingIcon
                                                        existIcon={false}
                                                        loading={false}
                                                        prefixCls="ant-btn"
                                                      >
                                                        <CSSMotion
                                                          motionName="ant-btn-loading-icon-motion"
                                                          onAppearActive={[Function]}
                                                          onAppearStart={[Function]}
                                                          onEnterActive={[Function]}
                                                          onEnterStart={[Function]}
                                                          onLeaveActive={[Function]}
                                                          onLeaveStart={[Function]}
                                                          removeOnLeave={true}
                                                          visible={false}
                                                        >
                                                          <DomWrapper />
                                                        </CSSMotion>
                                                      </LoadingIcon>
                                                      <span
                                                        key=".0"
                                                      >
                                                        Submit
                                                      </span>
                                                    </button>
                                                  </Wave>
                                                </Button>
                                              </div>
                                            </Item>
                                          </div>
                                        </Space>
                                      </div>
                                    </div>
                                    <ErrorList
                                      errors={Array []}
                                      onDomErrorVisibleChange={[Function]}
                                    >
                                      <CSSMotion
                                        motionAppear={true}
                                        motionDeadline={500}
                                        motionName="ant-show-help"
                                        onLeaveEnd={[Function]}
                                        removeOnLeave={true}
                                        visible={false}
                                      >
                                        <DomWrapper />
                                      </CSSMotion>
                                    </ErrorList>
                                  </div>
                                </Col>
                              </FormItemInput>
                            </div>
                          </Row>
                        </FormItem>
                      </div>
                    </Row>
                  </div>
                </Col>
                <Col
                  span={24}
                >
                  <div
                    className="ant-col ant-col-24"
                    style={Object {}}
                  >
                    <Row
                      gutter={40}
                      justify="space-around"
                      style={
                        Object {
                          "background": "#f0f2f5",
                          "marginBottom": "1rem",
                          "padding": "1.25rem",
                        }
                      }
                    >
                      <div
                        className="ant-row ant-row-space-around"
                        style={
                          Object {
                            "background": "#f0f2f5",
                            "marginBottom": "1rem",
                            "marginLeft": -20,
                            "marginRight": -20,
                            "padding": "1.25rem",
                          }
                        }
                      >
                        <Col
                          span={12}
                        >
                          <div
                            className="ant-col ant-col-12"
                            style={
                              Object {
                                "paddingLeft": 20,
                                "paddingRight": 20,
                              }
                            }
                          >
                            <FormItem
                              label="Format Name"
                              name="name"
                              rules={
                                Array [
                                  Object {
                                    "message": "Please enter the name!",
                                    "required": true,
                                  },
                                  Object {
                                    "message": "Name must be minimum 3 characters.",
                                    "min": 3,
                                  },
                                  Object {
                                    "max": 50,
                                    "message": "Name must be maximum 50 characters.",
                                  },
                                ]
                              }
                            >
                              <WrapperField
                                label="Format Name"
                                messageVariables={
                                  Object {
                                    "label": "Format Name",
                                  }
                                }
                                name="name"
                                onReset={[Function]}
                                rules={
                                  Array [
                                    Object {
                                      "message": "Please enter the name!",
                                      "required": true,
                                    },
                                    Object {
                                      "message": "Name must be minimum 3 characters.",
                                      "min": 3,
                                    },
                                    Object {
                                      "max": 50,
                                      "message": "Name must be maximum 50 characters.",
                                    },
                                  ]
                                }
                                trigger="onChange"
                                validateTrigger="onChange"
                              >
                                <Field
                                  fieldContext={
                                    Object {
                                      "__INTERNAL__": Object {
                                        "itemRef": [Function],
                                        "name": "create-format",
                                      },
                                      "getFieldError": [Function],
                                      "getFieldInstance": [Function],
                                      "getFieldValue": [Function],
                                      "getFieldsError": [Function],
                                      "getFieldsValue": [Function],
                                      "getInternalHooks": [Function],
                                      "isFieldTouched": [Function],
                                      "isFieldValidating": [Function],
                                      "isFieldsTouched": [Function],
                                      "isFieldsValidating": [Function],
                                      "resetFields": [Function],
                                      "scrollToField": [Function],
                                      "setFields": [Function],
                                      "setFieldsValue": [Function],
                                      "submit": [Function],
                                      "validateFields": [Function],
                                      "validateTrigger": "onChange",
                                    }
                                  }
                                  key="_name"
                                  label="Format Name"
                                  messageVariables={
                                    Object {
                                      "label": "Format Name",
                                    }
                                  }
                                  name={
                                    Array [
                                      "name",
                                    ]
                                  }
                                  onReset={[Function]}
                                  rules={
                                    Array [
                                      Object {
                                        "message": "Please enter the name!",
                                        "required": true,
                                      },
                                      Object {
                                        "message": "Name must be minimum 3 characters.",
                                        "min": 3,
                                      },
                                      Object {
                                        "max": 50,
                                        "message": "Name must be maximum 50 characters.",
                                      },
                                    ]
                                  }
                                  trigger="onChange"
                                  validateTrigger="onChange"
                                  valuePropName="value"
                                >
                                  <Row
                                    className="ant-form-item"
                                    key="row"
                                  >
                                    <div
                                      className="ant-row ant-form-item"
                                      style={Object {}}
                                    >
                                      <FormItemLabel
                                        htmlFor="create-format_name"
                                        label="Format Name"
                                        name="name"
                                        prefixCls="ant-form"
                                        required={true}
                                        requiredMark={true}
                                        rules={
                                          Array [
                                            Object {
                                              "message": "Please enter the name!",
                                              "required": true,
                                            },
                                            Object {
                                              "message": "Name must be minimum 3 characters.",
                                              "min": 3,
                                            },
                                            Object {
                                              "max": 50,
                                              "message": "Name must be maximum 50 characters.",
                                            },
                                          ]
                                        }
                                      >
                                        <Col
                                          className="ant-form-item-label"
                                        >
                                          <div
                                            className="ant-col ant-form-item-label"
                                            style={Object {}}
                                          >
                                            <label
                                              className="ant-form-item-required"
                                              htmlFor="create-format_name"
                                              title="Format Name"
                                            >
                                              Format Name
                                            </label>
                                          </div>
                                        </Col>
                                      </FormItemLabel>
                                      <FormItemInput
                                        errors={Array []}
                                        label="Format Name"
                                        name={
                                          Array [
                                            "name",
                                          ]
                                        }
                                        onDomErrorVisibleChange={[Function]}
                                        prefixCls="ant-form"
                                        rules={
                                          Array [
                                            Object {
                                              "message": "Please enter the name!",
                                              "required": true,
                                            },
                                            Object {
                                              "message": "Name must be minimum 3 characters.",
                                              "min": 3,
                                            },
                                            Object {
                                              "max": 50,
                                              "message": "Name must be maximum 50 characters.",
                                            },
                                          ]
                                        }
                                        status=""
                                        touched={false}
                                        validateStatus=""
                                        validating={false}
                                      >
                                        <Col
                                          className="ant-form-item-control"
                                        >
                                          <div
                                            className="ant-col ant-form-item-control"
                                            style={Object {}}
                                          >
                                            <div
                                              className="ant-form-item-control-input"
                                            >
                                              <div
                                                className="ant-form-item-control-input-content"
                                              >
                                                <Component
                                                  update={1}
                                                  value="name"
                                                >
                                                  <Input
                                                    id="create-format_name"
                                                    onChange={[Function]}
                                                    type="text"
                                                    value="name"
                                                  >
                                                    <ClearableLabeledInput
                                                      bordered={true}
                                                      element={
                                                        <input
                                                          className="ant-input"
                                                          id="create-format_name"
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          onFocus={[Function]}
                                                          onKeyDown={[Function]}
                                                          type="text"
                                                          value="name"
                                                        />
                                                      }
                                                      focused={false}
                                                      handleReset={[Function]}
                                                      id="create-format_name"
                                                      inputType="input"
                                                      onChange={[Function]}
                                                      prefixCls="ant-input"
                                                      triggerFocus={[Function]}
                                                      type="text"
                                                      value="name"
                                                    >
                                                      <input
                                                        className="ant-input"
                                                        id="create-format_name"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        type="text"
                                                        value="name"
                                                      />
                                                    </ClearableLabeledInput>
                                                  </Input>
                                                </Component>
                                              </div>
                                            </div>
                                            <ErrorList
                                              errors={Array []}
                                              onDomErrorVisibleChange={[Function]}
                                            >
                                              <CSSMotion
                                                motionAppear={true}
                                                motionDeadline={500}
                                                motionName="ant-show-help"
                                                onLeaveEnd={[Function]}
                                                removeOnLeave={true}
                                                visible={false}
                                              >
                                                <DomWrapper />
                                              </CSSMotion>
                                            </ErrorList>
                                          </div>
                                        </Col>
                                      </FormItemInput>
                                    </div>
                                  </Row>
                                </Field>
                              </WrapperField>
                            </FormItem>
                            <SlugInput>
                              <FormItem
                                label="Slug"
                                name="slug"
                                rules={
                                  Array [
                                    Object {
                                      "message": "Please input the slug!",
                                      "required": true,
                                    },
                                    Object {
                                      "message": "Please enter valid slug!",
                                      "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                                    },
                                  ]
                                }
                              >
                                <WrapperField
                                  label="Slug"
                                  messageVariables={
                                    Object {
                                      "label": "Slug",
                                    }
                                  }
                                  name="slug"
                                  onReset={[Function]}
                                  rules={
                                    Array [
                                      Object {
                                        "message": "Please input the slug!",
                                        "required": true,
                                      },
                                      Object {
                                        "message": "Please enter valid slug!",
                                        "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                                      },
                                    ]
                                  }
                                  trigger="onChange"
                                  validateTrigger="onChange"
                                >
                                  <Field
                                    fieldContext={
                                      Object {
                                        "__INTERNAL__": Object {
                                          "itemRef": [Function],
                                          "name": "create-format",
                                        },
                                        "getFieldError": [Function],
                                        "getFieldInstance": [Function],
                                        "getFieldValue": [Function],
                                        "getFieldsError": [Function],
                                        "getFieldsValue": [Function],
                                        "getInternalHooks": [Function],
                                        "isFieldTouched": [Function],
                                        "isFieldValidating": [Function],
                                        "isFieldsTouched": [Function],
                                        "isFieldsValidating": [Function],
                                        "resetFields": [Function],
                                        "scrollToField": [Function],
                                        "setFields": [Function],
                                        "setFieldsValue": [Function],
                                        "submit": [Function],
                                        "validateFields": [Function],
                                        "validateTrigger": "onChange",
                                      }
                                    }
                                    key="_slug"
                                    label="Slug"
                                    messageVariables={
                                      Object {
                                        "label": "Slug",
                                      }
                                    }
                                    name={
                                      Array [
                                        "slug",
                                      ]
                                    }
                                    onReset={[Function]}
                                    rules={
                                      Array [
                                        Object {
                                          "message": "Please input the slug!",
                                          "required": true,
                                        },
                                        Object {
                                          "message": "Please enter valid slug!",
                                          "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                                        },
                                      ]
                                    }
                                    trigger="onChange"
                                    validateTrigger="onChange"
                                    valuePropName="value"
                                  >
                                    <Row
                                      className="ant-form-item"
                                      key="row"
                                    >
                                      <div
                                        className="ant-row ant-form-item"
                                        style={Object {}}
                                      >
                                        <FormItemLabel
                                          htmlFor="create-format_slug"
                                          label="Slug"
                                          name="slug"
                                          prefixCls="ant-form"
                                          required={true}
                                          requiredMark={true}
                                          rules={
                                            Array [
                                              Object {
                                                "message": "Please input the slug!",
                                                "required": true,
                                              },
                                              Object {
                                                "message": "Please enter valid slug!",
                                                "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                                              },
                                            ]
                                          }
                                        >
                                          <Col
                                            className="ant-form-item-label"
                                          >
                                            <div
                                              className="ant-col ant-form-item-label"
                                              style={Object {}}
                                            >
                                              <label
                                                className="ant-form-item-required"
                                                htmlFor="create-format_slug"
                                                title="Slug"
                                              >
                                                Slug
                                              </label>
                                            </div>
                                          </Col>
                                        </FormItemLabel>
                                        <FormItemInput
                                          errors={Array []}
                                          label="Slug"
                                          name={
                                            Array [
                                              "slug",
                                            ]
                                          }
                                          onDomErrorVisibleChange={[Function]}
                                          prefixCls="ant-form"
                                          rules={
                                            Array [
                                              Object {
                                                "message": "Please input the slug!",
                                                "required": true,
                                              },
                                              Object {
                                                "message": "Please enter valid slug!",
                                                "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                                              },
                                            ]
                                          }
                                          status=""
                                          touched={false}
                                          validateStatus=""
                                          validating={false}
                                        >
                                          <Col
                                            className="ant-form-item-control"
                                          >
                                            <div
                                              className="ant-col ant-form-item-control"
                                              style={Object {}}
                                            >
                                              <div
                                                className="ant-form-item-control-input"
                                              >
                                                <div
                                                  className="ant-form-item-control-input-content"
                                                >
                                                  <Component
                                                    update={1}
                                                    value="slug"
                                                  >
                                                    <Input
                                                      id="create-format_slug"
                                                      onChange={[Function]}
                                                      type="text"
                                                      value="slug"
                                                    >
                                                      <ClearableLabeledInput
                                                        bordered={true}
                                                        element={
                                                          <input
                                                            className="ant-input"
                                                            id="create-format_slug"
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onFocus={[Function]}
                                                            onKeyDown={[Function]}
                                                            type="text"
                                                            value="slug"
                                                          />
                                                        }
                                                        focused={false}
                                                        handleReset={[Function]}
                                                        id="create-format_slug"
                                                        inputType="input"
                                                        onChange={[Function]}
                                                        prefixCls="ant-input"
                                                        triggerFocus={[Function]}
                                                        type="text"
                                                        value="slug"
                                                      >
                                                        <input
                                                          className="ant-input"
                                                          id="create-format_slug"
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          onFocus={[Function]}
                                                          onKeyDown={[Function]}
                                                          type="text"
                                                          value="slug"
                                                        />
                                                      </ClearableLabeledInput>
                                                    </Input>
                                                  </Component>
                                                </div>
                                              </div>
                                              <ErrorList
                                                errors={Array []}
                                                onDomErrorVisibleChange={[Function]}
                                              >
                                                <CSSMotion
                                                  motionAppear={true}
                                                  motionDeadline={500}
                                                  motionName="ant-show-help"
                                                  onLeaveEnd={[Function]}
                                                  removeOnLeave={true}
                                                  visible={false}
                                                >
                                                  <DomWrapper />
                                                </CSSMotion>
                                              </ErrorList>
                                            </div>
                                          </Col>
                                        </FormItemInput>
                                      </div>
                                    </Row>
                                  </Field>
                                </WrapperField>
                              </FormItem>
                            </SlugInput>
                            <FormItem
                              label="Featured"
                              name="is_featured"
                              valuePropName="checked"
                            >
                              <WrapperField
                                label="Featured"
                                messageVariables={
                                  Object {
                                    "label": "Featured",
                                  }
                                }
                                name="is_featured"
                                onReset={[Function]}
                                trigger="onChange"
                                validateTrigger="onChange"
                                valuePropName="checked"
                              >
                                <Field
                                  fieldContext={
                                    Object {
                                      "__INTERNAL__": Object {
                                        "itemRef": [Function],
                                        "name": "create-format",
                                      },
                                      "getFieldError": [Function],
                                      "getFieldInstance": [Function],
                                      "getFieldValue": [Function],
                                      "getFieldsError": [Function],
                                      "getFieldsValue": [Function],
                                      "getInternalHooks": [Function],
                                      "isFieldTouched": [Function],
                                      "isFieldValidating": [Function],
                                      "isFieldsTouched": [Function],
                                      "isFieldsValidating": [Function],
                                      "resetFields": [Function],
                                      "scrollToField": [Function],
                                      "setFields": [Function],
                                      "setFieldsValue": [Function],
                                      "submit": [Function],
                                      "validateFields": [Function],
                                      "validateTrigger": "onChange",
                                    }
                                  }
                                  key="_is_featured"
                                  label="Featured"
                                  messageVariables={
                                    Object {
                                      "label": "Featured",
                                    }
                                  }
                                  name={
                                    Array [
                                      "is_featured",
                                    ]
                                  }
                                  onReset={[Function]}
                                  trigger="onChange"
                                  validateTrigger="onChange"
                                  valuePropName="checked"
                                >
                                  <Row
                                    className="ant-form-item"
                                    key="row"
                                  >
                                    <div
                                      className="ant-row ant-form-item"
                                      style={Object {}}
                                    >
                                      <FormItemLabel
                                        htmlFor="create-format_is_featured"
                                        label="Featured"
                                        name="is_featured"
                                        prefixCls="ant-form"
                                        required={false}
                                        requiredMark={true}
                                        valuePropName="checked"
                                      >
                                        <Col
                                          className="ant-form-item-label"
                                        >
                                          <div
                                            className="ant-col ant-form-item-label"
                                            style={Object {}}
                                          >
                                            <label
                                              className=""
                                              htmlFor="create-format_is_featured"
                                              title="Featured"
                                            >
                                              Featured
                                            </label>
                                          </div>
                                        </Col>
                                      </FormItemLabel>
                                      <FormItemInput
                                        errors={Array []}
                                        label="Featured"
                                        name={
                                          Array [
                                            "is_featured",
                                          ]
                                        }
                                        onDomErrorVisibleChange={[Function]}
                                        prefixCls="ant-form"
                                        status=""
                                        touched={false}
                                        validateStatus=""
                                        validating={false}
                                        valuePropName="checked"
                                      >
                                        <Col
                                          className="ant-form-item-control"
                                        >
                                          <div
                                            className="ant-col ant-form-item-control"
                                            style={Object {}}
                                          >
                                            <div
                                              className="ant-form-item-control-input"
                                            >
                                              <div
                                                className="ant-form-item-control-input-content"
                                              >
                                                <Component
                                                  update={1}
                                                >
                                                  <Switch
                                                    id="create-format_is_featured"
                                                    onChange={[Function]}
                                                  >
                                                    <Wave
                                                      insertExtraNode={true}
                                                    >
                                                      <Switch
                                                        className=""
                                                        id="create-format_is_featured"
                                                        loadingIcon={
                                                          <div
                                                            className="ant-switch-handle"
                                                          />
                                                        }
                                                        onChange={[Function]}
                                                        prefixCls="ant-switch"
                                                      >
                                                        <button
                                                          aria-checked={false}
                                                          className="ant-switch"
                                                          id="create-format_is_featured"
                                                          onClick={[Function]}
                                                          onKeyDown={[Function]}
                                                          role="switch"
                                                          type="button"
                                                        >
                                                          <div
                                                            className="ant-switch-handle"
                                                          />
                                                          <span
                                                            className="ant-switch-inner"
                                                          />
                                                        </button>
                                                      </Switch>
                                                    </Wave>
                                                  </Switch>
                                                </Component>
                                              </div>
                                            </div>
                                            <ErrorList
                                              errors={Array []}
                                              onDomErrorVisibleChange={[Function]}
                                            >
                                              <CSSMotion
                                                motionAppear={true}
                                                motionDeadline={500}
                                                motionName="ant-show-help"
                                                onLeaveEnd={[Function]}
                                                removeOnLeave={true}
                                                visible={false}
                                              >
                                                <DomWrapper />
                                              </CSSMotion>
                                            </ErrorList>
                                          </div>
                                        </Col>
                                      </FormItemInput>
                                    </div>
                                  </Row>
                                </Field>
                              </WrapperField>
                            </FormItem>
                          </div>
                        </Col>
                        <Col
                          span={10}
                        >
                          <div
                            className="ant-col ant-col-10"
                            style={
                              Object {
                                "paddingLeft": 20,
                                "paddingRight": 20,
                              }
                            }
                          >
                            <FormItem
                              label="Featured Image"
                              name="medium_id"
                            >
                              <WrapperField
                                label="Featured Image"
                                messageVariables={
                                  Object {
                                    "label": "Featured Image",
                                  }
                                }
                                name="medium_id"
                                onReset={[Function]}
                                trigger="onChange"
                                validateTrigger="onChange"
                              >
                                <Field
                                  fieldContext={
                                    Object {
                                      "__INTERNAL__": Object {
                                        "itemRef": [Function],
                                        "name": "create-format",
                                      },
                                      "getFieldError": [Function],
                                      "getFieldInstance": [Function],
                                      "getFieldValue": [Function],
                                      "getFieldsError": [Function],
                                      "getFieldsValue": [Function],
                                      "getInternalHooks": [Function],
                                      "isFieldTouched": [Function],
                                      "isFieldValidating": [Function],
                                      "isFieldsTouched": [Function],
                                      "isFieldsValidating": [Function],
                                      "resetFields": [Function],
                                      "scrollToField": [Function],
                                      "setFields": [Function],
                                      "setFieldsValue": [Function],
                                      "submit": [Function],
                                      "validateFields": [Function],
                                      "validateTrigger": "onChange",
                                    }
                                  }
                                  key="_medium_id"
                                  label="Featured Image"
                                  messageVariables={
                                    Object {
                                      "label": "Featured Image",
                                    }
                                  }
                                  name={
                                    Array [
                                      "medium_id",
                                    ]
                                  }
                                  onReset={[Function]}
                                  trigger="onChange"
                                  validateTrigger="onChange"
                                  valuePropName="value"
                                >
                                  <Row
                                    className="ant-form-item"
                                    key="row"
                                  >
                                    <div
                                      className="ant-row ant-form-item"
                                      style={Object {}}
                                    >
                                      <FormItemLabel
                                        htmlFor="create-format_medium_id"
                                        label="Featured Image"
                                        name="medium_id"
                                        prefixCls="ant-form"
                                        required={false}
                                        requiredMark={true}
                                      >
                                        <Col
                                          className="ant-form-item-label"
                                        >
                                          <div
                                            className="ant-col ant-form-item-label"
                                            style={Object {}}
                                          >
                                            <label
                                              className=""
                                              htmlFor="create-format_medium_id"
                                              title="Featured Image"
                                            >
                                              Featured Image
                                            </label>
                                          </div>
                                        </Col>
                                      </FormItemLabel>
                                      <FormItemInput
                                        errors={Array []}
                                        label="Featured Image"
                                        name={
                                          Array [
                                            "medium_id",
                                          ]
                                        }
                                        onDomErrorVisibleChange={[Function]}
                                        prefixCls="ant-form"
                                        status=""
                                        touched={false}
                                        validateStatus=""
                                        validating={false}
                                      >
                                        <Col
                                          className="ant-form-item-control"
                                        >
                                          <div
                                            className="ant-col ant-form-item-control"
                                            style={Object {}}
                                          >
                                            <div
                                              className="ant-form-item-control-input"
                                            >
                                              <div
                                                className="ant-form-item-control-input-content"
                                              >
                                                <Component
                                                  update={1}
                                                >
                                                  <MediaSelector
                                                    containerStyles={
                                                      Object {
                                                        "justifyContent": "start",
                                                      }
                                                    }
                                                    id="create-format_medium_id"
                                                    maxWidth="350px"
                                                    onChange={[Function]}
                                                  >
                                                    <Modal
                                                      closable={false}
                                                      confirmLoading={false}
                                                      footer={
                                                        Array [
                                                          <ForwardRef(InternalButton)
                                                            onClick={[Function]}
                                                          >
                                                            Cancel
                                                          </ForwardRef(InternalButton)>,
                                                          <ForwardRef(InternalButton)
                                                            onClick={[Function]}
                                                            type="primary"
                                                          >
                                                            Ok
                                                          </ForwardRef(InternalButton)>,
                                                        ]
                                                      }
                                                      okType="primary"
                                                      onCancel={[Function]}
                                                      visible={false}
                                                      width="800px"
                                                    >
                                                      <Dialog
                                                        closable={false}
                                                        closeIcon={
                                                          <span
                                                            className="ant-modal-close-x"
                                                          >
                                                            <ForwardRef(CloseOutlined)
                                                              className="ant-modal-close-icon"
                                                            />
                                                          </span>
                                                        }
                                                        confirmLoading={false}
                                                        focusTriggerAfterClose={true}
                                                        footer={
                                                          Array [
                                                            <ForwardRef(InternalButton)
                                                              onClick={[Function]}
                                                            >
                                                              Cancel
                                                            </ForwardRef(InternalButton)>,
                                                            <ForwardRef(InternalButton)
                                                              onClick={[Function]}
                                                              type="primary"
                                                            >
                                                              Ok
                                                            </ForwardRef(InternalButton)>,
                                                          ]
                                                        }
                                                        maskTransitionName="ant-fade"
                                                        okType="primary"
                                                        onCancel={[Function]}
                                                        onClose={[Function]}
                                                        prefixCls="ant-modal"
                                                        transitionName="ant-zoom"
                                                        visible={false}
                                                        width="800px"
                                                        wrapClassName=""
                                                      >
                                                        <PortalWrapper
                                                          visible={false}
                                                        />
                                                      </Dialog>
                                                    </Modal>
                                                    <Space
                                                      direction="vertical"
                                                    >
                                                      <div
                                                        className="ant-space ant-space-vertical"
                                                        style={Object {}}
                                                      >
                                                        <Item
                                                          className="ant-space-item"
                                                          direction="vertical"
                                                          index={0}
                                                          key="ant-space-item-0"
                                                          marginDirection="marginRight"
                                                          wrap={false}
                                                        >
                                                          <div
                                                            className="ant-space-item"
                                                            style={Object {}}
                                                          >
                                                            <div
                                                              style={
                                                                Object {
                                                                  "alignItems": "center",
                                                                  "display": "flex",
                                                                  "justifyContent": "start",
                                                                }
                                                              }
                                                            >
                                                              <div
                                                                style={
                                                                  Object {
                                                                    "position": "relative",
                                                                  }
                                                                }
                                                              >
                                                                <Button
                                                                  onClick={[Function]}
                                                                  style={
                                                                    Object {
                                                                      "background": "transparent",
                                                                      "borderStyle": "dashed",
                                                                      "display": "block",
                                                                      "height": "auto",
                                                                    }
                                                                  }
                                                                >
                                                                  <Wave>
                                                                    <button
                                                                      className="ant-btn"
                                                                      onClick={[Function]}
                                                                      style={
                                                                        Object {
                                                                          "background": "transparent",
                                                                          "borderStyle": "dashed",
                                                                          "display": "block",
                                                                          "height": "auto",
                                                                        }
                                                                      }
                                                                      type="button"
                                                                    >
                                                                      <LoadingIcon
                                                                        existIcon={false}
                                                                        loading={false}
                                                                        prefixCls="ant-btn"
                                                                      >
                                                                        <CSSMotion
                                                                          motionName="ant-btn-loading-icon-motion"
                                                                          onAppearActive={[Function]}
                                                                          onAppearStart={[Function]}
                                                                          onEnterActive={[Function]}
                                                                          onEnterStart={[Function]}
                                                                          onLeaveActive={[Function]}
                                                                          onLeaveStart={[Function]}
                                                                          removeOnLeave={true}
                                                                          visible={false}
                                                                        >
                                                                          <DomWrapper />
                                                                        </CSSMotion>
                                                                      </LoadingIcon>
                                                                      <img
                                                                        key=".0"
                                                                        width="100%"
                                                                      />
                                                                    </button>
                                                                  </Wave>
                                                                </Button>
                                                                <Button
                                                                  onClick={[Function]}
                                                                  style={
                                                                    Object {
                                                                      "bottom": 0,
                                                                      "left": 0,
                                                                      "maxWidth": "52px",
                                                                      "position": "absolute",
                                                                    }
                                                                  }
                                                                >
                                                                  <Wave>
                                                                    <button
                                                                      className="ant-btn"
                                                                      onClick={[Function]}
                                                                      style={
                                                                        Object {
                                                                          "bottom": 0,
                                                                          "left": 0,
                                                                          "maxWidth": "52px",
                                                                          "position": "absolute",
                                                                        }
                                                                      }
                                                                      type="button"
                                                                    >
                                                                      <LoadingIcon
                                                                        existIcon={false}
                                                                        loading={false}
                                                                        prefixCls="ant-btn"
                                                                      >
                                                                        <CSSMotion
                                                                          motionName="ant-btn-loading-icon-motion"
                                                                          onAppearActive={[Function]}
                                                                          onAppearStart={[Function]}
                                                                          onEnterActive={[Function]}
                                                                          onEnterStart={[Function]}
                                                                          onLeaveActive={[Function]}
                                                                          onLeaveStart={[Function]}
                                                                          removeOnLeave={true}
                                                                          visible={false}
                                                                        >
                                                                          <DomWrapper />
                                                                        </CSSMotion>
                                                                      </LoadingIcon>
                                                                      <ForwardRef(DeleteOutlined)
                                                                        key=".0"
                                                                      >
                                                                        <AntdIcon
                                                                          icon={
                                                                            Object {
                                                                              "icon": Object {
                                                                                "attrs": Object {
                                                                                  "focusable": "false",
                                                                                  "viewBox": "64 64 896 896",
                                                                                },
                                                                                "children": Array [
                                                                                  Object {
                                                                                    "attrs": Object {
                                                                                      "d": "M360 184h-8c4.4 0 8-3.6 8-8v8h304v-8c0 4.4 3.6 8 8 8h-8v72h72v-80c0-35.3-28.7-64-64-64H352c-35.3 0-64 28.7-64 64v80h72v-72zm504 72H160c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h60.4l24.7 523c1.6 34.1 29.8 61 63.9 61h454c34.2 0 62.3-26.8 63.9-61l24.7-523H888c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zM731.3 840H292.7l-24.2-512h487l-24.2 512z",
                                                                                    },
                                                                                    "tag": "path",
                                                                                  },
                                                                                ],
                                                                                "tag": "svg",
                                                                              },
                                                                              "name": "delete",
                                                                              "theme": "outlined",
                                                                            }
                                                                          }
                                                                        >
                                                                          <span
                                                                            aria-label="delete"
                                                                            className="anticon anticon-delete"
                                                                            role="img"
                                                                          >
                                                                            <IconReact
                                                                              icon={
                                                                                Object {
                                                                                  "icon": Object {
                                                                                    "attrs": Object {
                                                                                      "focusable": "false",
                                                                                      "viewBox": "64 64 896 896",
                                                                                    },
                                                                                    "children": Array [
                                                                                      Object {
                                                                                        "attrs": Object {
                                                                                          "d": "M360 184h-8c4.4 0 8-3.6 8-8v8h304v-8c0 4.4 3.6 8 8 8h-8v72h72v-80c0-35.3-28.7-64-64-64H352c-35.3 0-64 28.7-64 64v80h72v-72zm504 72H160c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h60.4l24.7 523c1.6 34.1 29.8 61 63.9 61h454c34.2 0 62.3-26.8 63.9-61l24.7-523H888c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zM731.3 840H292.7l-24.2-512h487l-24.2 512z",
                                                                                        },
                                                                                        "tag": "path",
                                                                                      },
                                                                                    ],
                                                                                    "tag": "svg",
                                                                                  },
                                                                                  "name": "delete",
                                                                                  "theme": "outlined",
                                                                                }
                                                                              }
                                                                            >
                                                                              <svg
                                                                                aria-hidden="true"
                                                                                data-icon="delete"
                                                                                fill="currentColor"
                                                                                focusable="false"
                                                                                height="1em"
                                                                                key="svg-delete"
                                                                                viewBox="64 64 896 896"
                                                                                width="1em"
                                                                              >
                                                                                <path
                                                                                  d="M360 184h-8c4.4 0 8-3.6 8-8v8h304v-8c0 4.4 3.6 8 8 8h-8v72h72v-80c0-35.3-28.7-64-64-64H352c-35.3 0-64 28.7-64 64v80h72v-72zm504 72H160c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h60.4l24.7 523c1.6 34.1 29.8 61 63.9 61h454c34.2 0 62.3-26.8 63.9-61l24.7-523H888c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zM731.3 840H292.7l-24.2-512h487l-24.2 512z"
                                                                                  key="svg-delete-svg-0"
                                                                                />
                                                                              </svg>
                                                                            </IconReact>
                                                                          </span>
                                                                        </AntdIcon>
                                                                      </ForwardRef(DeleteOutlined)>
                                                                    </button>
                                                                  </Wave>
                                                                </Button>
                                                              </div>
                                                            </div>
                                                          </div>
                                                        </Item>
                                                      </div>
                                                    </Space>
                                                  </MediaSelector>
                                                </Component>
                                              </div>
                                            </div>
                                            <ErrorList
                                              errors={Array []}
                                              onDomErrorVisibleChange={[Function]}
                                            >
                                              <CSSMotion
                                                motionAppear={true}
                                                motionDeadline={500}
                                                motionName="ant-show-help"
                                                onLeaveEnd={[Function]}
                                                removeOnLeave={true}
                                                visible={false}
                                              >
                                                <DomWrapper />
                                              </CSSMotion>
                                            </ErrorList>
                                          </div>
                                        </Col>
                                      </FormItemInput>
                                    </div>
                                  </Row>
                                </Field>
                              </WrapperField>
                            </FormItem>
                          </div>
                        </Col>
                        <Col
                          span={12}
                          style={
                            Object {
                              "marginLeft": "20px",
                              "marginRight": "auto",
                            }
                          }
                        >
                          <div
                            className="ant-col ant-col-12"
                            style={
                              Object {
                                "marginLeft": "20px",
                                "marginRight": "auto",
                                "paddingLeft": 20,
                                "paddingRight": 20,
                              }
                            }
                          >
                            <FormItem
                              label="Description"
                              name="description"
                            >
                              <WrapperField
                                label="Description"
                                messageVariables={
                                  Object {
                                    "label": "Description",
                                  }
                                }
                                name="description"
                                onReset={[Function]}
                                trigger="onChange"
                                validateTrigger="onChange"
                              >
                                <Field
                                  fieldContext={
                                    Object {
                                      "__INTERNAL__": Object {
                                        "itemRef": [Function],
                                        "name": "create-format",
                                      },
                                      "getFieldError": [Function],
                                      "getFieldInstance": [Function],
                                      "getFieldValue": [Function],
                                      "getFieldsError": [Function],
                                      "getFieldsValue": [Function],
                                      "getInternalHooks": [Function],
                                      "isFieldTouched": [Function],
                                      "isFieldValidating": [Function],
                                      "isFieldsTouched": [Function],
                                      "isFieldsValidating": [Function],
                                      "resetFields": [Function],
                                      "scrollToField": [Function],
                                      "setFields": [Function],
                                      "setFieldsValue": [Function],
                                      "submit": [Function],
                                      "validateFields": [Function],
                                      "validateTrigger": "onChange",
                                    }
                                  }
                                  key="_description"
                                  label="Description"
                                  messageVariables={
                                    Object {
                                      "label": "Description",
                                    }
                                  }
                                  name={
                                    Array [
                                      "description",
                                    ]
                                  }
                                  onReset={[Function]}
                                  trigger="onChange"
                                  validateTrigger="onChange"
                                  valuePropName="value"
                                >
                                  <Row
                                    className="ant-form-item"
                                    key="row"
                                  >
                                    <div
                                      className="ant-row ant-form-item"
                                      style={Object {}}
                                    >
                                      <FormItemLabel
                                        htmlFor="create-format_description"
                                        label="Description"
                                        name="description"
                                        prefixCls="ant-form"
                                        required={false}
                                        requiredMark={true}
                                      >
                                        <Col
                                          className="ant-form-item-label"
                                        >
                                          <div
                                            className="ant-col ant-form-item-label"
                                            style={Object {}}
                                          >
                                            <label
                                              className=""
                                              htmlFor="create-format_description"
                                              title="Description"
                                            >
                                              Description
                                            </label>
                                          </div>
                                        </Col>
                                      </FormItemLabel>
                                      <FormItemInput
                                        errors={Array []}
                                        label="Description"
                                        name={
                                          Array [
                                            "description",
                                          ]
                                        }
                                        onDomErrorVisibleChange={[Function]}
                                        prefixCls="ant-form"
                                        status=""
                                        touched={false}
                                        validateStatus=""
                                        validating={false}
                                      >
                                        <Col
                                          className="ant-form-item-control"
                                        >
                                          <div
                                            className="ant-col ant-form-item-control"
                                            style={Object {}}
                                          >
                                            <div
                                              className="ant-form-item-control-input"
                                            >
                                              <div
                                                className="ant-form-item-control-input-content"
                                              >
                                                <Component
                                                  update={1}
                                                  value="description"
                                                >
                                                  <ForwardRef
                                                    id="create-format_description"
                                                    onChange={[Function]}
                                                    value="description"
                                                  >
                                                    <ClearableLabeledInput
                                                      bordered={true}
                                                      element={
                                                        <TextArea
                                                          className=""
                                                          id="create-format_description"
                                                          onChange={[Function]}
                                                          onCompositionEnd={[Function]}
                                                          onCompositionStart={[Function]}
                                                          prefixCls="ant-input"
                                                          value="description"
                                                        />
                                                      }
                                                      handleReset={[Function]}
                                                      id="create-format_description"
                                                      inputType="text"
                                                      prefixCls="ant-input"
                                                      value="description"
                                                    >
                                                      <TextArea
                                                        className=""
                                                        id="create-format_description"
                                                        onChange={[Function]}
                                                        onCompositionEnd={[Function]}
                                                        onCompositionStart={[Function]}
                                                        prefixCls="ant-input"
                                                        value="description"
                                                      >
                                                        <ResizableTextArea
                                                          className=""
                                                          id="create-format_description"
                                                          onChange={[Function]}
                                                          onCompositionEnd={[Function]}
                                                          onCompositionStart={[Function]}
                                                          onKeyDown={[Function]}
                                                          prefixCls="ant-input"
                                                          value="description"
                                                        >
                                                          <ResizeObserver
                                                            disabled={true}
                                                            onResize={[Function]}
                                                          >
                                                            <textarea
                                                              className="ant-input"
                                                              id="create-format_description"
                                                              onChange={[Function]}
                                                              onCompositionEnd={[Function]}
                                                              onCompositionStart={[Function]}
                                                              onKeyDown={[Function]}
                                                              style={Object {}}
                                                              value="description"
                                                            />
                                                          </ResizeObserver>
                                                        </ResizableTextArea>
                                                      </TextArea>
                                                    </ClearableLabeledInput>
                                                  </ForwardRef>
                                                </Component>
                                              </div>
                                            </div>
                                            <ErrorList
                                              errors={Array []}
                                              onDomErrorVisibleChange={[Function]}
                                            >
                                              <CSSMotion
                                                motionAppear={true}
                                                motionDeadline={500}
                                                motionName="ant-show-help"
                                                onLeaveEnd={[Function]}
                                                removeOnLeave={true}
                                                visible={false}
                                              >
                                                <DomWrapper />
                                              </CSSMotion>
                                            </ErrorList>
                                          </div>
                                        </Col>
                                      </FormItemInput>
                                    </div>
                                  </Row>
                                </Field>
                              </WrapperField>
                            </FormItem>
                          </div>
                        </Col>
                      </div>
                    </Row>
                  </div>
                </Col>
                <Col
                  span={24}
                >
                  <div
                    className="ant-col ant-col-24"
                    style={Object {}}
                  >
                    <Row
                      gutter={40}
                      style={
                        Object {
                          "background": "#f0f2f5",
                        }
                      }
                    >
                      <div
                        className="ant-row"
                        style={
                          Object {
                            "background": "#f0f2f5",
                            "marginLeft": -20,
                            "marginRight": -20,
                          }
                        }
                      >
                        <MetaForm>
                          <Collapse
                            expandIcon={[Function]}
                            expandIconPosition="right"
                            style={
                              Object {
                                "width": "100%",
                              }
                            }
                          >
                            <Collapse
                              accordion={false}
                              bordered={true}
                              className="ant-collapse-icon-position-right"
                              destroyInactivePanel={false}
                              expandIcon={[Function]}
                              expandIconPosition="right"
                              onChange={[Function]}
                              openMotion={
                                Object {
                                  "leavedClassName": "ant-collapse-content-hidden",
                                  "motionAppear": false,
                                  "motionDeadline": 500,
                                  "motionName": "ant-motion-collapse",
                                  "onAppearActive": [Function],
                                  "onAppearEnd": [Function],
                                  "onAppearStart": [Function],
                                  "onEnterActive": [Function],
                                  "onEnterEnd": [Function],
                                  "onEnterStart": [Function],
                                  "onLeaveActive": [Function],
                                  "onLeaveEnd": [Function],
                                  "onLeaveStart": [Function],
                                }
                              }
                              prefixCls="ant-collapse"
                              style={
                                Object {
                                  "width": "100%",
                                }
                              }
                            >
                              <div
                                className="ant-collapse ant-collapse-icon-position-right"
                                role={null}
                                style={
                                  Object {
                                    "width": "100%",
                                  }
                                }
                              >
                                <CollapsePanel
                                  accordion={false}
                                  destroyInactivePanel={false}
                                  expandIcon={[Function]}
                                  header="Meta Data"
                                  isActive={false}
                                  key="0"
                                  onItemClick={[Function]}
                                  openMotion={
                                    Object {
                                      "leavedClassName": "ant-collapse-content-hidden",
                                      "motionAppear": false,
                                      "motionDeadline": 500,
                                      "motionName": "ant-motion-collapse",
                                      "onAppearActive": [Function],
                                      "onAppearEnd": [Function],
                                      "onAppearStart": [Function],
                                      "onEnterActive": [Function],
                                      "onEnterEnd": [Function],
                                      "onEnterStart": [Function],
                                      "onLeaveActive": [Function],
                                      "onLeaveEnd": [Function],
                                      "onLeaveStart": [Function],
                                    }
                                  }
                                  panelKey="0"
                                  prefixCls="ant-collapse"
                                >
                                  <CollapsePanel
                                    accordion={false}
                                    className=""
                                    destroyInactivePanel={false}
                                    expandIcon={[Function]}
                                    forceRender={false}
                                    header="Meta Data"
                                    headerClass=""
                                    isActive={false}
                                    onItemClick={[Function]}
                                    openMotion={
                                      Object {
                                        "leavedClassName": "ant-collapse-content-hidden",
                                        "motionAppear": false,
                                        "motionDeadline": 500,
                                        "motionName": "ant-motion-collapse",
                                        "onAppearActive": [Function],
                                        "onAppearEnd": [Function],
                                        "onAppearStart": [Function],
                                        "onEnterActive": [Function],
                                        "onEnterEnd": [Function],
                                        "onEnterStart": [Function],
                                        "onLeaveActive": [Function],
                                        "onLeaveEnd": [Function],
                                        "onLeaveStart": [Function],
                                      }
                                    }
                                    panelKey="0"
                                    prefixCls="ant-collapse"
                                    showArrow={true}
                                  >
                                    <div
                                      className="ant-collapse-item"
                                    >
                                      <div
                                        aria-expanded={false}
                                        className="ant-collapse-header"
                                        onClick={[Function]}
                                        onKeyPress={[Function]}
                                        role="button"
                                        tabIndex={0}
                                      >
                                        <Button
                                          className="ant-collapse-arrow"
                                        >
                                          <Wave>
                                            <button
                                              className="ant-btn ant-collapse-arrow"
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <LoadingIcon
                                                existIcon={false}
                                                loading={false}
                                                prefixCls="ant-btn"
                                              >
                                                <CSSMotion
                                                  motionName="ant-btn-loading-icon-motion"
                                                  onAppearActive={[Function]}
                                                  onAppearStart={[Function]}
                                                  onEnterActive={[Function]}
                                                  onEnterStart={[Function]}
                                                  onLeaveActive={[Function]}
                                                  onLeaveStart={[Function]}
                                                  removeOnLeave={true}
                                                  visible={false}
                                                >
                                                  <DomWrapper />
                                                </CSSMotion>
                                              </LoadingIcon>
                                              <span
                                                key=".0"
                                              >
                                                Expand
                                              </span>
                                            </button>
                                          </Wave>
                                        </Button>
                                        Meta Data
                                      </div>
                                      <CSSMotion
                                        forceRender={false}
                                        leavedClassName="ant-collapse-content-hidden"
                                        motionAppear={false}
                                        motionDeadline={500}
                                        motionName="ant-motion-collapse"
                                        onAppearActive={[Function]}
                                        onAppearEnd={[Function]}
                                        onAppearStart={[Function]}
                                        onEnterActive={[Function]}
                                        onEnterEnd={[Function]}
                                        onEnterStart={[Function]}
                                        onLeaveActive={[Function]}
                                        onLeaveEnd={[Function]}
                                        onLeaveStart={[Function]}
                                        removeOnLeave={false}
                                        visible={false}
                                      >
                                        <DomWrapper />
                                      </CSSMotion>
                                    </div>
                                  </CollapsePanel>
                                </CollapsePanel>
                                <CollapsePanel
                                  accordion={false}
                                  destroyInactivePanel={false}
                                  expandIcon={[Function]}
                                  header="Code Injection"
                                  isActive={false}
                                  key="1"
                                  onItemClick={[Function]}
                                  openMotion={
                                    Object {
                                      "leavedClassName": "ant-collapse-content-hidden",
                                      "motionAppear": false,
                                      "motionDeadline": 500,
                                      "motionName": "ant-motion-collapse",
                                      "onAppearActive": [Function],
                                      "onAppearEnd": [Function],
                                      "onAppearStart": [Function],
                                      "onEnterActive": [Function],
                                      "onEnterEnd": [Function],
                                      "onEnterStart": [Function],
                                      "onLeaveActive": [Function],
                                      "onLeaveEnd": [Function],
                                      "onLeaveStart": [Function],
                                    }
                                  }
                                  panelKey="1"
                                  prefixCls="ant-collapse"
                                >
                                  <CollapsePanel
                                    accordion={false}
                                    className=""
                                    destroyInactivePanel={false}
                                    expandIcon={[Function]}
                                    forceRender={false}
                                    header="Code Injection"
                                    headerClass=""
                                    isActive={false}
                                    onItemClick={[Function]}
                                    openMotion={
                                      Object {
                                        "leavedClassName": "ant-collapse-content-hidden",
                                        "motionAppear": false,
                                        "motionDeadline": 500,
                                        "motionName": "ant-motion-collapse",
                                        "onAppearActive": [Function],
                                        "onAppearEnd": [Function],
                                        "onAppearStart": [Function],
                                        "onEnterActive": [Function],
                                        "onEnterEnd": [Function],
                                        "onEnterStart": [Function],
                                        "onLeaveActive": [Function],
                                        "onLeaveEnd": [Function],
                                        "onLeaveStart": [Function],
                                      }
                                    }
                                    panelKey="1"
                                    prefixCls="ant-collapse"
                                    showArrow={true}
                                  >
                                    <div
                                      className="ant-collapse-item"
                                    >
                                      <div
                                        aria-expanded={false}
                                        className="ant-collapse-header"
                                        onClick={[Function]}
                                        onKeyPress={[Function]}
                                        role="button"
                                        tabIndex={0}
                                      >
                                        <Button
                                          className="ant-collapse-arrow"
                                        >
                                          <Wave>
                                            <button
                                              className="ant-btn ant-collapse-arrow"
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <LoadingIcon
                                                existIcon={false}
                                                loading={false}
                                                prefixCls="ant-btn"
                                              >
                                                <CSSMotion
                                                  motionName="ant-btn-loading-icon-motion"
                                                  onAppearActive={[Function]}
                                                  onAppearStart={[Function]}
                                                  onEnterActive={[Function]}
                                                  onEnterStart={[Function]}
                                                  onLeaveActive={[Function]}
                                                  onLeaveStart={[Function]}
                                                  removeOnLeave={true}
                                                  visible={false}
                                                >
                                                  <DomWrapper />
                                                </CSSMotion>
                                              </LoadingIcon>
                                              <span
                                                key=".0"
                                              >
                                                Expand
                                              </span>
                                            </button>
                                          </Wave>
                                        </Button>
                                        Code Injection
                                      </div>
                                      <CSSMotion
                                        forceRender={false}
                                        leavedClassName="ant-collapse-content-hidden"
                                        motionAppear={false}
                                        motionDeadline={500}
                                        motionName="ant-motion-collapse"
                                        onAppearActive={[Function]}
                                        onAppearEnd={[Function]}
                                        onAppearStart={[Function]}
                                        onEnterActive={[Function]}
                                        onEnterEnd={[Function]}
                                        onEnterStart={[Function]}
                                        onLeaveActive={[Function]}
                                        onLeaveEnd={[Function]}
                                        onLeaveStart={[Function]}
                                        removeOnLeave={false}
                                        visible={false}
                                      >
                                        <DomWrapper />
                                      </CSSMotion>
                                    </div>
                                  </CollapsePanel>
                                </CollapsePanel>
                              </div>
                            </Collapse>
                          </Collapse>
                          <Collapse
                            expandIcon={[Function]}
                            expandIconPosition="right"
                            style={
                              Object {
                                "width": "100%",
                              }
                            }
                          >
                            <Collapse
                              accordion={false}
                              bordered={true}
                              className="ant-collapse-icon-position-right"
                              destroyInactivePanel={false}
                              expandIcon={[Function]}
                              expandIconPosition="right"
                              onChange={[Function]}
                              openMotion={
                                Object {
                                  "leavedClassName": "ant-collapse-content-hidden",
                                  "motionAppear": false,
                                  "motionDeadline": 500,
                                  "motionName": "ant-motion-collapse",
                                  "onAppearActive": [Function],
                                  "onAppearEnd": [Function],
                                  "onAppearStart": [Function],
                                  "onEnterActive": [Function],
                                  "onEnterEnd": [Function],
                                  "onEnterStart": [Function],
                                  "onLeaveActive": [Function],
                                  "onLeaveEnd": [Function],
                                  "onLeaveStart": [Function],
                                }
                              }
                              prefixCls="ant-collapse"
                              style={
                                Object {
                                  "width": "100%",
                                }
                              }
                            >
                              <div
                                className="ant-collapse ant-collapse-icon-position-right"
                                role={null}
                                style={
                                  Object {
                                    "width": "100%",
                                  }
                                }
                              >
                                <CollapsePanel
                                  accordion={false}
                                  destroyInactivePanel={false}
                                  expandIcon={[Function]}
                                  header="Meta Fields"
                                  isActive={false}
                                  key="0"
                                  onItemClick={[Function]}
                                  openMotion={
                                    Object {
                                      "leavedClassName": "ant-collapse-content-hidden",
                                      "motionAppear": false,
                                      "motionDeadline": 500,
                                      "motionName": "ant-motion-collapse",
                                      "onAppearActive": [Function],
                                      "onAppearEnd": [Function],
                                      "onAppearStart": [Function],
                                      "onEnterActive": [Function],
                                      "onEnterEnd": [Function],
                                      "onEnterStart": [Function],
                                      "onLeaveActive": [Function],
                                      "onLeaveEnd": [Function],
                                      "onLeaveStart": [Function],
                                    }
                                  }
                                  panelKey="0"
                                  prefixCls="ant-collapse"
                                >
                                  <CollapsePanel
                                    accordion={false}
                                    className=""
                                    destroyInactivePanel={false}
                                    expandIcon={[Function]}
                                    forceRender={false}
                                    header="Meta Fields"
                                    headerClass=""
                                    isActive={false}
                                    onItemClick={[Function]}
                                    openMotion={
                                      Object {
                                        "leavedClassName": "ant-collapse-content-hidden",
                                        "motionAppear": false,
                                        "motionDeadline": 500,
                                        "motionName": "ant-motion-collapse",
                                        "onAppearActive": [Function],
                                        "onAppearEnd": [Function],
                                        "onAppearStart": [Function],
                                        "onEnterActive": [Function],
                                        "onEnterEnd": [Function],
                                        "onEnterStart": [Function],
                                        "onLeaveActive": [Function],
                                        "onLeaveEnd": [Function],
                                        "onLeaveStart": [Function],
                                      }
                                    }
                                    panelKey="0"
                                    prefixCls="ant-collapse"
                                    showArrow={true}
                                  >
                                    <div
                                      className="ant-collapse-item"
                                    >
                                      <div
                                        aria-expanded={false}
                                        className="ant-collapse-header"
                                        onClick={[Function]}
                                        onKeyPress={[Function]}
                                        role="button"
                                        tabIndex={0}
                                      >
                                        <Button
                                          className="ant-collapse-arrow"
                                        >
                                          <Wave>
                                            <button
                                              className="ant-btn ant-collapse-arrow"
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <LoadingIcon
                                                existIcon={false}
                                                loading={false}
                                                prefixCls="ant-btn"
                                              >
                                                <CSSMotion
                                                  motionName="ant-btn-loading-icon-motion"
                                                  onAppearActive={[Function]}
                                                  onAppearStart={[Function]}
                                                  onEnterActive={[Function]}
                                                  onEnterStart={[Function]}
                                                  onLeaveActive={[Function]}
                                                  onLeaveStart={[Function]}
                                                  removeOnLeave={true}
                                                  visible={false}
                                                >
                                                  <DomWrapper />
                                                </CSSMotion>
                                              </LoadingIcon>
                                              <span
                                                key=".0"
                                              >
                                                Expand
                                              </span>
                                            </button>
                                          </Wave>
                                        </Button>
                                        Meta Fields
                                      </div>
                                      <CSSMotion
                                        forceRender={false}
                                        leavedClassName="ant-collapse-content-hidden"
                                        motionAppear={false}
                                        motionDeadline={500}
                                        motionName="ant-motion-collapse"
                                        onAppearActive={[Function]}
                                        onAppearEnd={[Function]}
                                        onAppearStart={[Function]}
                                        onEnterActive={[Function]}
                                        onEnterEnd={[Function]}
                                        onEnterStart={[Function]}
                                        onLeaveActive={[Function]}
                                        onLeaveEnd={[Function]}
                                        onLeaveStart={[Function]}
                                        removeOnLeave={false}
                                        visible={false}
                                      >
                                        <DomWrapper />
                                      </CSSMotion>
                                    </div>
                                  </CollapsePanel>
                                </CollapsePanel>
                              </div>
                            </Collapse>
                          </Collapse>
                        </MetaForm>
                      </div>
                    </Row>
                  </div>
                </Col>
              </div>
            </Row>
          </form>
        </ForwardRef(Form)>
      </SizeContextProvider>
    </ForwardRef(InternalForm)>
  </FormatForm>
</Provider>
`;

exports[`Formats Create Form component snapshot testing should match component with empty data 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <FormatForm
    data={Array []}
  >
    <ForwardRef(InternalForm)
      form={
        Object {
          "__INTERNAL__": Object {
            "itemRef": [Function],
            "name": "create-format",
          },
          "getFieldError": [Function],
          "getFieldInstance": [Function],
          "getFieldValue": [Function],
          "getFieldsError": [Function],
          "getFieldsValue": [Function],
          "getInternalHooks": [Function],
          "isFieldTouched": [Function],
          "isFieldValidating": [Function],
          "isFieldsTouched": [Function],
          "isFieldsValidating": [Function],
          "resetFields": [Function],
          "scrollToField": [Function],
          "setFields": [Function],
          "setFieldsValue": [Function],
          "submit": [Function],
          "validateFields": [Function],
        }
      }
      initialValues={Object {}}
      layout="vertical"
      name="create-format"
      onFinish={[Function]}
      onValuesChange={[Function]}
    >
      <SizeContextProvider>
        <ForwardRef(Form)
          className="ant-form ant-form-vertical"
          form={
            Object {
              "__INTERNAL__": Object {
                "itemRef": [Function],
                "name": "create-format",
              },
              "getFieldError": [Function],
              "getFieldInstance": [Function],
              "getFieldValue": [Function],
              "getFieldsError": [Function],
              "getFieldsValue": [Function],
              "getInternalHooks": [Function],
              "isFieldTouched": [Function],
              "isFieldValidating": [Function],
              "isFieldsTouched": [Function],
              "isFieldsValidating": [Function],
              "resetFields": [Function],
              "scrollToField": [Function],
              "setFields": [Function],
              "setFieldsValue": [Function],
              "submit": [Function],
              "validateFields": [Function],
            }
          }
          id="create-format"
          initialValues={Object {}}
          name="create-format"
          onFinish={[Function]}
          onFinishFailed={[Function]}
          onValuesChange={[Function]}
        >
          <form
            className="ant-form ant-form-vertical"
            id="create-format"
            onReset={[Function]}
            onSubmit={[Function]}
          >
            <Row
              justify="center"
              style={
                Object {
                  "margin": "0 auto",
                  "maxWidth": "1200px",
                  "width": "100%",
                }
              }
            >
              <div
                className="ant-row ant-row-center"
                style={
                  Object {
                    "margin": "0 auto",
                    "maxWidth": "1200px",
                    "width": "100%",
                  }
                }
              >
                <Col
                  span={24}
                >
                  <div
                    className="ant-col ant-col-24"
                    style={Object {}}
                  >
                    <Row
                      gutter={40}
                      justify="end"
                    >
                      <div
                        className="ant-row ant-row-end"
                        style={
                          Object {
                            "marginLeft": -20,
                            "marginRight": -20,
                          }
                        }
                      >
                        <FormItem>
                          <Row
                            className="ant-form-item"
                            key="row"
                          >
                            <div
                              className="ant-row ant-form-item"
                              style={Object {}}
                            >
                              <FormItemLabel
                                prefixCls="ant-form"
                                requiredMark={true}
                              />
                              <FormItemInput
                                errors={Array []}
                                onDomErrorVisibleChange={[Function]}
                                prefixCls="ant-form"
                                status=""
                                validateStatus=""
                              >
                                <Col
                                  className="ant-form-item-control"
                                >
                                  <div
                                    className="ant-col ant-form-item-control"
                                    style={Object {}}
                                  >
                                    <div
                                      className="ant-form-item-control-input"
                                    >
                                      <div
                                        className="ant-form-item-control-input-content"
                                      >
                                        <Space>
                                          <div
                                            className="ant-space ant-space-horizontal ant-space-align-center"
                                            style={Object {}}
                                          >
                                            <Item
                                              className="ant-space-item"
                                              direction="horizontal"
                                              index={0}
                                              key="ant-space-item-0"
                                              marginDirection="marginRight"
                                              wrap={false}
                                            >
                                              <div
                                                className="ant-space-item"
                                                style={
                                                  Object {
                                                    "marginRight": 8,
                                                  }
                                                }
                                              >
                                                <Button
                                                  htmlType="button"
                                                  onClick={[Function]}
                                                >
                                                  <Wave>
                                                    <button
                                                      className="ant-btn"
                                                      onClick={[Function]}
                                                      type="button"
                                                    >
                                                      <LoadingIcon
                                                        existIcon={false}
                                                        loading={false}
                                                        prefixCls="ant-btn"
                                                      >
                                                        <CSSMotion
                                                          motionName="ant-btn-loading-icon-motion"
                                                          onAppearActive={[Function]}
                                                          onAppearStart={[Function]}
                                                          onEnterActive={[Function]}
                                                          onEnterStart={[Function]}
                                                          onLeaveActive={[Function]}
                                                          onLeaveStart={[Function]}
                                                          removeOnLeave={true}
                                                          visible={false}
                                                        >
                                                          <DomWrapper />
                                                        </CSSMotion>
                                                      </LoadingIcon>
                                                      <span
                                                        key=".0"
                                                      >
                                                        Reset
                                                      </span>
                                                    </button>
                                                  </Wave>
                                                </Button>
                                              </div>
                                            </Item>
                                            <Item
                                              className="ant-space-item"
                                              direction="horizontal"
                                              index={1}
                                              key="ant-space-item-1"
                                              marginDirection="marginRight"
                                              wrap={false}
                                            >
                                              <div
                                                className="ant-space-item"
                                                style={Object {}}
                                              >
                                                <Button
                                                  disabled={true}
                                                  htmlType="submit"
                                                  type="primary"
                                                >
                                                  <Wave>
                                                    <button
                                                      className="ant-btn ant-btn-primary"
                                                      disabled={true}
                                                      onClick={[Function]}
                                                      type="submit"
                                                    >
                                                      <LoadingIcon
                                                        existIcon={false}
                                                        loading={false}
                                                        prefixCls="ant-btn"
                                                      >
                                                        <CSSMotion
                                                          motionName="ant-btn-loading-icon-motion"
                                                          onAppearActive={[Function]}
                                                          onAppearStart={[Function]}
                                                          onEnterActive={[Function]}
                                                          onEnterStart={[Function]}
                                                          onLeaveActive={[Function]}
                                                          onLeaveStart={[Function]}
                                                          removeOnLeave={true}
                                                          visible={false}
                                                        >
                                                          <DomWrapper />
                                                        </CSSMotion>
                                                      </LoadingIcon>
                                                      <span
                                                        key=".0"
                                                      >
                                                        Submit
                                                      </span>
                                                    </button>
                                                  </Wave>
                                                </Button>
                                              </div>
                                            </Item>
                                          </div>
                                        </Space>
                                      </div>
                                    </div>
                                    <ErrorList
                                      errors={Array []}
                                      onDomErrorVisibleChange={[Function]}
                                    >
                                      <CSSMotion
                                        motionAppear={true}
                                        motionDeadline={500}
                                        motionName="ant-show-help"
                                        onLeaveEnd={[Function]}
                                        removeOnLeave={true}
                                        visible={false}
                                      >
                                        <DomWrapper />
                                      </CSSMotion>
                                    </ErrorList>
                                  </div>
                                </Col>
                              </FormItemInput>
                            </div>
                          </Row>
                        </FormItem>
                      </div>
                    </Row>
                  </div>
                </Col>
                <Col
                  span={24}
                >
                  <div
                    className="ant-col ant-col-24"
                    style={Object {}}
                  >
                    <Row
                      gutter={40}
                      justify="space-around"
                      style={
                        Object {
                          "background": "#f0f2f5",
                          "marginBottom": "1rem",
                          "padding": "1.25rem",
                        }
                      }
                    >
                      <div
                        className="ant-row ant-row-space-around"
                        style={
                          Object {
                            "background": "#f0f2f5",
                            "marginBottom": "1rem",
                            "marginLeft": -20,
                            "marginRight": -20,
                            "padding": "1.25rem",
                          }
                        }
                      >
                        <Col
                          span={12}
                        >
                          <div
                            className="ant-col ant-col-12"
                            style={
                              Object {
                                "paddingLeft": 20,
                                "paddingRight": 20,
                              }
                            }
                          >
                            <FormItem
                              label="Format Name"
                              name="name"
                              rules={
                                Array [
                                  Object {
                                    "message": "Please enter the name!",
                                    "required": true,
                                  },
                                  Object {
                                    "message": "Name must be minimum 3 characters.",
                                    "min": 3,
                                  },
                                  Object {
                                    "max": 50,
                                    "message": "Name must be maximum 50 characters.",
                                  },
                                ]
                              }
                            >
                              <WrapperField
                                label="Format Name"
                                messageVariables={
                                  Object {
                                    "label": "Format Name",
                                  }
                                }
                                name="name"
                                onReset={[Function]}
                                rules={
                                  Array [
                                    Object {
                                      "message": "Please enter the name!",
                                      "required": true,
                                    },
                                    Object {
                                      "message": "Name must be minimum 3 characters.",
                                      "min": 3,
                                    },
                                    Object {
                                      "max": 50,
                                      "message": "Name must be maximum 50 characters.",
                                    },
                                  ]
                                }
                                trigger="onChange"
                                validateTrigger="onChange"
                              >
                                <Field
                                  fieldContext={
                                    Object {
                                      "__INTERNAL__": Object {
                                        "itemRef": [Function],
                                        "name": "create-format",
                                      },
                                      "getFieldError": [Function],
                                      "getFieldInstance": [Function],
                                      "getFieldValue": [Function],
                                      "getFieldsError": [Function],
                                      "getFieldsValue": [Function],
                                      "getInternalHooks": [Function],
                                      "isFieldTouched": [Function],
                                      "isFieldValidating": [Function],
                                      "isFieldsTouched": [Function],
                                      "isFieldsValidating": [Function],
                                      "resetFields": [Function],
                                      "scrollToField": [Function],
                                      "setFields": [Function],
                                      "setFieldsValue": [Function],
                                      "submit": [Function],
                                      "validateFields": [Function],
                                      "validateTrigger": "onChange",
                                    }
                                  }
                                  key="_name"
                                  label="Format Name"
                                  messageVariables={
                                    Object {
                                      "label": "Format Name",
                                    }
                                  }
                                  name={
                                    Array [
                                      "name",
                                    ]
                                  }
                                  onReset={[Function]}
                                  rules={
                                    Array [
                                      Object {
                                        "message": "Please enter the name!",
                                        "required": true,
                                      },
                                      Object {
                                        "message": "Name must be minimum 3 characters.",
                                        "min": 3,
                                      },
                                      Object {
                                        "max": 50,
                                        "message": "Name must be maximum 50 characters.",
                                      },
                                    ]
                                  }
                                  trigger="onChange"
                                  validateTrigger="onChange"
                                  valuePropName="value"
                                >
                                  <Row
                                    className="ant-form-item"
                                    key="row"
                                  >
                                    <div
                                      className="ant-row ant-form-item"
                                      style={Object {}}
                                    >
                                      <FormItemLabel
                                        htmlFor="create-format_name"
                                        label="Format Name"
                                        name="name"
                                        prefixCls="ant-form"
                                        required={true}
                                        requiredMark={true}
                                        rules={
                                          Array [
                                            Object {
                                              "message": "Please enter the name!",
                                              "required": true,
                                            },
                                            Object {
                                              "message": "Name must be minimum 3 characters.",
                                              "min": 3,
                                            },
                                            Object {
                                              "max": 50,
                                              "message": "Name must be maximum 50 characters.",
                                            },
                                          ]
                                        }
                                      >
                                        <Col
                                          className="ant-form-item-label"
                                        >
                                          <div
                                            className="ant-col ant-form-item-label"
                                            style={Object {}}
                                          >
                                            <label
                                              className="ant-form-item-required"
                                              htmlFor="create-format_name"
                                              title="Format Name"
                                            >
                                              Format Name
                                            </label>
                                          </div>
                                        </Col>
                                      </FormItemLabel>
                                      <FormItemInput
                                        errors={Array []}
                                        label="Format Name"
                                        name={
                                          Array [
                                            "name",
                                          ]
                                        }
                                        onDomErrorVisibleChange={[Function]}
                                        prefixCls="ant-form"
                                        rules={
                                          Array [
                                            Object {
                                              "message": "Please enter the name!",
                                              "required": true,
                                            },
                                            Object {
                                              "message": "Name must be minimum 3 characters.",
                                              "min": 3,
                                            },
                                            Object {
                                              "max": 50,
                                              "message": "Name must be maximum 50 characters.",
                                            },
                                          ]
                                        }
                                        status=""
                                        touched={false}
                                        validateStatus=""
                                        validating={false}
                                      >
                                        <Col
                                          className="ant-form-item-control"
                                        >
                                          <div
                                            className="ant-col ant-form-item-control"
                                            style={Object {}}
                                          >
                                            <div
                                              className="ant-form-item-control-input"
                                            >
                                              <div
                                                className="ant-form-item-control-input-content"
                                              >
                                                <Component
                                                  update={1}
                                                >
                                                  <Input
                                                    id="create-format_name"
                                                    onChange={[Function]}
                                                    type="text"
                                                  >
                                                    <ClearableLabeledInput
                                                      bordered={true}
                                                      element={
                                                        <input
                                                          className="ant-input"
                                                          id="create-format_name"
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          onFocus={[Function]}
                                                          onKeyDown={[Function]}
                                                          type="text"
                                                        />
                                                      }
                                                      focused={false}
                                                      handleReset={[Function]}
                                                      id="create-format_name"
                                                      inputType="input"
                                                      onChange={[Function]}
                                                      prefixCls="ant-input"
                                                      triggerFocus={[Function]}
                                                      type="text"
                                                      value=""
                                                    >
                                                      <input
                                                        className="ant-input"
                                                        id="create-format_name"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        type="text"
                                                        value=""
                                                      />
                                                    </ClearableLabeledInput>
                                                  </Input>
                                                </Component>
                                              </div>
                                            </div>
                                            <ErrorList
                                              errors={Array []}
                                              onDomErrorVisibleChange={[Function]}
                                            >
                                              <CSSMotion
                                                motionAppear={true}
                                                motionDeadline={500}
                                                motionName="ant-show-help"
                                                onLeaveEnd={[Function]}
                                                removeOnLeave={true}
                                                visible={false}
                                              >
                                                <DomWrapper />
                                              </CSSMotion>
                                            </ErrorList>
                                          </div>
                                        </Col>
                                      </FormItemInput>
                                    </div>
                                  </Row>
                                </Field>
                              </WrapperField>
                            </FormItem>
                            <SlugInput>
                              <FormItem
                                label="Slug"
                                name="slug"
                                rules={
                                  Array [
                                    Object {
                                      "message": "Please input the slug!",
                                      "required": true,
                                    },
                                    Object {
                                      "message": "Please enter valid slug!",
                                      "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                                    },
                                  ]
                                }
                              >
                                <WrapperField
                                  label="Slug"
                                  messageVariables={
                                    Object {
                                      "label": "Slug",
                                    }
                                  }
                                  name="slug"
                                  onReset={[Function]}
                                  rules={
                                    Array [
                                      Object {
                                        "message": "Please input the slug!",
                                        "required": true,
                                      },
                                      Object {
                                        "message": "Please enter valid slug!",
                                        "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                                      },
                                    ]
                                  }
                                  trigger="onChange"
                                  validateTrigger="onChange"
                                >
                                  <Field
                                    fieldContext={
                                      Object {
                                        "__INTERNAL__": Object {
                                          "itemRef": [Function],
                                          "name": "create-format",
                                        },
                                        "getFieldError": [Function],
                                        "getFieldInstance": [Function],
                                        "getFieldValue": [Function],
                                        "getFieldsError": [Function],
                                        "getFieldsValue": [Function],
                                        "getInternalHooks": [Function],
                                        "isFieldTouched": [Function],
                                        "isFieldValidating": [Function],
                                        "isFieldsTouched": [Function],
                                        "isFieldsValidating": [Function],
                                        "resetFields": [Function],
                                        "scrollToField": [Function],
                                        "setFields": [Function],
                                        "setFieldsValue": [Function],
                                        "submit": [Function],
                                        "validateFields": [Function],
                                        "validateTrigger": "onChange",
                                      }
                                    }
                                    key="_slug"
                                    label="Slug"
                                    messageVariables={
                                      Object {
                                        "label": "Slug",
                                      }
                                    }
                                    name={
                                      Array [
                                        "slug",
                                      ]
                                    }
                                    onReset={[Function]}
                                    rules={
                                      Array [
                                        Object {
                                          "message": "Please input the slug!",
                                          "required": true,
                                        },
                                        Object {
                                          "message": "Please enter valid slug!",
                                          "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                                        },
                                      ]
                                    }
                                    trigger="onChange"
                                    validateTrigger="onChange"
                                    valuePropName="value"
                                  >
                                    <Row
                                      className="ant-form-item"
                                      key="row"
                                    >
                                      <div
                                        className="ant-row ant-form-item"
                                        style={Object {}}
                                      >
                                        <FormItemLabel
                                          htmlFor="create-format_slug"
                                          label="Slug"
                                          name="slug"
                                          prefixCls="ant-form"
                                          required={true}
                                          requiredMark={true}
                                          rules={
                                            Array [
                                              Object {
                                                "message": "Please input the slug!",
                                                "required": true,
                                              },
                                              Object {
                                                "message": "Please enter valid slug!",
                                                "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                                              },
                                            ]
                                          }
                                        >
                                          <Col
                                            className="ant-form-item-label"
                                          >
                                            <div
                                              className="ant-col ant-form-item-label"
                                              style={Object {}}
                                            >
                                              <label
                                                className="ant-form-item-required"
                                                htmlFor="create-format_slug"
                                                title="Slug"
                                              >
                                                Slug
                                              </label>
                                            </div>
                                          </Col>
                                        </FormItemLabel>
                                        <FormItemInput
                                          errors={Array []}
                                          label="Slug"
                                          name={
                                            Array [
                                              "slug",
                                            ]
                                          }
                                          onDomErrorVisibleChange={[Function]}
                                          prefixCls="ant-form"
                                          rules={
                                            Array [
                                              Object {
                                                "message": "Please input the slug!",
                                                "required": true,
                                              },
                                              Object {
                                                "message": "Please enter valid slug!",
                                                "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                                              },
                                            ]
                                          }
                                          status=""
                                          touched={false}
                                          validateStatus=""
                                          validating={false}
                                        >
                                          <Col
                                            className="ant-form-item-control"
                                          >
                                            <div
                                              className="ant-col ant-form-item-control"
                                              style={Object {}}
                                            >
                                              <div
                                                className="ant-form-item-control-input"
                                              >
                                                <div
                                                  className="ant-form-item-control-input-content"
                                                >
                                                  <Component
                                                    update={1}
                                                  >
                                                    <Input
                                                      id="create-format_slug"
                                                      onChange={[Function]}
                                                      type="text"
                                                    >
                                                      <ClearableLabeledInput
                                                        bordered={true}
                                                        element={
                                                          <input
                                                            className="ant-input"
                                                            id="create-format_slug"
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onFocus={[Function]}
                                                            onKeyDown={[Function]}
                                                            type="text"
                                                          />
                                                        }
                                                        focused={false}
                                                        handleReset={[Function]}
                                                        id="create-format_slug"
                                                        inputType="input"
                                                        onChange={[Function]}
                                                        prefixCls="ant-input"
                                                        triggerFocus={[Function]}
                                                        type="text"
                                                        value=""
                                                      >
                                                        <input
                                                          className="ant-input"
                                                          id="create-format_slug"
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          onFocus={[Function]}
                                                          onKeyDown={[Function]}
                                                          type="text"
                                                          value=""
                                                        />
                                                      </ClearableLabeledInput>
                                                    </Input>
                                                  </Component>
                                                </div>
                                              </div>
                                              <ErrorList
                                                errors={Array []}
                                                onDomErrorVisibleChange={[Function]}
                                              >
                                                <CSSMotion
                                                  motionAppear={true}
                                                  motionDeadline={500}
                                                  motionName="ant-show-help"
                                                  onLeaveEnd={[Function]}
                                                  removeOnLeave={true}
                                                  visible={false}
                                                >
                                                  <DomWrapper />
                                                </CSSMotion>
                                              </ErrorList>
                                            </div>
                                          </Col>
                                        </FormItemInput>
                                      </div>
                                    </Row>
                                  </Field>
                                </WrapperField>
                              </FormItem>
                            </SlugInput>
                            <FormItem
                              label="Featured"
                              name="is_featured"
                              valuePropName="checked"
                            >
                              <WrapperField
                                label="Featured"
                                messageVariables={
                                  Object {
                                    "label": "Featured",
                                  }
                                }
                                name="is_featured"
                                onReset={[Function]}
                                trigger="onChange"
                                validateTrigger="onChange"
                                valuePropName="checked"
                              >
                                <Field
                                  fieldContext={
                                    Object {
                                      "__INTERNAL__": Object {
                                        "itemRef": [Function],
                                        "name": "create-format",
                                      },
                                      "getFieldError": [Function],
                                      "getFieldInstance": [Function],
                                      "getFieldValue": [Function],
                                      "getFieldsError": [Function],
                                      "getFieldsValue": [Function],
                                      "getInternalHooks": [Function],
                                      "isFieldTouched": [Function],
                                      "isFieldValidating": [Function],
                                      "isFieldsTouched": [Function],
                                      "isFieldsValidating": [Function],
                                      "resetFields": [Function],
                                      "scrollToField": [Function],
                                      "setFields": [Function],
                                      "setFieldsValue": [Function],
                                      "submit": [Function],
                                      "validateFields": [Function],
                                      "validateTrigger": "onChange",
                                    }
                                  }
                                  key="_is_featured"
                                  label="Featured"
                                  messageVariables={
                                    Object {
                                      "label": "Featured",
                                    }
                                  }
                                  name={
                                    Array [
                                      "is_featured",
                                    ]
                                  }
                                  onReset={[Function]}
                                  trigger="onChange"
                                  validateTrigger="onChange"
                                  valuePropName="checked"
                                >
                                  <Row
                                    className="ant-form-item"
                                    key="row"
                                  >
                                    <div
                                      className="ant-row ant-form-item"
                                      style={Object {}}
                                    >
                                      <FormItemLabel
                                        htmlFor="create-format_is_featured"
                                        label="Featured"
                                        name="is_featured"
                                        prefixCls="ant-form"
                                        required={false}
                                        requiredMark={true}
                                        valuePropName="checked"
                                      >
                                        <Col
                                          className="ant-form-item-label"
                                        >
                                          <div
                                            className="ant-col ant-form-item-label"
                                            style={Object {}}
                                          >
                                            <label
                                              className=""
                                              htmlFor="create-format_is_featured"
                                              title="Featured"
                                            >
                                              Featured
                                            </label>
                                          </div>
                                        </Col>
                                      </FormItemLabel>
                                      <FormItemInput
                                        errors={Array []}
                                        label="Featured"
                                        name={
                                          Array [
                                            "is_featured",
                                          ]
                                        }
                                        onDomErrorVisibleChange={[Function]}
                                        prefixCls="ant-form"
                                        status=""
                                        touched={false}
                                        validateStatus=""
                                        validating={false}
                                        valuePropName="checked"
                                      >
                                        <Col
                                          className="ant-form-item-control"
                                        >
                                          <div
                                            className="ant-col ant-form-item-control"
                                            style={Object {}}
                                          >
                                            <div
                                              className="ant-form-item-control-input"
                                            >
                                              <div
                                                className="ant-form-item-control-input-content"
                                              >
                                                <Component
                                                  update={1}
                                                >
                                                  <Switch
                                                    id="create-format_is_featured"
                                                    onChange={[Function]}
                                                  >
                                                    <Wave
                                                      insertExtraNode={true}
                                                    >
                                                      <Switch
                                                        className=""
                                                        id="create-format_is_featured"
                                                        loadingIcon={
                                                          <div
                                                            className="ant-switch-handle"
                                                          />
                                                        }
                                                        onChange={[Function]}
                                                        prefixCls="ant-switch"
                                                      >
                                                        <button
                                                          aria-checked={false}
                                                          className="ant-switch"
                                                          id="create-format_is_featured"
                                                          onClick={[Function]}
                                                          onKeyDown={[Function]}
                                                          role="switch"
                                                          type="button"
                                                        >
                                                          <div
                                                            className="ant-switch-handle"
                                                          />
                                                          <span
                                                            className="ant-switch-inner"
                                                          />
                                                        </button>
                                                      </Switch>
                                                    </Wave>
                                                  </Switch>
                                                </Component>
                                              </div>
                                            </div>
                                            <ErrorList
                                              errors={Array []}
                                              onDomErrorVisibleChange={[Function]}
                                            >
                                              <CSSMotion
                                                motionAppear={true}
                                                motionDeadline={500}
                                                motionName="ant-show-help"
                                                onLeaveEnd={[Function]}
                                                removeOnLeave={true}
                                                visible={false}
                                              >
                                                <DomWrapper />
                                              </CSSMotion>
                                            </ErrorList>
                                          </div>
                                        </Col>
                                      </FormItemInput>
                                    </div>
                                  </Row>
                                </Field>
                              </WrapperField>
                            </FormItem>
                          </div>
                        </Col>
                        <Col
                          span={10}
                        >
                          <div
                            className="ant-col ant-col-10"
                            style={
                              Object {
                                "paddingLeft": 20,
                                "paddingRight": 20,
                              }
                            }
                          >
                            <FormItem
                              label="Featured Image"
                              name="medium_id"
                            >
                              <WrapperField
                                label="Featured Image"
                                messageVariables={
                                  Object {
                                    "label": "Featured Image",
                                  }
                                }
                                name="medium_id"
                                onReset={[Function]}
                                trigger="onChange"
                                validateTrigger="onChange"
                              >
                                <Field
                                  fieldContext={
                                    Object {
                                      "__INTERNAL__": Object {
                                        "itemRef": [Function],
                                        "name": "create-format",
                                      },
                                      "getFieldError": [Function],
                                      "getFieldInstance": [Function],
                                      "getFieldValue": [Function],
                                      "getFieldsError": [Function],
                                      "getFieldsValue": [Function],
                                      "getInternalHooks": [Function],
                                      "isFieldTouched": [Function],
                                      "isFieldValidating": [Function],
                                      "isFieldsTouched": [Function],
                                      "isFieldsValidating": [Function],
                                      "resetFields": [Function],
                                      "scrollToField": [Function],
                                      "setFields": [Function],
                                      "setFieldsValue": [Function],
                                      "submit": [Function],
                                      "validateFields": [Function],
                                      "validateTrigger": "onChange",
                                    }
                                  }
                                  key="_medium_id"
                                  label="Featured Image"
                                  messageVariables={
                                    Object {
                                      "label": "Featured Image",
                                    }
                                  }
                                  name={
                                    Array [
                                      "medium_id",
                                    ]
                                  }
                                  onReset={[Function]}
                                  trigger="onChange"
                                  validateTrigger="onChange"
                                  valuePropName="value"
                                >
                                  <Row
                                    className="ant-form-item"
                                    key="row"
                                  >
                                    <div
                                      className="ant-row ant-form-item"
                                      style={Object {}}
                                    >
                                      <FormItemLabel
                                        htmlFor="create-format_medium_id"
                                        label="Featured Image"
                                        name="medium_id"
                                        prefixCls="ant-form"
                                        required={false}
                                        requiredMark={true}
                                      >
                                        <Col
                                          className="ant-form-item-label"
                                        >
                                          <div
                                            className="ant-col ant-form-item-label"
                                            style={Object {}}
                                          >
                                            <label
                                              className=""
                                              htmlFor="create-format_medium_id"
                                              title="Featured Image"
                                            >
                                              Featured Image
                                            </label>
                                          </div>
                                        </Col>
                                      </FormItemLabel>
                                      <FormItemInput
                                        errors={Array []}
                                        label="Featured Image"
                                        name={
                                          Array [
                                            "medium_id",
                                          ]
                                        }
                                        onDomErrorVisibleChange={[Function]}
                                        prefixCls="ant-form"
                                        status=""
                                        touched={false}
                                        validateStatus=""
                                        validating={false}
                                      >
                                        <Col
                                          className="ant-form-item-control"
                                        >
                                          <div
                                            className="ant-col ant-form-item-control"
                                            style={Object {}}
                                          >
                                            <div
                                              className="ant-form-item-control-input"
                                            >
                                              <div
                                                className="ant-form-item-control-input-content"
                                              >
                                                <Component
                                                  update={1}
                                                >
                                                  <MediaSelector
                                                    containerStyles={
                                                      Object {
                                                        "justifyContent": "start",
                                                      }
                                                    }
                                                    id="create-format_medium_id"
                                                    maxWidth="350px"
                                                    onChange={[Function]}
                                                  >
                                                    <Modal
                                                      closable={false}
                                                      confirmLoading={false}
                                                      footer={
                                                        Array [
                                                          <ForwardRef(InternalButton)
                                                            onClick={[Function]}
                                                          >
                                                            Cancel
                                                          </ForwardRef(InternalButton)>,
                                                          <ForwardRef(InternalButton)
                                                            onClick={[Function]}
                                                            type="primary"
                                                          >
                                                            Ok
                                                          </ForwardRef(InternalButton)>,
                                                        ]
                                                      }
                                                      okType="primary"
                                                      onCancel={[Function]}
                                                      visible={false}
                                                      width="800px"
                                                    >
                                                      <Dialog
                                                        closable={false}
                                                        closeIcon={
                                                          <span
                                                            className="ant-modal-close-x"
                                                          >
                                                            <ForwardRef(CloseOutlined)
                                                              className="ant-modal-close-icon"
                                                            />
                                                          </span>
                                                        }
                                                        confirmLoading={false}
                                                        focusTriggerAfterClose={true}
                                                        footer={
                                                          Array [
                                                            <ForwardRef(InternalButton)
                                                              onClick={[Function]}
                                                            >
                                                              Cancel
                                                            </ForwardRef(InternalButton)>,
                                                            <ForwardRef(InternalButton)
                                                              onClick={[Function]}
                                                              type="primary"
                                                            >
                                                              Ok
                                                            </ForwardRef(InternalButton)>,
                                                          ]
                                                        }
                                                        maskTransitionName="ant-fade"
                                                        okType="primary"
                                                        onCancel={[Function]}
                                                        onClose={[Function]}
                                                        prefixCls="ant-modal"
                                                        transitionName="ant-zoom"
                                                        visible={false}
                                                        width="800px"
                                                        wrapClassName=""
                                                      >
                                                        <PortalWrapper
                                                          visible={false}
                                                        />
                                                      </Dialog>
                                                    </Modal>
                                                    <Space
                                                      direction="vertical"
                                                    >
                                                      <div
                                                        className="ant-space ant-space-vertical"
                                                        style={Object {}}
                                                      >
                                                        <Item
                                                          className="ant-space-item"
                                                          direction="vertical"
                                                          index={0}
                                                          key="ant-space-item-0"
                                                          marginDirection="marginRight"
                                                          wrap={false}
                                                        >
                                                          <div
                                                            className="ant-space-item"
                                                            style={Object {}}
                                                          >
                                                            <div
                                                              style={
                                                                Object {
                                                                  "alignItems": "center",
                                                                  "display": "flex",
                                                                  "justifyContent": "start",
                                                                }
                                                              }
                                                            >
                                                              <div
                                                                style={
                                                                  Object {
                                                                    "position": "relative",
                                                                  }
                                                                }
                                                              >
                                                                <Button
                                                                  onClick={[Function]}
                                                                  style={
                                                                    Object {
                                                                      "background": "transparent",
                                                                      "borderStyle": "dashed",
                                                                      "display": "block",
                                                                      "height": "auto",
                                                                    }
                                                                  }
                                                                >
                                                                  <Wave>
                                                                    <button
                                                                      className="ant-btn"
                                                                      onClick={[Function]}
                                                                      style={
                                                                        Object {
                                                                          "background": "transparent",
                                                                          "borderStyle": "dashed",
                                                                          "display": "block",
                                                                          "height": "auto",
                                                                        }
                                                                      }
                                                                      type="button"
                                                                    >
                                                                      <LoadingIcon
                                                                        existIcon={false}
                                                                        loading={false}
                                                                        prefixCls="ant-btn"
                                                                      >
                                                                        <CSSMotion
                                                                          motionName="ant-btn-loading-icon-motion"
                                                                          onAppearActive={[Function]}
                                                                          onAppearStart={[Function]}
                                                                          onEnterActive={[Function]}
                                                                          onEnterStart={[Function]}
                                                                          onLeaveActive={[Function]}
                                                                          onLeaveStart={[Function]}
                                                                          removeOnLeave={true}
                                                                          visible={false}
                                                                        >
                                                                          <DomWrapper />
                                                                        </CSSMotion>
                                                                      </LoadingIcon>
                                                                      <img
                                                                        key=".0"
                                                                        width="100%"
                                                                      />
                                                                    </button>
                                                                  </Wave>
                                                                </Button>
                                                                <Button
                                                                  onClick={[Function]}
                                                                  style={
                                                                    Object {
                                                                      "bottom": 0,
                                                                      "left": 0,
                                                                      "maxWidth": "52px",
                                                                      "position": "absolute",
                                                                    }
                                                                  }
                                                                >
                                                                  <Wave>
                                                                    <button
                                                                      className="ant-btn"
                                                                      onClick={[Function]}
                                                                      style={
                                                                        Object {
                                                                          "bottom": 0,
                                                                          "left": 0,
                                                                          "maxWidth": "52px",
                                                                          "position": "absolute",
                                                                        }
                                                                      }
                                                                      type="button"
                                                                    >
                                                                      <LoadingIcon
                                                                        existIcon={false}
                                                                        loading={false}
                                                                        prefixCls="ant-btn"
                                                                      >
                                                                        <CSSMotion
                                                                          motionName="ant-btn-loading-icon-motion"
                                                                          onAppearActive={[Function]}
                                                                          onAppearStart={[Function]}
                                                                          onEnterActive={[Function]}
                                                                          onEnterStart={[Function]}
                                                                          onLeaveActive={[Function]}
                                                                          onLeaveStart={[Function]}
                                                                          removeOnLeave={true}
                                                                          visible={false}
                                                                        >
                                                                          <DomWrapper />
                                                                        </CSSMotion>
                                                                      </LoadingIcon>
                                                                      <ForwardRef(DeleteOutlined)
                                                                        key=".0"
                                                                      >
                                                                        <AntdIcon
                                                                          icon={
                                                                            Object {
                                                                              "icon": Object {
                                                                                "attrs": Object {
                                                                                  "focusable": "false",
                                                                                  "viewBox": "64 64 896 896",
                                                                                },
                                                                                "children": Array [
                                                                                  Object {
                                                                                    "attrs": Object {
                                                                                      "d": "M360 184h-8c4.4 0 8-3.6 8-8v8h304v-8c0 4.4 3.6 8 8 8h-8v72h72v-80c0-35.3-28.7-64-64-64H352c-35.3 0-64 28.7-64 64v80h72v-72zm504 72H160c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h60.4l24.7 523c1.6 34.1 29.8 61 63.9 61h454c34.2 0 62.3-26.8 63.9-61l24.7-523H888c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zM731.3 840H292.7l-24.2-512h487l-24.2 512z",
                                                                                    },
                                                                                    "tag": "path",
                                                                                  },
                                                                                ],
                                                                                "tag": "svg",
                                                                              },
                                                                              "name": "delete",
                                                                              "theme": "outlined",
                                                                            }
                                                                          }
                                                                        >
                                                                          <span
                                                                            aria-label="delete"
                                                                            className="anticon anticon-delete"
                                                                            role="img"
                                                                          >
                                                                            <IconReact
                                                                              icon={
                                                                                Object {
                                                                                  "icon": Object {
                                                                                    "attrs": Object {
                                                                                      "focusable": "false",
                                                                                      "viewBox": "64 64 896 896",
                                                                                    },
                                                                                    "children": Array [
                                                                                      Object {
                                                                                        "attrs": Object {
                                                                                          "d": "M360 184h-8c4.4 0 8-3.6 8-8v8h304v-8c0 4.4 3.6 8 8 8h-8v72h72v-80c0-35.3-28.7-64-64-64H352c-35.3 0-64 28.7-64 64v80h72v-72zm504 72H160c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h60.4l24.7 523c1.6 34.1 29.8 61 63.9 61h454c34.2 0 62.3-26.8 63.9-61l24.7-523H888c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zM731.3 840H292.7l-24.2-512h487l-24.2 512z",
                                                                                        },
                                                                                        "tag": "path",
                                                                                      },
                                                                                    ],
                                                                                    "tag": "svg",
                                                                                  },
                                                                                  "name": "delete",
                                                                                  "theme": "outlined",
                                                                                }
                                                                              }
                                                                            >
                                                                              <svg
                                                                                aria-hidden="true"
                                                                                data-icon="delete"
                                                                                fill="currentColor"
                                                                                focusable="false"
                                                                                height="1em"
                                                                                key="svg-delete"
                                                                                viewBox="64 64 896 896"
                                                                                width="1em"
                                                                              >
                                                                                <path
                                                                                  d="M360 184h-8c4.4 0 8-3.6 8-8v8h304v-8c0 4.4 3.6 8 8 8h-8v72h72v-80c0-35.3-28.7-64-64-64H352c-35.3 0-64 28.7-64 64v80h72v-72zm504 72H160c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h60.4l24.7 523c1.6 34.1 29.8 61 63.9 61h454c34.2 0 62.3-26.8 63.9-61l24.7-523H888c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zM731.3 840H292.7l-24.2-512h487l-24.2 512z"
                                                                                  key="svg-delete-svg-0"
                                                                                />
                                                                              </svg>
                                                                            </IconReact>
                                                                          </span>
                                                                        </AntdIcon>
                                                                      </ForwardRef(DeleteOutlined)>
                                                                    </button>
                                                                  </Wave>
                                                                </Button>
                                                              </div>
                                                            </div>
                                                          </div>
                                                        </Item>
                                                      </div>
                                                    </Space>
                                                  </MediaSelector>
                                                </Component>
                                              </div>
                                            </div>
                                            <ErrorList
                                              errors={Array []}
                                              onDomErrorVisibleChange={[Function]}
                                            >
                                              <CSSMotion
                                                motionAppear={true}
                                                motionDeadline={500}
                                                motionName="ant-show-help"
                                                onLeaveEnd={[Function]}
                                                removeOnLeave={true}
                                                visible={false}
                                              >
                                                <DomWrapper />
                                              </CSSMotion>
                                            </ErrorList>
                                          </div>
                                        </Col>
                                      </FormItemInput>
                                    </div>
                                  </Row>
                                </Field>
                              </WrapperField>
                            </FormItem>
                          </div>
                        </Col>
                        <Col
                          span={12}
                          style={
                            Object {
                              "marginLeft": "20px",
                              "marginRight": "auto",
                            }
                          }
                        >
                          <div
                            className="ant-col ant-col-12"
                            style={
                              Object {
                                "marginLeft": "20px",
                                "marginRight": "auto",
                                "paddingLeft": 20,
                                "paddingRight": 20,
                              }
                            }
                          >
                            <FormItem
                              label="Description"
                              name="description"
                            >
                              <WrapperField
                                label="Description"
                                messageVariables={
                                  Object {
                                    "label": "Description",
                                  }
                                }
                                name="description"
                                onReset={[Function]}
                                trigger="onChange"
                                validateTrigger="onChange"
                              >
                                <Field
                                  fieldContext={
                                    Object {
                                      "__INTERNAL__": Object {
                                        "itemRef": [Function],
                                        "name": "create-format",
                                      },
                                      "getFieldError": [Function],
                                      "getFieldInstance": [Function],
                                      "getFieldValue": [Function],
                                      "getFieldsError": [Function],
                                      "getFieldsValue": [Function],
                                      "getInternalHooks": [Function],
                                      "isFieldTouched": [Function],
                                      "isFieldValidating": [Function],
                                      "isFieldsTouched": [Function],
                                      "isFieldsValidating": [Function],
                                      "resetFields": [Function],
                                      "scrollToField": [Function],
                                      "setFields": [Function],
                                      "setFieldsValue": [Function],
                                      "submit": [Function],
                                      "validateFields": [Function],
                                      "validateTrigger": "onChange",
                                    }
                                  }
                                  key="_description"
                                  label="Description"
                                  messageVariables={
                                    Object {
                                      "label": "Description",
                                    }
                                  }
                                  name={
                                    Array [
                                      "description",
                                    ]
                                  }
                                  onReset={[Function]}
                                  trigger="onChange"
                                  validateTrigger="onChange"
                                  valuePropName="value"
                                >
                                  <Row
                                    className="ant-form-item"
                                    key="row"
                                  >
                                    <div
                                      className="ant-row ant-form-item"
                                      style={Object {}}
                                    >
                                      <FormItemLabel
                                        htmlFor="create-format_description"
                                        label="Description"
                                        name="description"
                                        prefixCls="ant-form"
                                        required={false}
                                        requiredMark={true}
                                      >
                                        <Col
                                          className="ant-form-item-label"
                                        >
                                          <div
                                            className="ant-col ant-form-item-label"
                                            style={Object {}}
                                          >
                                            <label
                                              className=""
                                              htmlFor="create-format_description"
                                              title="Description"
                                            >
                                              Description
                                            </label>
                                          </div>
                                        </Col>
                                      </FormItemLabel>
                                      <FormItemInput
                                        errors={Array []}
                                        label="Description"
                                        name={
                                          Array [
                                            "description",
                                          ]
                                        }
                                        onDomErrorVisibleChange={[Function]}
                                        prefixCls="ant-form"
                                        status=""
                                        touched={false}
                                        validateStatus=""
                                        validating={false}
                                      >
                                        <Col
                                          className="ant-form-item-control"
                                        >
                                          <div
                                            className="ant-col ant-form-item-control"
                                            style={Object {}}
                                          >
                                            <div
                                              className="ant-form-item-control-input"
                                            >
                                              <div
                                                className="ant-form-item-control-input-content"
                                              >
                                                <Component
                                                  update={1}
                                                >
                                                  <ForwardRef
                                                    id="create-format_description"
                                                    onChange={[Function]}
                                                  >
                                                    <ClearableLabeledInput
                                                      bordered={true}
                                                      element={
                                                        <TextArea
                                                          className=""
                                                          id="create-format_description"
                                                          onChange={[Function]}
                                                          onCompositionEnd={[Function]}
                                                          onCompositionStart={[Function]}
                                                          prefixCls="ant-input"
                                                        />
                                                      }
                                                      handleReset={[Function]}
                                                      id="create-format_description"
                                                      inputType="text"
                                                      prefixCls="ant-input"
                                                      value=""
                                                    >
                                                      <TextArea
                                                        className=""
                                                        id="create-format_description"
                                                        onChange={[Function]}
                                                        onCompositionEnd={[Function]}
                                                        onCompositionStart={[Function]}
                                                        prefixCls="ant-input"
                                                        value=""
                                                      >
                                                        <ResizableTextArea
                                                          className=""
                                                          id="create-format_description"
                                                          onChange={[Function]}
                                                          onCompositionEnd={[Function]}
                                                          onCompositionStart={[Function]}
                                                          onKeyDown={[Function]}
                                                          prefixCls="ant-input"
                                                          value=""
                                                        >
                                                          <ResizeObserver
                                                            disabled={true}
                                                            onResize={[Function]}
                                                          >
                                                            <textarea
                                                              className="ant-input"
                                                              id="create-format_description"
                                                              onChange={[Function]}
                                                              onCompositionEnd={[Function]}
                                                              onCompositionStart={[Function]}
                                                              onKeyDown={[Function]}
                                                              style={Object {}}
                                                              value=""
                                                            />
                                                          </ResizeObserver>
                                                        </ResizableTextArea>
                                                      </TextArea>
                                                    </ClearableLabeledInput>
                                                  </ForwardRef>
                                                </Component>
                                              </div>
                                            </div>
                                            <ErrorList
                                              errors={Array []}
                                              onDomErrorVisibleChange={[Function]}
                                            >
                                              <CSSMotion
                                                motionAppear={true}
                                                motionDeadline={500}
                                                motionName="ant-show-help"
                                                onLeaveEnd={[Function]}
                                                removeOnLeave={true}
                                                visible={false}
                                              >
                                                <DomWrapper />
                                              </CSSMotion>
                                            </ErrorList>
                                          </div>
                                        </Col>
                                      </FormItemInput>
                                    </div>
                                  </Row>
                                </Field>
                              </WrapperField>
                            </FormItem>
                          </div>
                        </Col>
                      </div>
                    </Row>
                  </div>
                </Col>
                <Col
                  span={24}
                >
                  <div
                    className="ant-col ant-col-24"
                    style={Object {}}
                  >
                    <Row
                      gutter={40}
                      style={
                        Object {
                          "background": "#f0f2f5",
                        }
                      }
                    >
                      <div
                        className="ant-row"
                        style={
                          Object {
                            "background": "#f0f2f5",
                            "marginLeft": -20,
                            "marginRight": -20,
                          }
                        }
                      >
                        <MetaForm>
                          <Collapse
                            expandIcon={[Function]}
                            expandIconPosition="right"
                            style={
                              Object {
                                "width": "100%",
                              }
                            }
                          >
                            <Collapse
                              accordion={false}
                              bordered={true}
                              className="ant-collapse-icon-position-right"
                              destroyInactivePanel={false}
                              expandIcon={[Function]}
                              expandIconPosition="right"
                              onChange={[Function]}
                              openMotion={
                                Object {
                                  "leavedClassName": "ant-collapse-content-hidden",
                                  "motionAppear": false,
                                  "motionDeadline": 500,
                                  "motionName": "ant-motion-collapse",
                                  "onAppearActive": [Function],
                                  "onAppearEnd": [Function],
                                  "onAppearStart": [Function],
                                  "onEnterActive": [Function],
                                  "onEnterEnd": [Function],
                                  "onEnterStart": [Function],
                                  "onLeaveActive": [Function],
                                  "onLeaveEnd": [Function],
                                  "onLeaveStart": [Function],
                                }
                              }
                              prefixCls="ant-collapse"
                              style={
                                Object {
                                  "width": "100%",
                                }
                              }
                            >
                              <div
                                className="ant-collapse ant-collapse-icon-position-right"
                                role={null}
                                style={
                                  Object {
                                    "width": "100%",
                                  }
                                }
                              >
                                <CollapsePanel
                                  accordion={false}
                                  destroyInactivePanel={false}
                                  expandIcon={[Function]}
                                  header="Meta Data"
                                  isActive={false}
                                  key="0"
                                  onItemClick={[Function]}
                                  openMotion={
                                    Object {
                                      "leavedClassName": "ant-collapse-content-hidden",
                                      "motionAppear": false,
                                      "motionDeadline": 500,
                                      "motionName": "ant-motion-collapse",
                                      "onAppearActive": [Function],
                                      "onAppearEnd": [Function],
                                      "onAppearStart": [Function],
                                      "onEnterActive": [Function],
                                      "onEnterEnd": [Function],
                                      "onEnterStart": [Function],
                                      "onLeaveActive": [Function],
                                      "onLeaveEnd": [Function],
                                      "onLeaveStart": [Function],
                                    }
                                  }
                                  panelKey="0"
                                  prefixCls="ant-collapse"
                                >
                                  <CollapsePanel
                                    accordion={false}
                                    className=""
                                    destroyInactivePanel={false}
                                    expandIcon={[Function]}
                                    forceRender={false}
                                    header="Meta Data"
                                    headerClass=""
                                    isActive={false}
                                    onItemClick={[Function]}
                                    openMotion={
                                      Object {
                                        "leavedClassName": "ant-collapse-content-hidden",
                                        "motionAppear": false,
                                        "motionDeadline": 500,
                                        "motionName": "ant-motion-collapse",
                                        "onAppearActive": [Function],
                                        "onAppearEnd": [Function],
                                        "onAppearStart": [Function],
                                        "onEnterActive": [Function],
                                        "onEnterEnd": [Function],
                                        "onEnterStart": [Function],
                                        "onLeaveActive": [Function],
                                        "onLeaveEnd": [Function],
                                        "onLeaveStart": [Function],
                                      }
                                    }
                                    panelKey="0"
                                    prefixCls="ant-collapse"
                                    showArrow={true}
                                  >
                                    <div
                                      className="ant-collapse-item"
                                    >
                                      <div
                                        aria-expanded={false}
                                        className="ant-collapse-header"
                                        onClick={[Function]}
                                        onKeyPress={[Function]}
                                        role="button"
                                        tabIndex={0}
                                      >
                                        <Button
                                          className="ant-collapse-arrow"
                                        >
                                          <Wave>
                                            <button
                                              className="ant-btn ant-collapse-arrow"
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <LoadingIcon
                                                existIcon={false}
                                                loading={false}
                                                prefixCls="ant-btn"
                                              >
                                                <CSSMotion
                                                  motionName="ant-btn-loading-icon-motion"
                                                  onAppearActive={[Function]}
                                                  onAppearStart={[Function]}
                                                  onEnterActive={[Function]}
                                                  onEnterStart={[Function]}
                                                  onLeaveActive={[Function]}
                                                  onLeaveStart={[Function]}
                                                  removeOnLeave={true}
                                                  visible={false}
                                                >
                                                  <DomWrapper />
                                                </CSSMotion>
                                              </LoadingIcon>
                                              <span
                                                key=".0"
                                              >
                                                Expand
                                              </span>
                                            </button>
                                          </Wave>
                                        </Button>
                                        Meta Data
                                      </div>
                                      <CSSMotion
                                        forceRender={false}
                                        leavedClassName="ant-collapse-content-hidden"
                                        motionAppear={false}
                                        motionDeadline={500}
                                        motionName="ant-motion-collapse"
                                        onAppearActive={[Function]}
                                        onAppearEnd={[Function]}
                                        onAppearStart={[Function]}
                                        onEnterActive={[Function]}
                                        onEnterEnd={[Function]}
                                        onEnterStart={[Function]}
                                        onLeaveActive={[Function]}
                                        onLeaveEnd={[Function]}
                                        onLeaveStart={[Function]}
                                        removeOnLeave={false}
                                        visible={false}
                                      >
                                        <DomWrapper />
                                      </CSSMotion>
                                    </div>
                                  </CollapsePanel>
                                </CollapsePanel>
                                <CollapsePanel
                                  accordion={false}
                                  destroyInactivePanel={false}
                                  expandIcon={[Function]}
                                  header="Code Injection"
                                  isActive={false}
                                  key="1"
                                  onItemClick={[Function]}
                                  openMotion={
                                    Object {
                                      "leavedClassName": "ant-collapse-content-hidden",
                                      "motionAppear": false,
                                      "motionDeadline": 500,
                                      "motionName": "ant-motion-collapse",
                                      "onAppearActive": [Function],
                                      "onAppearEnd": [Function],
                                      "onAppearStart": [Function],
                                      "onEnterActive": [Function],
                                      "onEnterEnd": [Function],
                                      "onEnterStart": [Function],
                                      "onLeaveActive": [Function],
                                      "onLeaveEnd": [Function],
                                      "onLeaveStart": [Function],
                                    }
                                  }
                                  panelKey="1"
                                  prefixCls="ant-collapse"
                                >
                                  <CollapsePanel
                                    accordion={false}
                                    className=""
                                    destroyInactivePanel={false}
                                    expandIcon={[Function]}
                                    forceRender={false}
                                    header="Code Injection"
                                    headerClass=""
                                    isActive={false}
                                    onItemClick={[Function]}
                                    openMotion={
                                      Object {
                                        "leavedClassName": "ant-collapse-content-hidden",
                                        "motionAppear": false,
                                        "motionDeadline": 500,
                                        "motionName": "ant-motion-collapse",
                                        "onAppearActive": [Function],
                                        "onAppearEnd": [Function],
                                        "onAppearStart": [Function],
                                        "onEnterActive": [Function],
                                        "onEnterEnd": [Function],
                                        "onEnterStart": [Function],
                                        "onLeaveActive": [Function],
                                        "onLeaveEnd": [Function],
                                        "onLeaveStart": [Function],
                                      }
                                    }
                                    panelKey="1"
                                    prefixCls="ant-collapse"
                                    showArrow={true}
                                  >
                                    <div
                                      className="ant-collapse-item"
                                    >
                                      <div
                                        aria-expanded={false}
                                        className="ant-collapse-header"
                                        onClick={[Function]}
                                        onKeyPress={[Function]}
                                        role="button"
                                        tabIndex={0}
                                      >
                                        <Button
                                          className="ant-collapse-arrow"
                                        >
                                          <Wave>
                                            <button
                                              className="ant-btn ant-collapse-arrow"
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <LoadingIcon
                                                existIcon={false}
                                                loading={false}
                                                prefixCls="ant-btn"
                                              >
                                                <CSSMotion
                                                  motionName="ant-btn-loading-icon-motion"
                                                  onAppearActive={[Function]}
                                                  onAppearStart={[Function]}
                                                  onEnterActive={[Function]}
                                                  onEnterStart={[Function]}
                                                  onLeaveActive={[Function]}
                                                  onLeaveStart={[Function]}
                                                  removeOnLeave={true}
                                                  visible={false}
                                                >
                                                  <DomWrapper />
                                                </CSSMotion>
                                              </LoadingIcon>
                                              <span
                                                key=".0"
                                              >
                                                Expand
                                              </span>
                                            </button>
                                          </Wave>
                                        </Button>
                                        Code Injection
                                      </div>
                                      <CSSMotion
                                        forceRender={false}
                                        leavedClassName="ant-collapse-content-hidden"
                                        motionAppear={false}
                                        motionDeadline={500}
                                        motionName="ant-motion-collapse"
                                        onAppearActive={[Function]}
                                        onAppearEnd={[Function]}
                                        onAppearStart={[Function]}
                                        onEnterActive={[Function]}
                                        onEnterEnd={[Function]}
                                        onEnterStart={[Function]}
                                        onLeaveActive={[Function]}
                                        onLeaveEnd={[Function]}
                                        onLeaveStart={[Function]}
                                        removeOnLeave={false}
                                        visible={false}
                                      >
                                        <DomWrapper />
                                      </CSSMotion>
                                    </div>
                                  </CollapsePanel>
                                </CollapsePanel>
                              </div>
                            </Collapse>
                          </Collapse>
                          <Collapse
                            expandIcon={[Function]}
                            expandIconPosition="right"
                            style={
                              Object {
                                "width": "100%",
                              }
                            }
                          >
                            <Collapse
                              accordion={false}
                              bordered={true}
                              className="ant-collapse-icon-position-right"
                              destroyInactivePanel={false}
                              expandIcon={[Function]}
                              expandIconPosition="right"
                              onChange={[Function]}
                              openMotion={
                                Object {
                                  "leavedClassName": "ant-collapse-content-hidden",
                                  "motionAppear": false,
                                  "motionDeadline": 500,
                                  "motionName": "ant-motion-collapse",
                                  "onAppearActive": [Function],
                                  "onAppearEnd": [Function],
                                  "onAppearStart": [Function],
                                  "onEnterActive": [Function],
                                  "onEnterEnd": [Function],
                                  "onEnterStart": [Function],
                                  "onLeaveActive": [Function],
                                  "onLeaveEnd": [Function],
                                  "onLeaveStart": [Function],
                                }
                              }
                              prefixCls="ant-collapse"
                              style={
                                Object {
                                  "width": "100%",
                                }
                              }
                            >
                              <div
                                className="ant-collapse ant-collapse-icon-position-right"
                                role={null}
                                style={
                                  Object {
                                    "width": "100%",
                                  }
                                }
                              >
                                <CollapsePanel
                                  accordion={false}
                                  destroyInactivePanel={false}
                                  expandIcon={[Function]}
                                  header="Meta Fields"
                                  isActive={false}
                                  key="0"
                                  onItemClick={[Function]}
                                  openMotion={
                                    Object {
                                      "leavedClassName": "ant-collapse-content-hidden",
                                      "motionAppear": false,
                                      "motionDeadline": 500,
                                      "motionName": "ant-motion-collapse",
                                      "onAppearActive": [Function],
                                      "onAppearEnd": [Function],
                                      "onAppearStart": [Function],
                                      "onEnterActive": [Function],
                                      "onEnterEnd": [Function],
                                      "onEnterStart": [Function],
                                      "onLeaveActive": [Function],
                                      "onLeaveEnd": [Function],
                                      "onLeaveStart": [Function],
                                    }
                                  }
                                  panelKey="0"
                                  prefixCls="ant-collapse"
                                >
                                  <CollapsePanel
                                    accordion={false}
                                    className=""
                                    destroyInactivePanel={false}
                                    expandIcon={[Function]}
                                    forceRender={false}
                                    header="Meta Fields"
                                    headerClass=""
                                    isActive={false}
                                    onItemClick={[Function]}
                                    openMotion={
                                      Object {
                                        "leavedClassName": "ant-collapse-content-hidden",
                                        "motionAppear": false,
                                        "motionDeadline": 500,
                                        "motionName": "ant-motion-collapse",
                                        "onAppearActive": [Function],
                                        "onAppearEnd": [Function],
                                        "onAppearStart": [Function],
                                        "onEnterActive": [Function],
                                        "onEnterEnd": [Function],
                                        "onEnterStart": [Function],
                                        "onLeaveActive": [Function],
                                        "onLeaveEnd": [Function],
                                        "onLeaveStart": [Function],
                                      }
                                    }
                                    panelKey="0"
                                    prefixCls="ant-collapse"
                                    showArrow={true}
                                  >
                                    <div
                                      className="ant-collapse-item"
                                    >
                                      <div
                                        aria-expanded={false}
                                        className="ant-collapse-header"
                                        onClick={[Function]}
                                        onKeyPress={[Function]}
                                        role="button"
                                        tabIndex={0}
                                      >
                                        <Button
                                          className="ant-collapse-arrow"
                                        >
                                          <Wave>
                                            <button
                                              className="ant-btn ant-collapse-arrow"
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <LoadingIcon
                                                existIcon={false}
                                                loading={false}
                                                prefixCls="ant-btn"
                                              >
                                                <CSSMotion
                                                  motionName="ant-btn-loading-icon-motion"
                                                  onAppearActive={[Function]}
                                                  onAppearStart={[Function]}
                                                  onEnterActive={[Function]}
                                                  onEnterStart={[Function]}
                                                  onLeaveActive={[Function]}
                                                  onLeaveStart={[Function]}
                                                  removeOnLeave={true}
                                                  visible={false}
                                                >
                                                  <DomWrapper />
                                                </CSSMotion>
                                              </LoadingIcon>
                                              <span
                                                key=".0"
                                              >
                                                Expand
                                              </span>
                                            </button>
                                          </Wave>
                                        </Button>
                                        Meta Fields
                                      </div>
                                      <CSSMotion
                                        forceRender={false}
                                        leavedClassName="ant-collapse-content-hidden"
                                        motionAppear={false}
                                        motionDeadline={500}
                                        motionName="ant-motion-collapse"
                                        onAppearActive={[Function]}
                                        onAppearEnd={[Function]}
                                        onAppearStart={[Function]}
                                        onEnterActive={[Function]}
                                        onEnterEnd={[Function]}
                                        onEnterStart={[Function]}
                                        onLeaveActive={[Function]}
                                        onLeaveEnd={[Function]}
                                        onLeaveStart={[Function]}
                                        removeOnLeave={false}
                                        visible={false}
                                      >
                                        <DomWrapper />
                                      </CSSMotion>
                                    </div>
                                  </CollapsePanel>
                                </CollapsePanel>
                              </div>
                            </Collapse>
                          </Collapse>
                        </MetaForm>
                      </div>
                    </Row>
                  </div>
                </Col>
              </div>
            </Row>
          </form>
        </ForwardRef(Form)>
      </SizeContextProvider>
    </ForwardRef(InternalForm)>
  </FormatForm>
</Provider>
`;

exports[`Formats Create Form component snapshot testing should render the component 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <FormatForm>
    <ForwardRef(InternalForm)
      form={
        Object {
          "__INTERNAL__": Object {
            "itemRef": [Function],
            "name": "create-format",
          },
          "getFieldError": [Function],
          "getFieldInstance": [Function],
          "getFieldValue": [Function],
          "getFieldsError": [Function],
          "getFieldsValue": [Function],
          "getInternalHooks": [Function],
          "isFieldTouched": [Function],
          "isFieldValidating": [Function],
          "isFieldsTouched": [Function],
          "isFieldsValidating": [Function],
          "resetFields": [Function],
          "scrollToField": [Function],
          "setFields": [Function],
          "setFieldsValue": [Function],
          "submit": [Function],
          "validateFields": [Function],
        }
      }
      initialValues={Object {}}
      layout="vertical"
      name="create-format"
      onFinish={[Function]}
      onValuesChange={[Function]}
    >
      <SizeContextProvider>
        <ForwardRef(Form)
          className="ant-form ant-form-vertical"
          form={
            Object {
              "__INTERNAL__": Object {
                "itemRef": [Function],
                "name": "create-format",
              },
              "getFieldError": [Function],
              "getFieldInstance": [Function],
              "getFieldValue": [Function],
              "getFieldsError": [Function],
              "getFieldsValue": [Function],
              "getInternalHooks": [Function],
              "isFieldTouched": [Function],
              "isFieldValidating": [Function],
              "isFieldsTouched": [Function],
              "isFieldsValidating": [Function],
              "resetFields": [Function],
              "scrollToField": [Function],
              "setFields": [Function],
              "setFieldsValue": [Function],
              "submit": [Function],
              "validateFields": [Function],
            }
          }
          id="create-format"
          initialValues={Object {}}
          name="create-format"
          onFinish={[Function]}
          onFinishFailed={[Function]}
          onValuesChange={[Function]}
        >
          <form
            className="ant-form ant-form-vertical"
            id="create-format"
            onReset={[Function]}
            onSubmit={[Function]}
          >
            <Row
              justify="center"
              style={
                Object {
                  "margin": "0 auto",
                  "maxWidth": "1200px",
                  "width": "100%",
                }
              }
            >
              <div
                className="ant-row ant-row-center"
                style={
                  Object {
                    "margin": "0 auto",
                    "maxWidth": "1200px",
                    "width": "100%",
                  }
                }
              >
                <Col
                  span={24}
                >
                  <div
                    className="ant-col ant-col-24"
                    style={Object {}}
                  >
                    <Row
                      gutter={40}
                      justify="end"
                    >
                      <div
                        className="ant-row ant-row-end"
                        style={
                          Object {
                            "marginLeft": -20,
                            "marginRight": -20,
                          }
                        }
                      >
                        <FormItem>
                          <Row
                            className="ant-form-item"
                            key="row"
                          >
                            <div
                              className="ant-row ant-form-item"
                              style={Object {}}
                            >
                              <FormItemLabel
                                prefixCls="ant-form"
                                requiredMark={true}
                              />
                              <FormItemInput
                                errors={Array []}
                                onDomErrorVisibleChange={[Function]}
                                prefixCls="ant-form"
                                status=""
                                validateStatus=""
                              >
                                <Col
                                  className="ant-form-item-control"
                                >
                                  <div
                                    className="ant-col ant-form-item-control"
                                    style={Object {}}
                                  >
                                    <div
                                      className="ant-form-item-control-input"
                                    >
                                      <div
                                        className="ant-form-item-control-input-content"
                                      >
                                        <Space>
                                          <div
                                            className="ant-space ant-space-horizontal ant-space-align-center"
                                            style={Object {}}
                                          >
                                            <Item
                                              className="ant-space-item"
                                              direction="horizontal"
                                              index={0}
                                              key="ant-space-item-0"
                                              marginDirection="marginRight"
                                              wrap={false}
                                            >
                                              <div
                                                className="ant-space-item"
                                                style={
                                                  Object {
                                                    "marginRight": 8,
                                                  }
                                                }
                                              >
                                                <Button
                                                  htmlType="button"
                                                  onClick={[Function]}
                                                >
                                                  <Wave>
                                                    <button
                                                      className="ant-btn"
                                                      onClick={[Function]}
                                                      type="button"
                                                    >
                                                      <LoadingIcon
                                                        existIcon={false}
                                                        loading={false}
                                                        prefixCls="ant-btn"
                                                      >
                                                        <CSSMotion
                                                          motionName="ant-btn-loading-icon-motion"
                                                          onAppearActive={[Function]}
                                                          onAppearStart={[Function]}
                                                          onEnterActive={[Function]}
                                                          onEnterStart={[Function]}
                                                          onLeaveActive={[Function]}
                                                          onLeaveStart={[Function]}
                                                          removeOnLeave={true}
                                                          visible={false}
                                                        >
                                                          <DomWrapper />
                                                        </CSSMotion>
                                                      </LoadingIcon>
                                                      <span
                                                        key=".0"
                                                      >
                                                        Reset
                                                      </span>
                                                    </button>
                                                  </Wave>
                                                </Button>
                                              </div>
                                            </Item>
                                            <Item
                                              className="ant-space-item"
                                              direction="horizontal"
                                              index={1}
                                              key="ant-space-item-1"
                                              marginDirection="marginRight"
                                              wrap={false}
                                            >
                                              <div
                                                className="ant-space-item"
                                                style={Object {}}
                                              >
                                                <Button
                                                  disabled={true}
                                                  htmlType="submit"
                                                  type="primary"
                                                >
                                                  <Wave>
                                                    <button
                                                      className="ant-btn ant-btn-primary"
                                                      disabled={true}
                                                      onClick={[Function]}
                                                      type="submit"
                                                    >
                                                      <LoadingIcon
                                                        existIcon={false}
                                                        loading={false}
                                                        prefixCls="ant-btn"
                                                      >
                                                        <CSSMotion
                                                          motionName="ant-btn-loading-icon-motion"
                                                          onAppearActive={[Function]}
                                                          onAppearStart={[Function]}
                                                          onEnterActive={[Function]}
                                                          onEnterStart={[Function]}
                                                          onLeaveActive={[Function]}
                                                          onLeaveStart={[Function]}
                                                          removeOnLeave={true}
                                                          visible={false}
                                                        >
                                                          <DomWrapper />
                                                        </CSSMotion>
                                                      </LoadingIcon>
                                                      <span
                                                        key=".0"
                                                      >
                                                        Submit
                                                      </span>
                                                    </button>
                                                  </Wave>
                                                </Button>
                                              </div>
                                            </Item>
                                          </div>
                                        </Space>
                                      </div>
                                    </div>
                                    <ErrorList
                                      errors={Array []}
                                      onDomErrorVisibleChange={[Function]}
                                    >
                                      <CSSMotion
                                        motionAppear={true}
                                        motionDeadline={500}
                                        motionName="ant-show-help"
                                        onLeaveEnd={[Function]}
                                        removeOnLeave={true}
                                        visible={false}
                                      >
                                        <DomWrapper />
                                      </CSSMotion>
                                    </ErrorList>
                                  </div>
                                </Col>
                              </FormItemInput>
                            </div>
                          </Row>
                        </FormItem>
                      </div>
                    </Row>
                  </div>
                </Col>
                <Col
                  span={24}
                >
                  <div
                    className="ant-col ant-col-24"
                    style={Object {}}
                  >
                    <Row
                      gutter={40}
                      justify="space-around"
                      style={
                        Object {
                          "background": "#f0f2f5",
                          "marginBottom": "1rem",
                          "padding": "1.25rem",
                        }
                      }
                    >
                      <div
                        className="ant-row ant-row-space-around"
                        style={
                          Object {
                            "background": "#f0f2f5",
                            "marginBottom": "1rem",
                            "marginLeft": -20,
                            "marginRight": -20,
                            "padding": "1.25rem",
                          }
                        }
                      >
                        <Col
                          span={12}
                        >
                          <div
                            className="ant-col ant-col-12"
                            style={
                              Object {
                                "paddingLeft": 20,
                                "paddingRight": 20,
                              }
                            }
                          >
                            <FormItem
                              label="Format Name"
                              name="name"
                              rules={
                                Array [
                                  Object {
                                    "message": "Please enter the name!",
                                    "required": true,
                                  },
                                  Object {
                                    "message": "Name must be minimum 3 characters.",
                                    "min": 3,
                                  },
                                  Object {
                                    "max": 50,
                                    "message": "Name must be maximum 50 characters.",
                                  },
                                ]
                              }
                            >
                              <WrapperField
                                label="Format Name"
                                messageVariables={
                                  Object {
                                    "label": "Format Name",
                                  }
                                }
                                name="name"
                                onReset={[Function]}
                                rules={
                                  Array [
                                    Object {
                                      "message": "Please enter the name!",
                                      "required": true,
                                    },
                                    Object {
                                      "message": "Name must be minimum 3 characters.",
                                      "min": 3,
                                    },
                                    Object {
                                      "max": 50,
                                      "message": "Name must be maximum 50 characters.",
                                    },
                                  ]
                                }
                                trigger="onChange"
                                validateTrigger="onChange"
                              >
                                <Field
                                  fieldContext={
                                    Object {
                                      "__INTERNAL__": Object {
                                        "itemRef": [Function],
                                        "name": "create-format",
                                      },
                                      "getFieldError": [Function],
                                      "getFieldInstance": [Function],
                                      "getFieldValue": [Function],
                                      "getFieldsError": [Function],
                                      "getFieldsValue": [Function],
                                      "getInternalHooks": [Function],
                                      "isFieldTouched": [Function],
                                      "isFieldValidating": [Function],
                                      "isFieldsTouched": [Function],
                                      "isFieldsValidating": [Function],
                                      "resetFields": [Function],
                                      "scrollToField": [Function],
                                      "setFields": [Function],
                                      "setFieldsValue": [Function],
                                      "submit": [Function],
                                      "validateFields": [Function],
                                      "validateTrigger": "onChange",
                                    }
                                  }
                                  key="_name"
                                  label="Format Name"
                                  messageVariables={
                                    Object {
                                      "label": "Format Name",
                                    }
                                  }
                                  name={
                                    Array [
                                      "name",
                                    ]
                                  }
                                  onReset={[Function]}
                                  rules={
                                    Array [
                                      Object {
                                        "message": "Please enter the name!",
                                        "required": true,
                                      },
                                      Object {
                                        "message": "Name must be minimum 3 characters.",
                                        "min": 3,
                                      },
                                      Object {
                                        "max": 50,
                                        "message": "Name must be maximum 50 characters.",
                                      },
                                    ]
                                  }
                                  trigger="onChange"
                                  validateTrigger="onChange"
                                  valuePropName="value"
                                >
                                  <Row
                                    className="ant-form-item"
                                    key="row"
                                  >
                                    <div
                                      className="ant-row ant-form-item"
                                      style={Object {}}
                                    >
                                      <FormItemLabel
                                        htmlFor="create-format_name"
                                        label="Format Name"
                                        name="name"
                                        prefixCls="ant-form"
                                        required={true}
                                        requiredMark={true}
                                        rules={
                                          Array [
                                            Object {
                                              "message": "Please enter the name!",
                                              "required": true,
                                            },
                                            Object {
                                              "message": "Name must be minimum 3 characters.",
                                              "min": 3,
                                            },
                                            Object {
                                              "max": 50,
                                              "message": "Name must be maximum 50 characters.",
                                            },
                                          ]
                                        }
                                      >
                                        <Col
                                          className="ant-form-item-label"
                                        >
                                          <div
                                            className="ant-col ant-form-item-label"
                                            style={Object {}}
                                          >
                                            <label
                                              className="ant-form-item-required"
                                              htmlFor="create-format_name"
                                              title="Format Name"
                                            >
                                              Format Name
                                            </label>
                                          </div>
                                        </Col>
                                      </FormItemLabel>
                                      <FormItemInput
                                        errors={Array []}
                                        label="Format Name"
                                        name={
                                          Array [
                                            "name",
                                          ]
                                        }
                                        onDomErrorVisibleChange={[Function]}
                                        prefixCls="ant-form"
                                        rules={
                                          Array [
                                            Object {
                                              "message": "Please enter the name!",
                                              "required": true,
                                            },
                                            Object {
                                              "message": "Name must be minimum 3 characters.",
                                              "min": 3,
                                            },
                                            Object {
                                              "max": 50,
                                              "message": "Name must be maximum 50 characters.",
                                            },
                                          ]
                                        }
                                        status=""
                                        touched={false}
                                        validateStatus=""
                                        validating={false}
                                      >
                                        <Col
                                          className="ant-form-item-control"
                                        >
                                          <div
                                            className="ant-col ant-form-item-control"
                                            style={Object {}}
                                          >
                                            <div
                                              className="ant-form-item-control-input"
                                            >
                                              <div
                                                className="ant-form-item-control-input-content"
                                              >
                                                <Component
                                                  update={1}
                                                >
                                                  <Input
                                                    id="create-format_name"
                                                    onChange={[Function]}
                                                    type="text"
                                                  >
                                                    <ClearableLabeledInput
                                                      bordered={true}
                                                      element={
                                                        <input
                                                          className="ant-input"
                                                          id="create-format_name"
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          onFocus={[Function]}
                                                          onKeyDown={[Function]}
                                                          type="text"
                                                        />
                                                      }
                                                      focused={false}
                                                      handleReset={[Function]}
                                                      id="create-format_name"
                                                      inputType="input"
                                                      onChange={[Function]}
                                                      prefixCls="ant-input"
                                                      triggerFocus={[Function]}
                                                      type="text"
                                                      value=""
                                                    >
                                                      <input
                                                        className="ant-input"
                                                        id="create-format_name"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        type="text"
                                                        value=""
                                                      />
                                                    </ClearableLabeledInput>
                                                  </Input>
                                                </Component>
                                              </div>
                                            </div>
                                            <ErrorList
                                              errors={Array []}
                                              onDomErrorVisibleChange={[Function]}
                                            >
                                              <CSSMotion
                                                motionAppear={true}
                                                motionDeadline={500}
                                                motionName="ant-show-help"
                                                onLeaveEnd={[Function]}
                                                removeOnLeave={true}
                                                visible={false}
                                              >
                                                <DomWrapper />
                                              </CSSMotion>
                                            </ErrorList>
                                          </div>
                                        </Col>
                                      </FormItemInput>
                                    </div>
                                  </Row>
                                </Field>
                              </WrapperField>
                            </FormItem>
                            <SlugInput>
                              <FormItem
                                label="Slug"
                                name="slug"
                                rules={
                                  Array [
                                    Object {
                                      "message": "Please input the slug!",
                                      "required": true,
                                    },
                                    Object {
                                      "message": "Please enter valid slug!",
                                      "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                                    },
                                  ]
                                }
                              >
                                <WrapperField
                                  label="Slug"
                                  messageVariables={
                                    Object {
                                      "label": "Slug",
                                    }
                                  }
                                  name="slug"
                                  onReset={[Function]}
                                  rules={
                                    Array [
                                      Object {
                                        "message": "Please input the slug!",
                                        "required": true,
                                      },
                                      Object {
                                        "message": "Please enter valid slug!",
                                        "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                                      },
                                    ]
                                  }
                                  trigger="onChange"
                                  validateTrigger="onChange"
                                >
                                  <Field
                                    fieldContext={
                                      Object {
                                        "__INTERNAL__": Object {
                                          "itemRef": [Function],
                                          "name": "create-format",
                                        },
                                        "getFieldError": [Function],
                                        "getFieldInstance": [Function],
                                        "getFieldValue": [Function],
                                        "getFieldsError": [Function],
                                        "getFieldsValue": [Function],
                                        "getInternalHooks": [Function],
                                        "isFieldTouched": [Function],
                                        "isFieldValidating": [Function],
                                        "isFieldsTouched": [Function],
                                        "isFieldsValidating": [Function],
                                        "resetFields": [Function],
                                        "scrollToField": [Function],
                                        "setFields": [Function],
                                        "setFieldsValue": [Function],
                                        "submit": [Function],
                                        "validateFields": [Function],
                                        "validateTrigger": "onChange",
                                      }
                                    }
                                    key="_slug"
                                    label="Slug"
                                    messageVariables={
                                      Object {
                                        "label": "Slug",
                                      }
                                    }
                                    name={
                                      Array [
                                        "slug",
                                      ]
                                    }
                                    onReset={[Function]}
                                    rules={
                                      Array [
                                        Object {
                                          "message": "Please input the slug!",
                                          "required": true,
                                        },
                                        Object {
                                          "message": "Please enter valid slug!",
                                          "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                                        },
                                      ]
                                    }
                                    trigger="onChange"
                                    validateTrigger="onChange"
                                    valuePropName="value"
                                  >
                                    <Row
                                      className="ant-form-item"
                                      key="row"
                                    >
                                      <div
                                        className="ant-row ant-form-item"
                                        style={Object {}}
                                      >
                                        <FormItemLabel
                                          htmlFor="create-format_slug"
                                          label="Slug"
                                          name="slug"
                                          prefixCls="ant-form"
                                          required={true}
                                          requiredMark={true}
                                          rules={
                                            Array [
                                              Object {
                                                "message": "Please input the slug!",
                                                "required": true,
                                              },
                                              Object {
                                                "message": "Please enter valid slug!",
                                                "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                                              },
                                            ]
                                          }
                                        >
                                          <Col
                                            className="ant-form-item-label"
                                          >
                                            <div
                                              className="ant-col ant-form-item-label"
                                              style={Object {}}
                                            >
                                              <label
                                                className="ant-form-item-required"
                                                htmlFor="create-format_slug"
                                                title="Slug"
                                              >
                                                Slug
                                              </label>
                                            </div>
                                          </Col>
                                        </FormItemLabel>
                                        <FormItemInput
                                          errors={Array []}
                                          label="Slug"
                                          name={
                                            Array [
                                              "slug",
                                            ]
                                          }
                                          onDomErrorVisibleChange={[Function]}
                                          prefixCls="ant-form"
                                          rules={
                                            Array [
                                              Object {
                                                "message": "Please input the slug!",
                                                "required": true,
                                              },
                                              Object {
                                                "message": "Please enter valid slug!",
                                                "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                                              },
                                            ]
                                          }
                                          status=""
                                          touched={false}
                                          validateStatus=""
                                          validating={false}
                                        >
                                          <Col
                                            className="ant-form-item-control"
                                          >
                                            <div
                                              className="ant-col ant-form-item-control"
                                              style={Object {}}
                                            >
                                              <div
                                                className="ant-form-item-control-input"
                                              >
                                                <div
                                                  className="ant-form-item-control-input-content"
                                                >
                                                  <Component
                                                    update={1}
                                                  >
                                                    <Input
                                                      id="create-format_slug"
                                                      onChange={[Function]}
                                                      type="text"
                                                    >
                                                      <ClearableLabeledInput
                                                        bordered={true}
                                                        element={
                                                          <input
                                                            className="ant-input"
                                                            id="create-format_slug"
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onFocus={[Function]}
                                                            onKeyDown={[Function]}
                                                            type="text"
                                                          />
                                                        }
                                                        focused={false}
                                                        handleReset={[Function]}
                                                        id="create-format_slug"
                                                        inputType="input"
                                                        onChange={[Function]}
                                                        prefixCls="ant-input"
                                                        triggerFocus={[Function]}
                                                        type="text"
                                                        value=""
                                                      >
                                                        <input
                                                          className="ant-input"
                                                          id="create-format_slug"
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          onFocus={[Function]}
                                                          onKeyDown={[Function]}
                                                          type="text"
                                                          value=""
                                                        />
                                                      </ClearableLabeledInput>
                                                    </Input>
                                                  </Component>
                                                </div>
                                              </div>
                                              <ErrorList
                                                errors={Array []}
                                                onDomErrorVisibleChange={[Function]}
                                              >
                                                <CSSMotion
                                                  motionAppear={true}
                                                  motionDeadline={500}
                                                  motionName="ant-show-help"
                                                  onLeaveEnd={[Function]}
                                                  removeOnLeave={true}
                                                  visible={false}
                                                >
                                                  <DomWrapper />
                                                </CSSMotion>
                                              </ErrorList>
                                            </div>
                                          </Col>
                                        </FormItemInput>
                                      </div>
                                    </Row>
                                  </Field>
                                </WrapperField>
                              </FormItem>
                            </SlugInput>
                            <FormItem
                              label="Featured"
                              name="is_featured"
                              valuePropName="checked"
                            >
                              <WrapperField
                                label="Featured"
                                messageVariables={
                                  Object {
                                    "label": "Featured",
                                  }
                                }
                                name="is_featured"
                                onReset={[Function]}
                                trigger="onChange"
                                validateTrigger="onChange"
                                valuePropName="checked"
                              >
                                <Field
                                  fieldContext={
                                    Object {
                                      "__INTERNAL__": Object {
                                        "itemRef": [Function],
                                        "name": "create-format",
                                      },
                                      "getFieldError": [Function],
                                      "getFieldInstance": [Function],
                                      "getFieldValue": [Function],
                                      "getFieldsError": [Function],
                                      "getFieldsValue": [Function],
                                      "getInternalHooks": [Function],
                                      "isFieldTouched": [Function],
                                      "isFieldValidating": [Function],
                                      "isFieldsTouched": [Function],
                                      "isFieldsValidating": [Function],
                                      "resetFields": [Function],
                                      "scrollToField": [Function],
                                      "setFields": [Function],
                                      "setFieldsValue": [Function],
                                      "submit": [Function],
                                      "validateFields": [Function],
                                      "validateTrigger": "onChange",
                                    }
                                  }
                                  key="_is_featured"
                                  label="Featured"
                                  messageVariables={
                                    Object {
                                      "label": "Featured",
                                    }
                                  }
                                  name={
                                    Array [
                                      "is_featured",
                                    ]
                                  }
                                  onReset={[Function]}
                                  trigger="onChange"
                                  validateTrigger="onChange"
                                  valuePropName="checked"
                                >
                                  <Row
                                    className="ant-form-item"
                                    key="row"
                                  >
                                    <div
                                      className="ant-row ant-form-item"
                                      style={Object {}}
                                    >
                                      <FormItemLabel
                                        htmlFor="create-format_is_featured"
                                        label="Featured"
                                        name="is_featured"
                                        prefixCls="ant-form"
                                        required={false}
                                        requiredMark={true}
                                        valuePropName="checked"
                                      >
                                        <Col
                                          className="ant-form-item-label"
                                        >
                                          <div
                                            className="ant-col ant-form-item-label"
                                            style={Object {}}
                                          >
                                            <label
                                              className=""
                                              htmlFor="create-format_is_featured"
                                              title="Featured"
                                            >
                                              Featured
                                            </label>
                                          </div>
                                        </Col>
                                      </FormItemLabel>
                                      <FormItemInput
                                        errors={Array []}
                                        label="Featured"
                                        name={
                                          Array [
                                            "is_featured",
                                          ]
                                        }
                                        onDomErrorVisibleChange={[Function]}
                                        prefixCls="ant-form"
                                        status=""
                                        touched={false}
                                        validateStatus=""
                                        validating={false}
                                        valuePropName="checked"
                                      >
                                        <Col
                                          className="ant-form-item-control"
                                        >
                                          <div
                                            className="ant-col ant-form-item-control"
                                            style={Object {}}
                                          >
                                            <div
                                              className="ant-form-item-control-input"
                                            >
                                              <div
                                                className="ant-form-item-control-input-content"
                                              >
                                                <Component
                                                  update={1}
                                                >
                                                  <Switch
                                                    id="create-format_is_featured"
                                                    onChange={[Function]}
                                                  >
                                                    <Wave
                                                      insertExtraNode={true}
                                                    >
                                                      <Switch
                                                        className=""
                                                        id="create-format_is_featured"
                                                        loadingIcon={
                                                          <div
                                                            className="ant-switch-handle"
                                                          />
                                                        }
                                                        onChange={[Function]}
                                                        prefixCls="ant-switch"
                                                      >
                                                        <button
                                                          aria-checked={false}
                                                          className="ant-switch"
                                                          id="create-format_is_featured"
                                                          onClick={[Function]}
                                                          onKeyDown={[Function]}
                                                          role="switch"
                                                          type="button"
                                                        >
                                                          <div
                                                            className="ant-switch-handle"
                                                          />
                                                          <span
                                                            className="ant-switch-inner"
                                                          />
                                                        </button>
                                                      </Switch>
                                                    </Wave>
                                                  </Switch>
                                                </Component>
                                              </div>
                                            </div>
                                            <ErrorList
                                              errors={Array []}
                                              onDomErrorVisibleChange={[Function]}
                                            >
                                              <CSSMotion
                                                motionAppear={true}
                                                motionDeadline={500}
                                                motionName="ant-show-help"
                                                onLeaveEnd={[Function]}
                                                removeOnLeave={true}
                                                visible={false}
                                              >
                                                <DomWrapper />
                                              </CSSMotion>
                                            </ErrorList>
                                          </div>
                                        </Col>
                                      </FormItemInput>
                                    </div>
                                  </Row>
                                </Field>
                              </WrapperField>
                            </FormItem>
                          </div>
                        </Col>
                        <Col
                          span={10}
                        >
                          <div
                            className="ant-col ant-col-10"
                            style={
                              Object {
                                "paddingLeft": 20,
                                "paddingRight": 20,
                              }
                            }
                          >
                            <FormItem
                              label="Featured Image"
                              name="medium_id"
                            >
                              <WrapperField
                                label="Featured Image"
                                messageVariables={
                                  Object {
                                    "label": "Featured Image",
                                  }
                                }
                                name="medium_id"
                                onReset={[Function]}
                                trigger="onChange"
                                validateTrigger="onChange"
                              >
                                <Field
                                  fieldContext={
                                    Object {
                                      "__INTERNAL__": Object {
                                        "itemRef": [Function],
                                        "name": "create-format",
                                      },
                                      "getFieldError": [Function],
                                      "getFieldInstance": [Function],
                                      "getFieldValue": [Function],
                                      "getFieldsError": [Function],
                                      "getFieldsValue": [Function],
                                      "getInternalHooks": [Function],
                                      "isFieldTouched": [Function],
                                      "isFieldValidating": [Function],
                                      "isFieldsTouched": [Function],
                                      "isFieldsValidating": [Function],
                                      "resetFields": [Function],
                                      "scrollToField": [Function],
                                      "setFields": [Function],
                                      "setFieldsValue": [Function],
                                      "submit": [Function],
                                      "validateFields": [Function],
                                      "validateTrigger": "onChange",
                                    }
                                  }
                                  key="_medium_id"
                                  label="Featured Image"
                                  messageVariables={
                                    Object {
                                      "label": "Featured Image",
                                    }
                                  }
                                  name={
                                    Array [
                                      "medium_id",
                                    ]
                                  }
                                  onReset={[Function]}
                                  trigger="onChange"
                                  validateTrigger="onChange"
                                  valuePropName="value"
                                >
                                  <Row
                                    className="ant-form-item"
                                    key="row"
                                  >
                                    <div
                                      className="ant-row ant-form-item"
                                      style={Object {}}
                                    >
                                      <FormItemLabel
                                        htmlFor="create-format_medium_id"
                                        label="Featured Image"
                                        name="medium_id"
                                        prefixCls="ant-form"
                                        required={false}
                                        requiredMark={true}
                                      >
                                        <Col
                                          className="ant-form-item-label"
                                        >
                                          <div
                                            className="ant-col ant-form-item-label"
                                            style={Object {}}
                                          >
                                            <label
                                              className=""
                                              htmlFor="create-format_medium_id"
                                              title="Featured Image"
                                            >
                                              Featured Image
                                            </label>
                                          </div>
                                        </Col>
                                      </FormItemLabel>
                                      <FormItemInput
                                        errors={Array []}
                                        label="Featured Image"
                                        name={
                                          Array [
                                            "medium_id",
                                          ]
                                        }
                                        onDomErrorVisibleChange={[Function]}
                                        prefixCls="ant-form"
                                        status=""
                                        touched={false}
                                        validateStatus=""
                                        validating={false}
                                      >
                                        <Col
                                          className="ant-form-item-control"
                                        >
                                          <div
                                            className="ant-col ant-form-item-control"
                                            style={Object {}}
                                          >
                                            <div
                                              className="ant-form-item-control-input"
                                            >
                                              <div
                                                className="ant-form-item-control-input-content"
                                              >
                                                <Component
                                                  update={1}
                                                >
                                                  <MediaSelector
                                                    containerStyles={
                                                      Object {
                                                        "justifyContent": "start",
                                                      }
                                                    }
                                                    id="create-format_medium_id"
                                                    maxWidth="350px"
                                                    onChange={[Function]}
                                                  >
                                                    <Modal
                                                      closable={false}
                                                      confirmLoading={false}
                                                      footer={
                                                        Array [
                                                          <ForwardRef(InternalButton)
                                                            onClick={[Function]}
                                                          >
                                                            Cancel
                                                          </ForwardRef(InternalButton)>,
                                                          <ForwardRef(InternalButton)
                                                            onClick={[Function]}
                                                            type="primary"
                                                          >
                                                            Ok
                                                          </ForwardRef(InternalButton)>,
                                                        ]
                                                      }
                                                      okType="primary"
                                                      onCancel={[Function]}
                                                      visible={false}
                                                      width="800px"
                                                    >
                                                      <Dialog
                                                        closable={false}
                                                        closeIcon={
                                                          <span
                                                            className="ant-modal-close-x"
                                                          >
                                                            <ForwardRef(CloseOutlined)
                                                              className="ant-modal-close-icon"
                                                            />
                                                          </span>
                                                        }
                                                        confirmLoading={false}
                                                        focusTriggerAfterClose={true}
                                                        footer={
                                                          Array [
                                                            <ForwardRef(InternalButton)
                                                              onClick={[Function]}
                                                            >
                                                              Cancel
                                                            </ForwardRef(InternalButton)>,
                                                            <ForwardRef(InternalButton)
                                                              onClick={[Function]}
                                                              type="primary"
                                                            >
                                                              Ok
                                                            </ForwardRef(InternalButton)>,
                                                          ]
                                                        }
                                                        maskTransitionName="ant-fade"
                                                        okType="primary"
                                                        onCancel={[Function]}
                                                        onClose={[Function]}
                                                        prefixCls="ant-modal"
                                                        transitionName="ant-zoom"
                                                        visible={false}
                                                        width="800px"
                                                        wrapClassName=""
                                                      >
                                                        <PortalWrapper
                                                          visible={false}
                                                        />
                                                      </Dialog>
                                                    </Modal>
                                                    <Space
                                                      direction="vertical"
                                                    >
                                                      <div
                                                        className="ant-space ant-space-vertical"
                                                        style={Object {}}
                                                      >
                                                        <Item
                                                          className="ant-space-item"
                                                          direction="vertical"
                                                          index={0}
                                                          key="ant-space-item-0"
                                                          marginDirection="marginRight"
                                                          wrap={false}
                                                        >
                                                          <div
                                                            className="ant-space-item"
                                                            style={Object {}}
                                                          >
                                                            <div
                                                              style={
                                                                Object {
                                                                  "alignItems": "center",
                                                                  "display": "flex",
                                                                  "justifyContent": "start",
                                                                }
                                                              }
                                                            >
                                                              <div
                                                                style={
                                                                  Object {
                                                                    "position": "relative",
                                                                  }
                                                                }
                                                              >
                                                                <Button
                                                                  onClick={[Function]}
                                                                  style={
                                                                    Object {
                                                                      "background": "transparent",
                                                                      "borderStyle": "dashed",
                                                                      "display": "block",
                                                                      "height": "auto",
                                                                    }
                                                                  }
                                                                >
                                                                  <Wave>
                                                                    <button
                                                                      className="ant-btn"
                                                                      onClick={[Function]}
                                                                      style={
                                                                        Object {
                                                                          "background": "transparent",
                                                                          "borderStyle": "dashed",
                                                                          "display": "block",
                                                                          "height": "auto",
                                                                        }
                                                                      }
                                                                      type="button"
                                                                    >
                                                                      <LoadingIcon
                                                                        existIcon={false}
                                                                        loading={false}
                                                                        prefixCls="ant-btn"
                                                                      >
                                                                        <CSSMotion
                                                                          motionName="ant-btn-loading-icon-motion"
                                                                          onAppearActive={[Function]}
                                                                          onAppearStart={[Function]}
                                                                          onEnterActive={[Function]}
                                                                          onEnterStart={[Function]}
                                                                          onLeaveActive={[Function]}
                                                                          onLeaveStart={[Function]}
                                                                          removeOnLeave={true}
                                                                          visible={false}
                                                                        >
                                                                          <DomWrapper />
                                                                        </CSSMotion>
                                                                      </LoadingIcon>
                                                                      <img
                                                                        key=".0"
                                                                        width="100%"
                                                                      />
                                                                    </button>
                                                                  </Wave>
                                                                </Button>
                                                                <Button
                                                                  onClick={[Function]}
                                                                  style={
                                                                    Object {
                                                                      "bottom": 0,
                                                                      "left": 0,
                                                                      "maxWidth": "52px",
                                                                      "position": "absolute",
                                                                    }
                                                                  }
                                                                >
                                                                  <Wave>
                                                                    <button
                                                                      className="ant-btn"
                                                                      onClick={[Function]}
                                                                      style={
                                                                        Object {
                                                                          "bottom": 0,
                                                                          "left": 0,
                                                                          "maxWidth": "52px",
                                                                          "position": "absolute",
                                                                        }
                                                                      }
                                                                      type="button"
                                                                    >
                                                                      <LoadingIcon
                                                                        existIcon={false}
                                                                        loading={false}
                                                                        prefixCls="ant-btn"
                                                                      >
                                                                        <CSSMotion
                                                                          motionName="ant-btn-loading-icon-motion"
                                                                          onAppearActive={[Function]}
                                                                          onAppearStart={[Function]}
                                                                          onEnterActive={[Function]}
                                                                          onEnterStart={[Function]}
                                                                          onLeaveActive={[Function]}
                                                                          onLeaveStart={[Function]}
                                                                          removeOnLeave={true}
                                                                          visible={false}
                                                                        >
                                                                          <DomWrapper />
                                                                        </CSSMotion>
                                                                      </LoadingIcon>
                                                                      <ForwardRef(DeleteOutlined)
                                                                        key=".0"
                                                                      >
                                                                        <AntdIcon
                                                                          icon={
                                                                            Object {
                                                                              "icon": Object {
                                                                                "attrs": Object {
                                                                                  "focusable": "false",
                                                                                  "viewBox": "64 64 896 896",
                                                                                },
                                                                                "children": Array [
                                                                                  Object {
                                                                                    "attrs": Object {
                                                                                      "d": "M360 184h-8c4.4 0 8-3.6 8-8v8h304v-8c0 4.4 3.6 8 8 8h-8v72h72v-80c0-35.3-28.7-64-64-64H352c-35.3 0-64 28.7-64 64v80h72v-72zm504 72H160c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h60.4l24.7 523c1.6 34.1 29.8 61 63.9 61h454c34.2 0 62.3-26.8 63.9-61l24.7-523H888c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zM731.3 840H292.7l-24.2-512h487l-24.2 512z",
                                                                                    },
                                                                                    "tag": "path",
                                                                                  },
                                                                                ],
                                                                                "tag": "svg",
                                                                              },
                                                                              "name": "delete",
                                                                              "theme": "outlined",
                                                                            }
                                                                          }
                                                                        >
                                                                          <span
                                                                            aria-label="delete"
                                                                            className="anticon anticon-delete"
                                                                            role="img"
                                                                          >
                                                                            <IconReact
                                                                              icon={
                                                                                Object {
                                                                                  "icon": Object {
                                                                                    "attrs": Object {
                                                                                      "focusable": "false",
                                                                                      "viewBox": "64 64 896 896",
                                                                                    },
                                                                                    "children": Array [
                                                                                      Object {
                                                                                        "attrs": Object {
                                                                                          "d": "M360 184h-8c4.4 0 8-3.6 8-8v8h304v-8c0 4.4 3.6 8 8 8h-8v72h72v-80c0-35.3-28.7-64-64-64H352c-35.3 0-64 28.7-64 64v80h72v-72zm504 72H160c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h60.4l24.7 523c1.6 34.1 29.8 61 63.9 61h454c34.2 0 62.3-26.8 63.9-61l24.7-523H888c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zM731.3 840H292.7l-24.2-512h487l-24.2 512z",
                                                                                        },
                                                                                        "tag": "path",
                                                                                      },
                                                                                    ],
                                                                                    "tag": "svg",
                                                                                  },
                                                                                  "name": "delete",
                                                                                  "theme": "outlined",
                                                                                }
                                                                              }
                                                                            >
                                                                              <svg
                                                                                aria-hidden="true"
                                                                                data-icon="delete"
                                                                                fill="currentColor"
                                                                                focusable="false"
                                                                                height="1em"
                                                                                key="svg-delete"
                                                                                viewBox="64 64 896 896"
                                                                                width="1em"
                                                                              >
                                                                                <path
                                                                                  d="M360 184h-8c4.4 0 8-3.6 8-8v8h304v-8c0 4.4 3.6 8 8 8h-8v72h72v-80c0-35.3-28.7-64-64-64H352c-35.3 0-64 28.7-64 64v80h72v-72zm504 72H160c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h60.4l24.7 523c1.6 34.1 29.8 61 63.9 61h454c34.2 0 62.3-26.8 63.9-61l24.7-523H888c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zM731.3 840H292.7l-24.2-512h487l-24.2 512z"
                                                                                  key="svg-delete-svg-0"
                                                                                />
                                                                              </svg>
                                                                            </IconReact>
                                                                          </span>
                                                                        </AntdIcon>
                                                                      </ForwardRef(DeleteOutlined)>
                                                                    </button>
                                                                  </Wave>
                                                                </Button>
                                                              </div>
                                                            </div>
                                                          </div>
                                                        </Item>
                                                      </div>
                                                    </Space>
                                                  </MediaSelector>
                                                </Component>
                                              </div>
                                            </div>
                                            <ErrorList
                                              errors={Array []}
                                              onDomErrorVisibleChange={[Function]}
                                            >
                                              <CSSMotion
                                                motionAppear={true}
                                                motionDeadline={500}
                                                motionName="ant-show-help"
                                                onLeaveEnd={[Function]}
                                                removeOnLeave={true}
                                                visible={false}
                                              >
                                                <DomWrapper />
                                              </CSSMotion>
                                            </ErrorList>
                                          </div>
                                        </Col>
                                      </FormItemInput>
                                    </div>
                                  </Row>
                                </Field>
                              </WrapperField>
                            </FormItem>
                          </div>
                        </Col>
                        <Col
                          span={12}
                          style={
                            Object {
                              "marginLeft": "20px",
                              "marginRight": "auto",
                            }
                          }
                        >
                          <div
                            className="ant-col ant-col-12"
                            style={
                              Object {
                                "marginLeft": "20px",
                                "marginRight": "auto",
                                "paddingLeft": 20,
                                "paddingRight": 20,
                              }
                            }
                          >
                            <FormItem
                              label="Description"
                              name="description"
                            >
                              <WrapperField
                                label="Description"
                                messageVariables={
                                  Object {
                                    "label": "Description",
                                  }
                                }
                                name="description"
                                onReset={[Function]}
                                trigger="onChange"
                                validateTrigger="onChange"
                              >
                                <Field
                                  fieldContext={
                                    Object {
                                      "__INTERNAL__": Object {
                                        "itemRef": [Function],
                                        "name": "create-format",
                                      },
                                      "getFieldError": [Function],
                                      "getFieldInstance": [Function],
                                      "getFieldValue": [Function],
                                      "getFieldsError": [Function],
                                      "getFieldsValue": [Function],
                                      "getInternalHooks": [Function],
                                      "isFieldTouched": [Function],
                                      "isFieldValidating": [Function],
                                      "isFieldsTouched": [Function],
                                      "isFieldsValidating": [Function],
                                      "resetFields": [Function],
                                      "scrollToField": [Function],
                                      "setFields": [Function],
                                      "setFieldsValue": [Function],
                                      "submit": [Function],
                                      "validateFields": [Function],
                                      "validateTrigger": "onChange",
                                    }
                                  }
                                  key="_description"
                                  label="Description"
                                  messageVariables={
                                    Object {
                                      "label": "Description",
                                    }
                                  }
                                  name={
                                    Array [
                                      "description",
                                    ]
                                  }
                                  onReset={[Function]}
                                  trigger="onChange"
                                  validateTrigger="onChange"
                                  valuePropName="value"
                                >
                                  <Row
                                    className="ant-form-item"
                                    key="row"
                                  >
                                    <div
                                      className="ant-row ant-form-item"
                                      style={Object {}}
                                    >
                                      <FormItemLabel
                                        htmlFor="create-format_description"
                                        label="Description"
                                        name="description"
                                        prefixCls="ant-form"
                                        required={false}
                                        requiredMark={true}
                                      >
                                        <Col
                                          className="ant-form-item-label"
                                        >
                                          <div
                                            className="ant-col ant-form-item-label"
                                            style={Object {}}
                                          >
                                            <label
                                              className=""
                                              htmlFor="create-format_description"
                                              title="Description"
                                            >
                                              Description
                                            </label>
                                          </div>
                                        </Col>
                                      </FormItemLabel>
                                      <FormItemInput
                                        errors={Array []}
                                        label="Description"
                                        name={
                                          Array [
                                            "description",
                                          ]
                                        }
                                        onDomErrorVisibleChange={[Function]}
                                        prefixCls="ant-form"
                                        status=""
                                        touched={false}
                                        validateStatus=""
                                        validating={false}
                                      >
                                        <Col
                                          className="ant-form-item-control"
                                        >
                                          <div
                                            className="ant-col ant-form-item-control"
                                            style={Object {}}
                                          >
                                            <div
                                              className="ant-form-item-control-input"
                                            >
                                              <div
                                                className="ant-form-item-control-input-content"
                                              >
                                                <Component
                                                  update={1}
                                                >
                                                  <ForwardRef
                                                    id="create-format_description"
                                                    onChange={[Function]}
                                                  >
                                                    <ClearableLabeledInput
                                                      bordered={true}
                                                      element={
                                                        <TextArea
                                                          className=""
                                                          id="create-format_description"
                                                          onChange={[Function]}
                                                          onCompositionEnd={[Function]}
                                                          onCompositionStart={[Function]}
                                                          prefixCls="ant-input"
                                                        />
                                                      }
                                                      handleReset={[Function]}
                                                      id="create-format_description"
                                                      inputType="text"
                                                      prefixCls="ant-input"
                                                      value=""
                                                    >
                                                      <TextArea
                                                        className=""
                                                        id="create-format_description"
                                                        onChange={[Function]}
                                                        onCompositionEnd={[Function]}
                                                        onCompositionStart={[Function]}
                                                        prefixCls="ant-input"
                                                        value=""
                                                      >
                                                        <ResizableTextArea
                                                          className=""
                                                          id="create-format_description"
                                                          onChange={[Function]}
                                                          onCompositionEnd={[Function]}
                                                          onCompositionStart={[Function]}
                                                          onKeyDown={[Function]}
                                                          prefixCls="ant-input"
                                                          value=""
                                                        >
                                                          <ResizeObserver
                                                            disabled={true}
                                                            onResize={[Function]}
                                                          >
                                                            <textarea
                                                              className="ant-input"
                                                              id="create-format_description"
                                                              onChange={[Function]}
                                                              onCompositionEnd={[Function]}
                                                              onCompositionStart={[Function]}
                                                              onKeyDown={[Function]}
                                                              style={Object {}}
                                                              value=""
                                                            />
                                                          </ResizeObserver>
                                                        </ResizableTextArea>
                                                      </TextArea>
                                                    </ClearableLabeledInput>
                                                  </ForwardRef>
                                                </Component>
                                              </div>
                                            </div>
                                            <ErrorList
                                              errors={Array []}
                                              onDomErrorVisibleChange={[Function]}
                                            >
                                              <CSSMotion
                                                motionAppear={true}
                                                motionDeadline={500}
                                                motionName="ant-show-help"
                                                onLeaveEnd={[Function]}
                                                removeOnLeave={true}
                                                visible={false}
                                              >
                                                <DomWrapper />
                                              </CSSMotion>
                                            </ErrorList>
                                          </div>
                                        </Col>
                                      </FormItemInput>
                                    </div>
                                  </Row>
                                </Field>
                              </WrapperField>
                            </FormItem>
                          </div>
                        </Col>
                      </div>
                    </Row>
                  </div>
                </Col>
                <Col
                  span={24}
                >
                  <div
                    className="ant-col ant-col-24"
                    style={Object {}}
                  >
                    <Row
                      gutter={40}
                      style={
                        Object {
                          "background": "#f0f2f5",
                        }
                      }
                    >
                      <div
                        className="ant-row"
                        style={
                          Object {
                            "background": "#f0f2f5",
                            "marginLeft": -20,
                            "marginRight": -20,
                          }
                        }
                      >
                        <MetaForm>
                          <Collapse
                            expandIcon={[Function]}
                            expandIconPosition="right"
                            style={
                              Object {
                                "width": "100%",
                              }
                            }
                          >
                            <Collapse
                              accordion={false}
                              bordered={true}
                              className="ant-collapse-icon-position-right"
                              destroyInactivePanel={false}
                              expandIcon={[Function]}
                              expandIconPosition="right"
                              onChange={[Function]}
                              openMotion={
                                Object {
                                  "leavedClassName": "ant-collapse-content-hidden",
                                  "motionAppear": false,
                                  "motionDeadline": 500,
                                  "motionName": "ant-motion-collapse",
                                  "onAppearActive": [Function],
                                  "onAppearEnd": [Function],
                                  "onAppearStart": [Function],
                                  "onEnterActive": [Function],
                                  "onEnterEnd": [Function],
                                  "onEnterStart": [Function],
                                  "onLeaveActive": [Function],
                                  "onLeaveEnd": [Function],
                                  "onLeaveStart": [Function],
                                }
                              }
                              prefixCls="ant-collapse"
                              style={
                                Object {
                                  "width": "100%",
                                }
                              }
                            >
                              <div
                                className="ant-collapse ant-collapse-icon-position-right"
                                role={null}
                                style={
                                  Object {
                                    "width": "100%",
                                  }
                                }
                              >
                                <CollapsePanel
                                  accordion={false}
                                  destroyInactivePanel={false}
                                  expandIcon={[Function]}
                                  header="Meta Data"
                                  isActive={false}
                                  key="0"
                                  onItemClick={[Function]}
                                  openMotion={
                                    Object {
                                      "leavedClassName": "ant-collapse-content-hidden",
                                      "motionAppear": false,
                                      "motionDeadline": 500,
                                      "motionName": "ant-motion-collapse",
                                      "onAppearActive": [Function],
                                      "onAppearEnd": [Function],
                                      "onAppearStart": [Function],
                                      "onEnterActive": [Function],
                                      "onEnterEnd": [Function],
                                      "onEnterStart": [Function],
                                      "onLeaveActive": [Function],
                                      "onLeaveEnd": [Function],
                                      "onLeaveStart": [Function],
                                    }
                                  }
                                  panelKey="0"
                                  prefixCls="ant-collapse"
                                >
                                  <CollapsePanel
                                    accordion={false}
                                    className=""
                                    destroyInactivePanel={false}
                                    expandIcon={[Function]}
                                    forceRender={false}
                                    header="Meta Data"
                                    headerClass=""
                                    isActive={false}
                                    onItemClick={[Function]}
                                    openMotion={
                                      Object {
                                        "leavedClassName": "ant-collapse-content-hidden",
                                        "motionAppear": false,
                                        "motionDeadline": 500,
                                        "motionName": "ant-motion-collapse",
                                        "onAppearActive": [Function],
                                        "onAppearEnd": [Function],
                                        "onAppearStart": [Function],
                                        "onEnterActive": [Function],
                                        "onEnterEnd": [Function],
                                        "onEnterStart": [Function],
                                        "onLeaveActive": [Function],
                                        "onLeaveEnd": [Function],
                                        "onLeaveStart": [Function],
                                      }
                                    }
                                    panelKey="0"
                                    prefixCls="ant-collapse"
                                    showArrow={true}
                                  >
                                    <div
                                      className="ant-collapse-item"
                                    >
                                      <div
                                        aria-expanded={false}
                                        className="ant-collapse-header"
                                        onClick={[Function]}
                                        onKeyPress={[Function]}
                                        role="button"
                                        tabIndex={0}
                                      >
                                        <Button
                                          className="ant-collapse-arrow"
                                        >
                                          <Wave>
                                            <button
                                              className="ant-btn ant-collapse-arrow"
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <LoadingIcon
                                                existIcon={false}
                                                loading={false}
                                                prefixCls="ant-btn"
                                              >
                                                <CSSMotion
                                                  motionName="ant-btn-loading-icon-motion"
                                                  onAppearActive={[Function]}
                                                  onAppearStart={[Function]}
                                                  onEnterActive={[Function]}
                                                  onEnterStart={[Function]}
                                                  onLeaveActive={[Function]}
                                                  onLeaveStart={[Function]}
                                                  removeOnLeave={true}
                                                  visible={false}
                                                >
                                                  <DomWrapper />
                                                </CSSMotion>
                                              </LoadingIcon>
                                              <span
                                                key=".0"
                                              >
                                                Expand
                                              </span>
                                            </button>
                                          </Wave>
                                        </Button>
                                        Meta Data
                                      </div>
                                      <CSSMotion
                                        forceRender={false}
                                        leavedClassName="ant-collapse-content-hidden"
                                        motionAppear={false}
                                        motionDeadline={500}
                                        motionName="ant-motion-collapse"
                                        onAppearActive={[Function]}
                                        onAppearEnd={[Function]}
                                        onAppearStart={[Function]}
                                        onEnterActive={[Function]}
                                        onEnterEnd={[Function]}
                                        onEnterStart={[Function]}
                                        onLeaveActive={[Function]}
                                        onLeaveEnd={[Function]}
                                        onLeaveStart={[Function]}
                                        removeOnLeave={false}
                                        visible={false}
                                      >
                                        <DomWrapper />
                                      </CSSMotion>
                                    </div>
                                  </CollapsePanel>
                                </CollapsePanel>
                                <CollapsePanel
                                  accordion={false}
                                  destroyInactivePanel={false}
                                  expandIcon={[Function]}
                                  header="Code Injection"
                                  isActive={false}
                                  key="1"
                                  onItemClick={[Function]}
                                  openMotion={
                                    Object {
                                      "leavedClassName": "ant-collapse-content-hidden",
                                      "motionAppear": false,
                                      "motionDeadline": 500,
                                      "motionName": "ant-motion-collapse",
                                      "onAppearActive": [Function],
                                      "onAppearEnd": [Function],
                                      "onAppearStart": [Function],
                                      "onEnterActive": [Function],
                                      "onEnterEnd": [Function],
                                      "onEnterStart": [Function],
                                      "onLeaveActive": [Function],
                                      "onLeaveEnd": [Function],
                                      "onLeaveStart": [Function],
                                    }
                                  }
                                  panelKey="1"
                                  prefixCls="ant-collapse"
                                >
                                  <CollapsePanel
                                    accordion={false}
                                    className=""
                                    destroyInactivePanel={false}
                                    expandIcon={[Function]}
                                    forceRender={false}
                                    header="Code Injection"
                                    headerClass=""
                                    isActive={false}
                                    onItemClick={[Function]}
                                    openMotion={
                                      Object {
                                        "leavedClassName": "ant-collapse-content-hidden",
                                        "motionAppear": false,
                                        "motionDeadline": 500,
                                        "motionName": "ant-motion-collapse",
                                        "onAppearActive": [Function],
                                        "onAppearEnd": [Function],
                                        "onAppearStart": [Function],
                                        "onEnterActive": [Function],
                                        "onEnterEnd": [Function],
                                        "onEnterStart": [Function],
                                        "onLeaveActive": [Function],
                                        "onLeaveEnd": [Function],
                                        "onLeaveStart": [Function],
                                      }
                                    }
                                    panelKey="1"
                                    prefixCls="ant-collapse"
                                    showArrow={true}
                                  >
                                    <div
                                      className="ant-collapse-item"
                                    >
                                      <div
                                        aria-expanded={false}
                                        className="ant-collapse-header"
                                        onClick={[Function]}
                                        onKeyPress={[Function]}
                                        role="button"
                                        tabIndex={0}
                                      >
                                        <Button
                                          className="ant-collapse-arrow"
                                        >
                                          <Wave>
                                            <button
                                              className="ant-btn ant-collapse-arrow"
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <LoadingIcon
                                                existIcon={false}
                                                loading={false}
                                                prefixCls="ant-btn"
                                              >
                                                <CSSMotion
                                                  motionName="ant-btn-loading-icon-motion"
                                                  onAppearActive={[Function]}
                                                  onAppearStart={[Function]}
                                                  onEnterActive={[Function]}
                                                  onEnterStart={[Function]}
                                                  onLeaveActive={[Function]}
                                                  onLeaveStart={[Function]}
                                                  removeOnLeave={true}
                                                  visible={false}
                                                >
                                                  <DomWrapper />
                                                </CSSMotion>
                                              </LoadingIcon>
                                              <span
                                                key=".0"
                                              >
                                                Expand
                                              </span>
                                            </button>
                                          </Wave>
                                        </Button>
                                        Code Injection
                                      </div>
                                      <CSSMotion
                                        forceRender={false}
                                        leavedClassName="ant-collapse-content-hidden"
                                        motionAppear={false}
                                        motionDeadline={500}
                                        motionName="ant-motion-collapse"
                                        onAppearActive={[Function]}
                                        onAppearEnd={[Function]}
                                        onAppearStart={[Function]}
                                        onEnterActive={[Function]}
                                        onEnterEnd={[Function]}
                                        onEnterStart={[Function]}
                                        onLeaveActive={[Function]}
                                        onLeaveEnd={[Function]}
                                        onLeaveStart={[Function]}
                                        removeOnLeave={false}
                                        visible={false}
                                      >
                                        <DomWrapper />
                                      </CSSMotion>
                                    </div>
                                  </CollapsePanel>
                                </CollapsePanel>
                              </div>
                            </Collapse>
                          </Collapse>
                          <Collapse
                            expandIcon={[Function]}
                            expandIconPosition="right"
                            style={
                              Object {
                                "width": "100%",
                              }
                            }
                          >
                            <Collapse
                              accordion={false}
                              bordered={true}
                              className="ant-collapse-icon-position-right"
                              destroyInactivePanel={false}
                              expandIcon={[Function]}
                              expandIconPosition="right"
                              onChange={[Function]}
                              openMotion={
                                Object {
                                  "leavedClassName": "ant-collapse-content-hidden",
                                  "motionAppear": false,
                                  "motionDeadline": 500,
                                  "motionName": "ant-motion-collapse",
                                  "onAppearActive": [Function],
                                  "onAppearEnd": [Function],
                                  "onAppearStart": [Function],
                                  "onEnterActive": [Function],
                                  "onEnterEnd": [Function],
                                  "onEnterStart": [Function],
                                  "onLeaveActive": [Function],
                                  "onLeaveEnd": [Function],
                                  "onLeaveStart": [Function],
                                }
                              }
                              prefixCls="ant-collapse"
                              style={
                                Object {
                                  "width": "100%",
                                }
                              }
                            >
                              <div
                                className="ant-collapse ant-collapse-icon-position-right"
                                role={null}
                                style={
                                  Object {
                                    "width": "100%",
                                  }
                                }
                              >
                                <CollapsePanel
                                  accordion={false}
                                  destroyInactivePanel={false}
                                  expandIcon={[Function]}
                                  header="Meta Fields"
                                  isActive={false}
                                  key="0"
                                  onItemClick={[Function]}
                                  openMotion={
                                    Object {
                                      "leavedClassName": "ant-collapse-content-hidden",
                                      "motionAppear": false,
                                      "motionDeadline": 500,
                                      "motionName": "ant-motion-collapse",
                                      "onAppearActive": [Function],
                                      "onAppearEnd": [Function],
                                      "onAppearStart": [Function],
                                      "onEnterActive": [Function],
                                      "onEnterEnd": [Function],
                                      "onEnterStart": [Function],
                                      "onLeaveActive": [Function],
                                      "onLeaveEnd": [Function],
                                      "onLeaveStart": [Function],
                                    }
                                  }
                                  panelKey="0"
                                  prefixCls="ant-collapse"
                                >
                                  <CollapsePanel
                                    accordion={false}
                                    className=""
                                    destroyInactivePanel={false}
                                    expandIcon={[Function]}
                                    forceRender={false}
                                    header="Meta Fields"
                                    headerClass=""
                                    isActive={false}
                                    onItemClick={[Function]}
                                    openMotion={
                                      Object {
                                        "leavedClassName": "ant-collapse-content-hidden",
                                        "motionAppear": false,
                                        "motionDeadline": 500,
                                        "motionName": "ant-motion-collapse",
                                        "onAppearActive": [Function],
                                        "onAppearEnd": [Function],
                                        "onAppearStart": [Function],
                                        "onEnterActive": [Function],
                                        "onEnterEnd": [Function],
                                        "onEnterStart": [Function],
                                        "onLeaveActive": [Function],
                                        "onLeaveEnd": [Function],
                                        "onLeaveStart": [Function],
                                      }
                                    }
                                    panelKey="0"
                                    prefixCls="ant-collapse"
                                    showArrow={true}
                                  >
                                    <div
                                      className="ant-collapse-item"
                                    >
                                      <div
                                        aria-expanded={false}
                                        className="ant-collapse-header"
                                        onClick={[Function]}
                                        onKeyPress={[Function]}
                                        role="button"
                                        tabIndex={0}
                                      >
                                        <Button
                                          className="ant-collapse-arrow"
                                        >
                                          <Wave>
                                            <button
                                              className="ant-btn ant-collapse-arrow"
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <LoadingIcon
                                                existIcon={false}
                                                loading={false}
                                                prefixCls="ant-btn"
                                              >
                                                <CSSMotion
                                                  motionName="ant-btn-loading-icon-motion"
                                                  onAppearActive={[Function]}
                                                  onAppearStart={[Function]}
                                                  onEnterActive={[Function]}
                                                  onEnterStart={[Function]}
                                                  onLeaveActive={[Function]}
                                                  onLeaveStart={[Function]}
                                                  removeOnLeave={true}
                                                  visible={false}
                                                >
                                                  <DomWrapper />
                                                </CSSMotion>
                                              </LoadingIcon>
                                              <span
                                                key=".0"
                                              >
                                                Expand
                                              </span>
                                            </button>
                                          </Wave>
                                        </Button>
                                        Meta Fields
                                      </div>
                                      <CSSMotion
                                        forceRender={false}
                                        leavedClassName="ant-collapse-content-hidden"
                                        motionAppear={false}
                                        motionDeadline={500}
                                        motionName="ant-motion-collapse"
                                        onAppearActive={[Function]}
                                        onAppearEnd={[Function]}
                                        onAppearStart={[Function]}
                                        onEnterActive={[Function]}
                                        onEnterEnd={[Function]}
                                        onEnterStart={[Function]}
                                        onLeaveActive={[Function]}
                                        onLeaveEnd={[Function]}
                                        onLeaveStart={[Function]}
                                        removeOnLeave={false}
                                        visible={false}
                                      >
                                        <DomWrapper />
                                      </CSSMotion>
                                    </div>
                                  </CollapsePanel>
                                </CollapsePanel>
                              </div>
                            </Collapse>
                          </Collapse>
                        </MetaForm>
                      </div>
                    </Row>
                  </div>
                </Col>
              </div>
            </Row>
          </form>
        </ForwardRef(Form)>
      </SizeContextProvider>
    </ForwardRef(InternalForm)>
  </FormatForm>
</Provider>
`;

// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Spaces create component snapshot testing should render the component 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [MockFunction],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <CreateSpace>
    <HelmetWrapper
      defer={true}
      encodeSpecialCharacters={true}
      title="Create Space"
    >
      <SideEffect(NullComponent)
        defer={true}
        encodeSpecialCharacters={true}
        title="Create Space"
      >
        <NullComponent
          defer={true}
          encodeSpecialCharacters={true}
          title="Create Space"
        />
      </SideEffect(NullComponent)>
    </HelmetWrapper>
    <SpaceCreateForm
      onCreate={[Function]}
    >
      <ForwardRef(InternalForm)
        form={
          Object {
            "__INTERNAL__": Object {
              "itemRef": [Function],
              "name": "create-space",
            },
            "getFieldError": [Function],
            "getFieldInstance": [Function],
            "getFieldValue": [Function],
            "getFieldsError": [Function],
            "getFieldsValue": [Function],
            "getInternalHooks": [Function],
            "isFieldTouched": [Function],
            "isFieldValidating": [Function],
            "isFieldsTouched": [Function],
            "isFieldsValidating": [Function],
            "resetFields": [Function],
            "scrollToField": [Function],
            "setFields": [Function],
            "setFieldsValue": [Function],
            "submit": [Function],
            "validateFields": [Function],
          }
        }
        labelCol={
          Object {
            "span": 8,
          }
        }
        name="create-space"
        onFinish={[Function]}
        style={
          Object {
            "paddingTop": "24px",
          }
        }
        wrapperCol={
          Object {
            "span": 8,
          }
        }
      >
        <SizeContextProvider>
          <ForwardRef(Form)
            className="ant-form ant-form-horizontal"
            form={
              Object {
                "__INTERNAL__": Object {
                  "itemRef": [Function],
                  "name": "create-space",
                },
                "getFieldError": [Function],
                "getFieldInstance": [Function],
                "getFieldValue": [Function],
                "getFieldsError": [Function],
                "getFieldsValue": [Function],
                "getInternalHooks": [Function],
                "isFieldTouched": [Function],
                "isFieldValidating": [Function],
                "isFieldsTouched": [Function],
                "isFieldsValidating": [Function],
                "resetFields": [Function],
                "scrollToField": [Function],
                "setFields": [Function],
                "setFieldsValue": [Function],
                "submit": [Function],
                "validateFields": [Function],
              }
            }
            id="create-space"
            name="create-space"
            onFinish={[Function]}
            onFinishFailed={[Function]}
            style={
              Object {
                "paddingTop": "24px",
              }
            }
          >
            <form
              className="ant-form ant-form-horizontal"
              id="create-space"
              onReset={[Function]}
              onSubmit={[Function]}
              style={
                Object {
                  "paddingTop": "24px",
                }
              }
            >
              <FormItem
                label="Name"
              >
                <Row
                  className="ant-form-item"
                  key="row"
                >
                  <div
                    className="ant-row ant-form-item"
                    style={Object {}}
                  >
                    <FormItemLabel
                      label="Name"
                      prefixCls="ant-form"
                      requiredMark={true}
                    >
                      <Col
                        className="ant-form-item-label"
                        span={8}
                      >
                        <div
                          className="ant-col ant-col-8 ant-form-item-label"
                          style={Object {}}
                        >
                          <label
                            className=""
                            title="Name"
                          >
                            Name
                          </label>
                        </div>
                      </Col>
                    </FormItemLabel>
                    <FormItemInput
                      errors={Array []}
                      label="Name"
                      onDomErrorVisibleChange={[Function]}
                      prefixCls="ant-form"
                      status=""
                      validateStatus=""
                    >
                      <Col
                        className="ant-form-item-control"
                        span={8}
                      >
                        <div
                          className="ant-col ant-col-8 ant-form-item-control"
                          style={Object {}}
                        >
                          <div
                            className="ant-form-item-control-input"
                          >
                            <div
                              className="ant-form-item-control-input-content"
                            >
                              <Group
                                compact={true}
                              >
                                <span
                                  className="ant-input-group ant-input-group-compact"
                                >
                                  <FormItem
                                    name="organisation_id"
                                    noStyle={true}
                                    rules={
                                      Array [
                                        Object {
                                          "message": "organisation is required",
                                          "required": true,
                                        },
                                      ]
                                    }
                                  >
                                    <WrapperField
                                      messageVariables={
                                        Object {
                                          "label": "organisation_id",
                                        }
                                      }
                                      name="organisation_id"
                                      noStyle={true}
                                      onReset={[Function]}
                                      rules={
                                        Array [
                                          Object {
                                            "message": "organisation is required",
                                            "required": true,
                                          },
                                        ]
                                      }
                                      trigger="onChange"
                                      validateTrigger="onChange"
                                    >
                                      <Field
                                        fieldContext={
                                          Object {
                                            "__INTERNAL__": Object {
                                              "itemRef": [Function],
                                              "name": "create-space",
                                            },
                                            "getFieldError": [Function],
                                            "getFieldInstance": [Function],
                                            "getFieldValue": [Function],
                                            "getFieldsError": [Function],
                                            "getFieldsValue": [Function],
                                            "getInternalHooks": [Function],
                                            "isFieldTouched": [Function],
                                            "isFieldValidating": [Function],
                                            "isFieldsTouched": [Function],
                                            "isFieldsValidating": [Function],
                                            "resetFields": [Function],
                                            "scrollToField": [Function],
                                            "setFields": [Function],
                                            "setFieldsValue": [Function],
                                            "submit": [Function],
                                            "validateFields": [Function],
                                            "validateTrigger": "onChange",
                                          }
                                        }
                                        key="_organisation_id"
                                        messageVariables={
                                          Object {
                                            "label": "organisation_id",
                                          }
                                        }
                                        name={
                                          Array [
                                            "organisation_id",
                                          ]
                                        }
                                        noStyle={true}
                                        onReset={[Function]}
                                        rules={
                                          Array [
                                            Object {
                                              "message": "organisation is required",
                                              "required": true,
                                            },
                                          ]
                                        }
                                        trigger="onChange"
                                        validateTrigger="onChange"
                                        valuePropName="value"
                                      >
                                        <Component
                                          update={1}
                                        >
                                          <ForwardRef(InternalSelect)
                                            id="create-space_organisation_id"
                                            onChange={[Function]}
                                            placeholder="Select organisation"
                                            style={
                                              Object {
                                                "width": "40%",
                                              }
                                            }
                                          >
                                            <Select
                                              className=""
                                              clearIcon={<ForwardRef(CloseCircleFilled) />}
                                              dropdownClassName=""
                                              id="create-space_organisation_id"
                                              inputIcon={[Function]}
                                              listHeight={256}
                                              listItemHeight={24}
                                              menuItemSelectedIcon={null}
                                              notFoundContent={
                                                <Context.Consumer>
                                                  [Function]
                                                </Context.Consumer>
                                              }
                                              onChange={[Function]}
                                              placeholder="Select organisation"
                                              prefixCls="ant-select"
                                              removeIcon={<ForwardRef(CloseOutlined) />}
                                              style={
                                                Object {
                                                  "width": "40%",
                                                }
                                              }
                                              transitionName="ant-slide-up"
                                            >
                                              <ForwardRef(Select)
                                                className=""
                                                clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                dropdownClassName=""
                                                id="create-space_organisation_id"
                                                inputIcon={[Function]}
                                                listHeight={256}
                                                listItemHeight={24}
                                                menuItemSelectedIcon={null}
                                                notFoundContent={
                                                  <Context.Consumer>
                                                    [Function]
                                                  </Context.Consumer>
                                                }
                                                onChange={[Function]}
                                                placeholder="Select organisation"
                                                prefixCls="ant-select"
                                                removeIcon={<ForwardRef(CloseOutlined) />}
                                                style={
                                                  Object {
                                                    "width": "40%",
                                                  }
                                                }
                                                transitionName="ant-slide-up"
                                              >
                                                <div
                                                  className="ant-select ant-select-single ant-select-show-arrow"
                                                  onBlur={[Function]}
                                                  onFocus={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  onMouseDown={[Function]}
                                                  style={
                                                    Object {
                                                      "width": "40%",
                                                    }
                                                  }
                                                >
                                                  <SelectTrigger
                                                    containerWidth={null}
                                                    dropdownClassName=""
                                                    empty={true}
                                                    getTriggerDOMNode={[Function]}
                                                    popupElement={
                                                      <ForwardRef(OptionList)
                                                        childrenAsData={true}
                                                        defaultActiveFirstOption={true}
                                                        flattenOptions={Array []}
                                                        height={256}
                                                        id="create-space_organisation_id"
                                                        itemHeight={24}
                                                        menuItemSelectedIcon={null}
                                                        multiple={false}
                                                        notFoundContent={
                                                          <Context.Consumer>
                                                            [Function]
                                                          </Context.Consumer>
                                                        }
                                                        onActiveValue={[Function]}
                                                        onMouseEnter={[Function]}
                                                        onSelect={[Function]}
                                                        onToggleOpen={[Function]}
                                                        options={Array []}
                                                        prefixCls="ant-select"
                                                        searchValue=""
                                                        values={Set {}}
                                                        virtual={true}
                                                      />
                                                    }
                                                    prefixCls="ant-select"
                                                    transitionName="ant-slide-up"
                                                  >
                                                    <Trigger
                                                      action={Array []}
                                                      afterPopupVisibleChange={[Function]}
                                                      autoDestroy={false}
                                                      blurDelay={0.15}
                                                      builtinPlacements={
                                                        Object {
                                                          "bottomLeft": Object {
                                                            "offset": Array [
                                                              0,
                                                              4,
                                                            ],
                                                            "overflow": Object {
                                                              "adjustX": 0,
                                                              "adjustY": 1,
                                                            },
                                                            "points": Array [
                                                              "tl",
                                                              "bl",
                                                            ],
                                                          },
                                                          "bottomRight": Object {
                                                            "offset": Array [
                                                              0,
                                                              4,
                                                            ],
                                                            "overflow": Object {
                                                              "adjustX": 0,
                                                              "adjustY": 1,
                                                            },
                                                            "points": Array [
                                                              "tr",
                                                              "br",
                                                            ],
                                                          },
                                                          "topLeft": Object {
                                                            "offset": Array [
                                                              0,
                                                              -4,
                                                            ],
                                                            "overflow": Object {
                                                              "adjustX": 0,
                                                              "adjustY": 1,
                                                            },
                                                            "points": Array [
                                                              "bl",
                                                              "tl",
                                                            ],
                                                          },
                                                          "topRight": Object {
                                                            "offset": Array [
                                                              0,
                                                              -4,
                                                            ],
                                                            "overflow": Object {
                                                              "adjustX": 0,
                                                              "adjustY": 1,
                                                            },
                                                            "points": Array [
                                                              "br",
                                                              "tr",
                                                            ],
                                                          },
                                                        }
                                                      }
                                                      defaultPopupVisible={false}
                                                      destroyPopupOnHide={false}
                                                      focusDelay={0}
                                                      getDocument={[Function]}
                                                      getPopupClassNameFromAlign={[Function]}
                                                      getTriggerDOMNode={[Function]}
                                                      hideAction={Array []}
                                                      mask={false}
                                                      maskClosable={true}
                                                      mouseEnterDelay={0}
                                                      mouseLeaveDelay={0.1}
                                                      onPopupAlign={[Function]}
                                                      onPopupVisibleChange={[Function]}
                                                      popup={
                                                        <div>
                                                          <ForwardRef(OptionList)
                                                            childrenAsData={true}
                                                            defaultActiveFirstOption={true}
                                                            flattenOptions={Array []}
                                                            height={256}
                                                            id="create-space_organisation_id"
                                                            itemHeight={24}
                                                            menuItemSelectedIcon={null}
                                                            multiple={false}
                                                            notFoundContent={
                                                              <Context.Consumer>
                                                                [Function]
                                                              </Context.Consumer>
                                                            }
                                                            onActiveValue={[Function]}
                                                            onMouseEnter={[Function]}
                                                            onSelect={[Function]}
                                                            onToggleOpen={[Function]}
                                                            options={Array []}
                                                            prefixCls="ant-select"
                                                            searchValue=""
                                                            values={Set {}}
                                                            virtual={true}
                                                          />
                                                        </div>
                                                      }
                                                      popupAlign={Object {}}
                                                      popupClassName="ant-select-dropdown-empty"
                                                      popupPlacement="bottomLeft"
                                                      popupStyle={
                                                        Object {
                                                          "minWidth": null,
                                                          "width": null,
                                                        }
                                                      }
                                                      popupTransitionName="ant-slide-up"
                                                      prefixCls="ant-select-dropdown"
                                                      showAction={Array []}
                                                    >
                                                      <Selector
                                                        accessibilityIndex={0}
                                                        activeValue={null}
                                                        className=""
                                                        clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                        domRef={
                                                          Object {
                                                            "current": <div
                                                              class="ant-select-selector"
                                                            >
                                                              <span
                                                                class="ant-select-selection-search"
                                                              >
                                                                <input
                                                                  aria-activedescendant="create-space_organisation_id_list_0"
                                                                  aria-autocomplete="list"
                                                                  aria-controls="create-space_organisation_id_list"
                                                                  aria-haspopup="listbox"
                                                                  aria-owns="create-space_organisation_id_list"
                                                                  autocomplete="off"
                                                                  class="ant-select-selection-search-input"
                                                                  id="create-space_organisation_id"
                                                                  readonly=""
                                                                  role="combobox"
                                                                  style="opacity: 0;"
                                                                  type="search"
                                                                  unselectable="on"
                                                                  value=""
                                                                />
                                                              </span>
                                                              <span
                                                                class="ant-select-selection-placeholder"
                                                              >
                                                                Select organisation
                                                              </span>
                                                            </div>,
                                                          }
                                                        }
                                                        dropdownClassName=""
                                                        id="create-space_organisation_id"
                                                        inputElement={null}
                                                        inputIcon={[Function]}
                                                        key="trigger"
                                                        listHeight={256}
                                                        listItemHeight={24}
                                                        menuItemSelectedIcon={null}
                                                        multiple={false}
                                                        notFoundContent={
                                                          <Context.Consumer>
                                                            [Function]
                                                          </Context.Consumer>
                                                        }
                                                        onChange={[Function]}
                                                        onSearch={[Function]}
                                                        onSearchSubmit={[Function]}
                                                        onSelect={[Function]}
                                                        onToggleOpen={[Function]}
                                                        placeholder="Select organisation"
                                                        prefixCls="ant-select"
                                                        removeIcon={<ForwardRef(CloseOutlined) />}
                                                        searchValue=""
                                                        showSearch={false}
                                                        style={
                                                          Object {
                                                            "width": "40%",
                                                          }
                                                        }
                                                        tokenWithEnter={false}
                                                        transitionName="ant-slide-up"
                                                        values={Array []}
                                                      >
                                                        <div
                                                          className="ant-select-selector"
                                                          onClick={[Function]}
                                                          onMouseDown={[Function]}
                                                        >
                                                          <SingleSelector
                                                            accessibilityIndex={0}
                                                            activeValue={null}
                                                            className=""
                                                            clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                            domRef={
                                                              Object {
                                                                "current": <div
                                                                  class="ant-select-selector"
                                                                >
                                                                  <span
                                                                    class="ant-select-selection-search"
                                                                  >
                                                                    <input
                                                                      aria-activedescendant="create-space_organisation_id_list_0"
                                                                      aria-autocomplete="list"
                                                                      aria-controls="create-space_organisation_id_list"
                                                                      aria-haspopup="listbox"
                                                                      aria-owns="create-space_organisation_id_list"
                                                                      autocomplete="off"
                                                                      class="ant-select-selection-search-input"
                                                                      id="create-space_organisation_id"
                                                                      readonly=""
                                                                      role="combobox"
                                                                      style="opacity: 0;"
                                                                      type="search"
                                                                      unselectable="on"
                                                                      value=""
                                                                    />
                                                                  </span>
                                                                  <span
                                                                    class="ant-select-selection-placeholder"
                                                                  >
                                                                    Select organisation
                                                                  </span>
                                                                </div>,
                                                              }
                                                            }
                                                            dropdownClassName=""
                                                            id="create-space_organisation_id"
                                                            inputElement={null}
                                                            inputIcon={[Function]}
                                                            inputRef={
                                                              Object {
                                                                "current": <input
                                                                  aria-activedescendant="create-space_organisation_id_list_0"
                                                                  aria-autocomplete="list"
                                                                  aria-controls="create-space_organisation_id_list"
                                                                  aria-haspopup="listbox"
                                                                  aria-owns="create-space_organisation_id_list"
                                                                  autocomplete="off"
                                                                  class="ant-select-selection-search-input"
                                                                  id="create-space_organisation_id"
                                                                  readonly=""
                                                                  role="combobox"
                                                                  style="opacity: 0;"
                                                                  type="search"
                                                                  unselectable="on"
                                                                  value=""
                                                                />,
                                                              }
                                                            }
                                                            listHeight={256}
                                                            listItemHeight={24}
                                                            menuItemSelectedIcon={null}
                                                            multiple={false}
                                                            notFoundContent={
                                                              <Context.Consumer>
                                                                [Function]
                                                              </Context.Consumer>
                                                            }
                                                            onChange={[Function]}
                                                            onInputChange={[Function]}
                                                            onInputCompositionEnd={[Function]}
                                                            onInputCompositionStart={[Function]}
                                                            onInputKeyDown={[Function]}
                                                            onInputMouseDown={[Function]}
                                                            onInputPaste={[Function]}
                                                            onSearch={[Function]}
                                                            onSearchSubmit={[Function]}
                                                            onSelect={[Function]}
                                                            onToggleOpen={[Function]}
                                                            placeholder="Select organisation"
                                                            prefixCls="ant-select"
                                                            removeIcon={<ForwardRef(CloseOutlined) />}
                                                            searchValue=""
                                                            showSearch={false}
                                                            style={
                                                              Object {
                                                                "width": "40%",
                                                              }
                                                            }
                                                            tokenWithEnter={false}
                                                            transitionName="ant-slide-up"
                                                            values={Array []}
                                                          >
                                                            <span
                                                              className="ant-select-selection-search"
                                                            >
                                                              <Input
                                                                accessibilityIndex={0}
                                                                attrs={Object {}}
                                                                editable={false}
                                                                id="create-space_organisation_id"
                                                                inputElement={null}
                                                                onChange={[Function]}
                                                                onCompositionEnd={[Function]}
                                                                onCompositionStart={[Function]}
                                                                onKeyDown={[Function]}
                                                                onMouseDown={[Function]}
                                                                onPaste={[Function]}
                                                                prefixCls="ant-select"
                                                                value=""
                                                              >
                                                                <input
                                                                  aria-activedescendant="create-space_organisation_id_list_0"
                                                                  aria-autocomplete="list"
                                                                  aria-controls="create-space_organisation_id_list"
                                                                  aria-haspopup="listbox"
                                                                  aria-owns="create-space_organisation_id_list"
                                                                  autoComplete="off"
                                                                  className="ant-select-selection-search-input"
                                                                  id="create-space_organisation_id"
                                                                  onChange={[Function]}
                                                                  onCompositionEnd={[Function]}
                                                                  onCompositionStart={[Function]}
                                                                  onKeyDown={[Function]}
                                                                  onMouseDown={[Function]}
                                                                  onPaste={[Function]}
                                                                  readOnly={true}
                                                                  role="combobox"
                                                                  style={
                                                                    Object {
                                                                      "opacity": 0,
                                                                    }
                                                                  }
                                                                  type="search"
                                                                  unselectable="on"
                                                                  value=""
                                                                />
                                                              </Input>
                                                            </span>
                                                            <span
                                                              className="ant-select-selection-placeholder"
                                                            >
                                                              Select organisation
                                                            </span>
                                                          </SingleSelector>
                                                        </div>
                                                      </Selector>
                                                    </Trigger>
                                                  </SelectTrigger>
                                                  <TransBtn
                                                    className="ant-select-arrow"
                                                    customizeIcon={[Function]}
                                                    customizeIconProps={
                                                      Object {
                                                        "focused": false,
                                                        "loading": undefined,
                                                        "open": undefined,
                                                        "searchValue": "",
                                                        "showSearch": false,
                                                      }
                                                    }
                                                  >
                                                    <span
                                                      aria-hidden={true}
                                                      className="ant-select-arrow"
                                                      onMouseDown={[Function]}
                                                      style={
                                                        Object {
                                                          "WebkitUserSelect": "none",
                                                          "userSelect": "none",
                                                        }
                                                      }
                                                      unselectable="on"
                                                    >
                                                      <ForwardRef(DownOutlined)
                                                        className="ant-select-suffix"
                                                      >
                                                        <AntdIcon
                                                          className="ant-select-suffix"
                                                          icon={
                                                            Object {
                                                              "icon": Object {
                                                                "attrs": Object {
                                                                  "focusable": "false",
                                                                  "viewBox": "64 64 896 896",
                                                                },
                                                                "children": Array [
                                                                  Object {
                                                                    "attrs": Object {
                                                                      "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                                                    },
                                                                    "tag": "path",
                                                                  },
                                                                ],
                                                                "tag": "svg",
                                                              },
                                                              "name": "down",
                                                              "theme": "outlined",
                                                            }
                                                          }
                                                        >
                                                          <span
                                                            aria-label="down"
                                                            className="anticon anticon-down ant-select-suffix"
                                                            role="img"
                                                          >
                                                            <IconReact
                                                              icon={
                                                                Object {
                                                                  "icon": Object {
                                                                    "attrs": Object {
                                                                      "focusable": "false",
                                                                      "viewBox": "64 64 896 896",
                                                                    },
                                                                    "children": Array [
                                                                      Object {
                                                                        "attrs": Object {
                                                                          "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                                                        },
                                                                        "tag": "path",
                                                                      },
                                                                    ],
                                                                    "tag": "svg",
                                                                  },
                                                                  "name": "down",
                                                                  "theme": "outlined",
                                                                }
                                                              }
                                                            >
                                                              <svg
                                                                aria-hidden="true"
                                                                data-icon="down"
                                                                fill="currentColor"
                                                                focusable="false"
                                                                height="1em"
                                                                key="svg-down"
                                                                viewBox="64 64 896 896"
                                                                width="1em"
                                                              >
                                                                <path
                                                                  d="M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z"
                                                                  key="svg-down-svg-0"
                                                                />
                                                              </svg>
                                                            </IconReact>
                                                          </span>
                                                        </AntdIcon>
                                                      </ForwardRef(DownOutlined)>
                                                    </span>
                                                  </TransBtn>
                                                </div>
                                              </ForwardRef(Select)>
                                            </Select>
                                          </ForwardRef(InternalSelect)>
                                        </Component>
                                      </Field>
                                    </WrapperField>
                                  </FormItem>
                                  <FormItem
                                    name="name"
                                    noStyle={true}
                                    rules={
                                      Array [
                                        Object {
                                          "message": "Name is required",
                                          "required": true,
                                        },
                                        Object {
                                          "message": "Name must be minimum 3 characters.",
                                          "min": 3,
                                        },
                                        Object {
                                          "max": 50,
                                          "message": "Name must be maximum 50 characters.",
                                        },
                                      ]
                                    }
                                  >
                                    <WrapperField
                                      messageVariables={
                                        Object {
                                          "label": "name",
                                        }
                                      }
                                      name="name"
                                      noStyle={true}
                                      onReset={[Function]}
                                      rules={
                                        Array [
                                          Object {
                                            "message": "Name is required",
                                            "required": true,
                                          },
                                          Object {
                                            "message": "Name must be minimum 3 characters.",
                                            "min": 3,
                                          },
                                          Object {
                                            "max": 50,
                                            "message": "Name must be maximum 50 characters.",
                                          },
                                        ]
                                      }
                                      trigger="onChange"
                                      validateTrigger="onChange"
                                    >
                                      <Field
                                        fieldContext={
                                          Object {
                                            "__INTERNAL__": Object {
                                              "itemRef": [Function],
                                              "name": "create-space",
                                            },
                                            "getFieldError": [Function],
                                            "getFieldInstance": [Function],
                                            "getFieldValue": [Function],
                                            "getFieldsError": [Function],
                                            "getFieldsValue": [Function],
                                            "getInternalHooks": [Function],
                                            "isFieldTouched": [Function],
                                            "isFieldValidating": [Function],
                                            "isFieldsTouched": [Function],
                                            "isFieldsValidating": [Function],
                                            "resetFields": [Function],
                                            "scrollToField": [Function],
                                            "setFields": [Function],
                                            "setFieldsValue": [Function],
                                            "submit": [Function],
                                            "validateFields": [Function],
                                            "validateTrigger": "onChange",
                                          }
                                        }
                                        key="_name"
                                        messageVariables={
                                          Object {
                                            "label": "name",
                                          }
                                        }
                                        name={
                                          Array [
                                            "name",
                                          ]
                                        }
                                        noStyle={true}
                                        onReset={[Function]}
                                        rules={
                                          Array [
                                            Object {
                                              "message": "Name is required",
                                              "required": true,
                                            },
                                            Object {
                                              "message": "Name must be minimum 3 characters.",
                                              "min": 3,
                                            },
                                            Object {
                                              "max": 50,
                                              "message": "Name must be maximum 50 characters.",
                                            },
                                          ]
                                        }
                                        trigger="onChange"
                                        validateTrigger="onChange"
                                        valuePropName="value"
                                      >
                                        <Component
                                          update={1}
                                        >
                                          <Input
                                            id="create-space_name"
                                            onChange={[Function]}
                                            placeholder="Input name"
                                            style={
                                              Object {
                                                "width": "60%",
                                              }
                                            }
                                            type="text"
                                          >
                                            <ClearableLabeledInput
                                              bordered={true}
                                              element={
                                                <input
                                                  className="ant-input"
                                                  id="create-space_name"
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onFocus={[Function]}
                                                  onKeyDown={[Function]}
                                                  placeholder="Input name"
                                                  style={
                                                    Object {
                                                      "width": "60%",
                                                    }
                                                  }
                                                  type="text"
                                                />
                                              }
                                              focused={false}
                                              handleReset={[Function]}
                                              id="create-space_name"
                                              inputType="input"
                                              onChange={[Function]}
                                              placeholder="Input name"
                                              prefixCls="ant-input"
                                              style={
                                                Object {
                                                  "width": "60%",
                                                }
                                              }
                                              triggerFocus={[Function]}
                                              type="text"
                                              value=""
                                            >
                                              <input
                                                className="ant-input"
                                                id="create-space_name"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                placeholder="Input name"
                                                style={
                                                  Object {
                                                    "width": "60%",
                                                  }
                                                }
                                                type="text"
                                                value=""
                                              />
                                            </ClearableLabeledInput>
                                          </Input>
                                        </Component>
                                      </Field>
                                    </WrapperField>
                                  </FormItem>
                                </span>
                              </Group>
                            </div>
                          </div>
                          <ErrorList
                            errors={Array []}
                            onDomErrorVisibleChange={[Function]}
                          >
                            <CSSMotion
                              motionAppear={true}
                              motionDeadline={500}
                              motionName="ant-show-help"
                              onLeaveEnd={[Function]}
                              removeOnLeave={true}
                              visible={false}
                            >
                              <DomWrapper />
                            </CSSMotion>
                          </ErrorList>
                        </div>
                      </Col>
                    </FormItemInput>
                  </div>
                </Row>
              </FormItem>
              <SlugInput>
                <FormItem
                  label="Slug"
                  name="slug"
                  rules={
                    Array [
                      Object {
                        "message": "Please input the slug!",
                        "required": true,
                      },
                      Object {
                        "message": "Please enter valid slug!",
                        "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                      },
                    ]
                  }
                >
                  <WrapperField
                    label="Slug"
                    messageVariables={
                      Object {
                        "label": "Slug",
                      }
                    }
                    name="slug"
                    onReset={[Function]}
                    rules={
                      Array [
                        Object {
                          "message": "Please input the slug!",
                          "required": true,
                        },
                        Object {
                          "message": "Please enter valid slug!",
                          "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                        },
                      ]
                    }
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-space",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_slug"
                      label="Slug"
                      messageVariables={
                        Object {
                          "label": "Slug",
                        }
                      }
                      name={
                        Array [
                          "slug",
                        ]
                      }
                      onReset={[Function]}
                      rules={
                        Array [
                          Object {
                            "message": "Please input the slug!",
                            "required": true,
                          },
                          Object {
                            "message": "Please enter valid slug!",
                            "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                          },
                        ]
                      }
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-space_slug"
                            label="Slug"
                            name="slug"
                            prefixCls="ant-form"
                            required={true}
                            requiredMark={true}
                            rules={
                              Array [
                                Object {
                                  "message": "Please input the slug!",
                                  "required": true,
                                },
                                Object {
                                  "message": "Please enter valid slug!",
                                  "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                                },
                              ]
                            }
                          >
                            <Col
                              className="ant-form-item-label"
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className="ant-form-item-required"
                                  htmlFor="create-space_slug"
                                  title="Slug"
                                >
                                  Slug
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Slug"
                            name={
                              Array [
                                "slug",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            rules={
                              Array [
                                Object {
                                  "message": "Please input the slug!",
                                  "required": true,
                                },
                                Object {
                                  "message": "Please enter valid slug!",
                                  "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                                },
                              ]
                            }
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={1}
                                    >
                                      <Input
                                        id="create-space_slug"
                                        onChange={[Function]}
                                        type="text"
                                      >
                                        <ClearableLabeledInput
                                          bordered={true}
                                          element={
                                            <input
                                              className="ant-input"
                                              id="create-space_slug"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              onKeyDown={[Function]}
                                              type="text"
                                            />
                                          }
                                          focused={false}
                                          handleReset={[Function]}
                                          id="create-space_slug"
                                          inputType="input"
                                          onChange={[Function]}
                                          prefixCls="ant-input"
                                          triggerFocus={[Function]}
                                          type="text"
                                          value=""
                                        >
                                          <input
                                            className="ant-input"
                                            id="create-space_slug"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            onKeyDown={[Function]}
                                            type="text"
                                            value=""
                                          />
                                        </ClearableLabeledInput>
                                      </Input>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="ant-show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
              </SlugInput>
              <FormItem
                label="Title"
                name="site_title"
              >
                <WrapperField
                  label="Title"
                  messageVariables={
                    Object {
                      "label": "Title",
                    }
                  }
                  name="site_title"
                  onReset={[Function]}
                  trigger="onChange"
                  validateTrigger="onChange"
                >
                  <Field
                    fieldContext={
                      Object {
                        "__INTERNAL__": Object {
                          "itemRef": [Function],
                          "name": "create-space",
                        },
                        "getFieldError": [Function],
                        "getFieldInstance": [Function],
                        "getFieldValue": [Function],
                        "getFieldsError": [Function],
                        "getFieldsValue": [Function],
                        "getInternalHooks": [Function],
                        "isFieldTouched": [Function],
                        "isFieldValidating": [Function],
                        "isFieldsTouched": [Function],
                        "isFieldsValidating": [Function],
                        "resetFields": [Function],
                        "scrollToField": [Function],
                        "setFields": [Function],
                        "setFieldsValue": [Function],
                        "submit": [Function],
                        "validateFields": [Function],
                        "validateTrigger": "onChange",
                      }
                    }
                    key="_site_title"
                    label="Title"
                    messageVariables={
                      Object {
                        "label": "Title",
                      }
                    }
                    name={
                      Array [
                        "site_title",
                      ]
                    }
                    onReset={[Function]}
                    trigger="onChange"
                    validateTrigger="onChange"
                    valuePropName="value"
                  >
                    <Row
                      className="ant-form-item"
                      key="row"
                    >
                      <div
                        className="ant-row ant-form-item"
                        style={Object {}}
                      >
                        <FormItemLabel
                          htmlFor="create-space_site_title"
                          label="Title"
                          name="site_title"
                          prefixCls="ant-form"
                          required={false}
                          requiredMark={true}
                        >
                          <Col
                            className="ant-form-item-label"
                            span={8}
                          >
                            <div
                              className="ant-col ant-col-8 ant-form-item-label"
                              style={Object {}}
                            >
                              <label
                                className=""
                                htmlFor="create-space_site_title"
                                title="Title"
                              >
                                Title
                              </label>
                            </div>
                          </Col>
                        </FormItemLabel>
                        <FormItemInput
                          errors={Array []}
                          label="Title"
                          name={
                            Array [
                              "site_title",
                            ]
                          }
                          onDomErrorVisibleChange={[Function]}
                          prefixCls="ant-form"
                          status=""
                          touched={false}
                          validateStatus=""
                          validating={false}
                        >
                          <Col
                            className="ant-form-item-control"
                            span={8}
                          >
                            <div
                              className="ant-col ant-col-8 ant-form-item-control"
                              style={Object {}}
                            >
                              <div
                                className="ant-form-item-control-input"
                              >
                                <div
                                  className="ant-form-item-control-input-content"
                                >
                                  <Component
                                    update={1}
                                  >
                                    <Input
                                      id="create-space_site_title"
                                      onChange={[Function]}
                                      type="text"
                                    >
                                      <ClearableLabeledInput
                                        bordered={true}
                                        element={
                                          <input
                                            className="ant-input"
                                            id="create-space_site_title"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            onKeyDown={[Function]}
                                            type="text"
                                          />
                                        }
                                        focused={false}
                                        handleReset={[Function]}
                                        id="create-space_site_title"
                                        inputType="input"
                                        onChange={[Function]}
                                        prefixCls="ant-input"
                                        triggerFocus={[Function]}
                                        type="text"
                                        value=""
                                      >
                                        <input
                                          className="ant-input"
                                          id="create-space_site_title"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          onKeyDown={[Function]}
                                          type="text"
                                          value=""
                                        />
                                      </ClearableLabeledInput>
                                    </Input>
                                  </Component>
                                </div>
                              </div>
                              <ErrorList
                                errors={Array []}
                                onDomErrorVisibleChange={[Function]}
                              >
                                <CSSMotion
                                  motionAppear={true}
                                  motionDeadline={500}
                                  motionName="ant-show-help"
                                  onLeaveEnd={[Function]}
                                  removeOnLeave={true}
                                  visible={false}
                                >
                                  <DomWrapper />
                                </CSSMotion>
                              </ErrorList>
                            </div>
                          </Col>
                        </FormItemInput>
                      </div>
                    </Row>
                  </Field>
                </WrapperField>
              </FormItem>
              <FormItem
                label="Tag line"
                name="tag_line"
              >
                <WrapperField
                  label="Tag line"
                  messageVariables={
                    Object {
                      "label": "Tag line",
                    }
                  }
                  name="tag_line"
                  onReset={[Function]}
                  trigger="onChange"
                  validateTrigger="onChange"
                >
                  <Field
                    fieldContext={
                      Object {
                        "__INTERNAL__": Object {
                          "itemRef": [Function],
                          "name": "create-space",
                        },
                        "getFieldError": [Function],
                        "getFieldInstance": [Function],
                        "getFieldValue": [Function],
                        "getFieldsError": [Function],
                        "getFieldsValue": [Function],
                        "getInternalHooks": [Function],
                        "isFieldTouched": [Function],
                        "isFieldValidating": [Function],
                        "isFieldsTouched": [Function],
                        "isFieldsValidating": [Function],
                        "resetFields": [Function],
                        "scrollToField": [Function],
                        "setFields": [Function],
                        "setFieldsValue": [Function],
                        "submit": [Function],
                        "validateFields": [Function],
                        "validateTrigger": "onChange",
                      }
                    }
                    key="_tag_line"
                    label="Tag line"
                    messageVariables={
                      Object {
                        "label": "Tag line",
                      }
                    }
                    name={
                      Array [
                        "tag_line",
                      ]
                    }
                    onReset={[Function]}
                    trigger="onChange"
                    validateTrigger="onChange"
                    valuePropName="value"
                  >
                    <Row
                      className="ant-form-item"
                      key="row"
                    >
                      <div
                        className="ant-row ant-form-item"
                        style={Object {}}
                      >
                        <FormItemLabel
                          htmlFor="create-space_tag_line"
                          label="Tag line"
                          name="tag_line"
                          prefixCls="ant-form"
                          required={false}
                          requiredMark={true}
                        >
                          <Col
                            className="ant-form-item-label"
                            span={8}
                          >
                            <div
                              className="ant-col ant-col-8 ant-form-item-label"
                              style={Object {}}
                            >
                              <label
                                className=""
                                htmlFor="create-space_tag_line"
                                title="Tag line"
                              >
                                Tag line
                              </label>
                            </div>
                          </Col>
                        </FormItemLabel>
                        <FormItemInput
                          errors={Array []}
                          label="Tag line"
                          name={
                            Array [
                              "tag_line",
                            ]
                          }
                          onDomErrorVisibleChange={[Function]}
                          prefixCls="ant-form"
                          status=""
                          touched={false}
                          validateStatus=""
                          validating={false}
                        >
                          <Col
                            className="ant-form-item-control"
                            span={8}
                          >
                            <div
                              className="ant-col ant-col-8 ant-form-item-control"
                              style={Object {}}
                            >
                              <div
                                className="ant-form-item-control-input"
                              >
                                <div
                                  className="ant-form-item-control-input-content"
                                >
                                  <Component
                                    update={1}
                                  >
                                    <Input
                                      id="create-space_tag_line"
                                      onChange={[Function]}
                                      type="text"
                                    >
                                      <ClearableLabeledInput
                                        bordered={true}
                                        element={
                                          <input
                                            className="ant-input"
                                            id="create-space_tag_line"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            onKeyDown={[Function]}
                                            type="text"
                                          />
                                        }
                                        focused={false}
                                        handleReset={[Function]}
                                        id="create-space_tag_line"
                                        inputType="input"
                                        onChange={[Function]}
                                        prefixCls="ant-input"
                                        triggerFocus={[Function]}
                                        type="text"
                                        value=""
                                      >
                                        <input
                                          className="ant-input"
                                          id="create-space_tag_line"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          onKeyDown={[Function]}
                                          type="text"
                                          value=""
                                        />
                                      </ClearableLabeledInput>
                                    </Input>
                                  </Component>
                                </div>
                              </div>
                              <ErrorList
                                errors={Array []}
                                onDomErrorVisibleChange={[Function]}
                              >
                                <CSSMotion
                                  motionAppear={true}
                                  motionDeadline={500}
                                  motionName="ant-show-help"
                                  onLeaveEnd={[Function]}
                                  removeOnLeave={true}
                                  visible={false}
                                >
                                  <DomWrapper />
                                </CSSMotion>
                              </ErrorList>
                            </div>
                          </Col>
                        </FormItemInput>
                      </div>
                    </Row>
                  </Field>
                </WrapperField>
              </FormItem>
              <FormItem
                label="Website"
                name="site_address"
              >
                <WrapperField
                  label="Website"
                  messageVariables={
                    Object {
                      "label": "Website",
                    }
                  }
                  name="site_address"
                  onReset={[Function]}
                  trigger="onChange"
                  validateTrigger="onChange"
                >
                  <Field
                    fieldContext={
                      Object {
                        "__INTERNAL__": Object {
                          "itemRef": [Function],
                          "name": "create-space",
                        },
                        "getFieldError": [Function],
                        "getFieldInstance": [Function],
                        "getFieldValue": [Function],
                        "getFieldsError": [Function],
                        "getFieldsValue": [Function],
                        "getInternalHooks": [Function],
                        "isFieldTouched": [Function],
                        "isFieldValidating": [Function],
                        "isFieldsTouched": [Function],
                        "isFieldsValidating": [Function],
                        "resetFields": [Function],
                        "scrollToField": [Function],
                        "setFields": [Function],
                        "setFieldsValue": [Function],
                        "submit": [Function],
                        "validateFields": [Function],
                        "validateTrigger": "onChange",
                      }
                    }
                    key="_site_address"
                    label="Website"
                    messageVariables={
                      Object {
                        "label": "Website",
                      }
                    }
                    name={
                      Array [
                        "site_address",
                      ]
                    }
                    onReset={[Function]}
                    trigger="onChange"
                    validateTrigger="onChange"
                    valuePropName="value"
                  >
                    <Row
                      className="ant-form-item"
                      key="row"
                    >
                      <div
                        className="ant-row ant-form-item"
                        style={Object {}}
                      >
                        <FormItemLabel
                          htmlFor="create-space_site_address"
                          label="Website"
                          name="site_address"
                          prefixCls="ant-form"
                          required={false}
                          requiredMark={true}
                        >
                          <Col
                            className="ant-form-item-label"
                            span={8}
                          >
                            <div
                              className="ant-col ant-col-8 ant-form-item-label"
                              style={Object {}}
                            >
                              <label
                                className=""
                                htmlFor="create-space_site_address"
                                title="Website"
                              >
                                Website
                              </label>
                            </div>
                          </Col>
                        </FormItemLabel>
                        <FormItemInput
                          errors={Array []}
                          label="Website"
                          name={
                            Array [
                              "site_address",
                            ]
                          }
                          onDomErrorVisibleChange={[Function]}
                          prefixCls="ant-form"
                          status=""
                          touched={false}
                          validateStatus=""
                          validating={false}
                        >
                          <Col
                            className="ant-form-item-control"
                            span={8}
                          >
                            <div
                              className="ant-col ant-col-8 ant-form-item-control"
                              style={Object {}}
                            >
                              <div
                                className="ant-form-item-control-input"
                              >
                                <div
                                  className="ant-form-item-control-input-content"
                                >
                                  <Component
                                    update={1}
                                  >
                                    <Input
                                      id="create-space_site_address"
                                      onChange={[Function]}
                                      type="text"
                                    >
                                      <ClearableLabeledInput
                                        bordered={true}
                                        element={
                                          <input
                                            className="ant-input"
                                            id="create-space_site_address"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            onKeyDown={[Function]}
                                            type="text"
                                          />
                                        }
                                        focused={false}
                                        handleReset={[Function]}
                                        id="create-space_site_address"
                                        inputType="input"
                                        onChange={[Function]}
                                        prefixCls="ant-input"
                                        triggerFocus={[Function]}
                                        type="text"
                                        value=""
                                      >
                                        <input
                                          className="ant-input"
                                          id="create-space_site_address"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          onKeyDown={[Function]}
                                          type="text"
                                          value=""
                                        />
                                      </ClearableLabeledInput>
                                    </Input>
                                  </Component>
                                </div>
                              </div>
                              <ErrorList
                                errors={Array []}
                                onDomErrorVisibleChange={[Function]}
                              >
                                <CSSMotion
                                  motionAppear={true}
                                  motionDeadline={500}
                                  motionName="ant-show-help"
                                  onLeaveEnd={[Function]}
                                  removeOnLeave={true}
                                  visible={false}
                                >
                                  <DomWrapper />
                                </CSSMotion>
                              </ErrorList>
                            </div>
                          </Col>
                        </FormItemInput>
                      </div>
                    </Row>
                  </Field>
                </WrapperField>
              </FormItem>
              <FormItem
                label="Description"
                name="description"
              >
                <WrapperField
                  label="Description"
                  messageVariables={
                    Object {
                      "label": "Description",
                    }
                  }
                  name="description"
                  onReset={[Function]}
                  trigger="onChange"
                  validateTrigger="onChange"
                >
                  <Field
                    fieldContext={
                      Object {
                        "__INTERNAL__": Object {
                          "itemRef": [Function],
                          "name": "create-space",
                        },
                        "getFieldError": [Function],
                        "getFieldInstance": [Function],
                        "getFieldValue": [Function],
                        "getFieldsError": [Function],
                        "getFieldsValue": [Function],
                        "getInternalHooks": [Function],
                        "isFieldTouched": [Function],
                        "isFieldValidating": [Function],
                        "isFieldsTouched": [Function],
                        "isFieldsValidating": [Function],
                        "resetFields": [Function],
                        "scrollToField": [Function],
                        "setFields": [Function],
                        "setFieldsValue": [Function],
                        "submit": [Function],
                        "validateFields": [Function],
                        "validateTrigger": "onChange",
                      }
                    }
                    key="_description"
                    label="Description"
                    messageVariables={
                      Object {
                        "label": "Description",
                      }
                    }
                    name={
                      Array [
                        "description",
                      ]
                    }
                    onReset={[Function]}
                    trigger="onChange"
                    validateTrigger="onChange"
                    valuePropName="value"
                  >
                    <Row
                      className="ant-form-item"
                      key="row"
                    >
                      <div
                        className="ant-row ant-form-item"
                        style={Object {}}
                      >
                        <FormItemLabel
                          htmlFor="create-space_description"
                          label="Description"
                          name="description"
                          prefixCls="ant-form"
                          required={false}
                          requiredMark={true}
                        >
                          <Col
                            className="ant-form-item-label"
                            span={8}
                          >
                            <div
                              className="ant-col ant-col-8 ant-form-item-label"
                              style={Object {}}
                            >
                              <label
                                className=""
                                htmlFor="create-space_description"
                                title="Description"
                              >
                                Description
                              </label>
                            </div>
                          </Col>
                        </FormItemLabel>
                        <FormItemInput
                          errors={Array []}
                          label="Description"
                          name={
                            Array [
                              "description",
                            ]
                          }
                          onDomErrorVisibleChange={[Function]}
                          prefixCls="ant-form"
                          status=""
                          touched={false}
                          validateStatus=""
                          validating={false}
                        >
                          <Col
                            className="ant-form-item-control"
                            span={8}
                          >
                            <div
                              className="ant-col ant-col-8 ant-form-item-control"
                              style={Object {}}
                            >
                              <div
                                className="ant-form-item-control-input"
                              >
                                <div
                                  className="ant-form-item-control-input-content"
                                >
                                  <Component
                                    update={1}
                                  >
                                    <ForwardRef
                                      id="create-space_description"
                                      onChange={[Function]}
                                      placeholder="Enter Description..."
                                    >
                                      <ClearableLabeledInput
                                        bordered={true}
                                        element={
                                          <TextArea
                                            className=""
                                            id="create-space_description"
                                            onChange={[Function]}
                                            onCompositionEnd={[Function]}
                                            onCompositionStart={[Function]}
                                            placeholder="Enter Description..."
                                            prefixCls="ant-input"
                                          />
                                        }
                                        handleReset={[Function]}
                                        id="create-space_description"
                                        inputType="text"
                                        placeholder="Enter Description..."
                                        prefixCls="ant-input"
                                        value=""
                                      >
                                        <TextArea
                                          className=""
                                          id="create-space_description"
                                          onChange={[Function]}
                                          onCompositionEnd={[Function]}
                                          onCompositionStart={[Function]}
                                          placeholder="Enter Description..."
                                          prefixCls="ant-input"
                                          value=""
                                        >
                                          <ResizableTextArea
                                            className=""
                                            id="create-space_description"
                                            onChange={[Function]}
                                            onCompositionEnd={[Function]}
                                            onCompositionStart={[Function]}
                                            onKeyDown={[Function]}
                                            placeholder="Enter Description..."
                                            prefixCls="ant-input"
                                            value=""
                                          >
                                            <ResizeObserver
                                              disabled={true}
                                              onResize={[Function]}
                                            >
                                              <textarea
                                                className="ant-input"
                                                id="create-space_description"
                                                onChange={[Function]}
                                                onCompositionEnd={[Function]}
                                                onCompositionStart={[Function]}
                                                onKeyDown={[Function]}
                                                placeholder="Enter Description..."
                                                style={Object {}}
                                                value=""
                                              />
                                            </ResizeObserver>
                                          </ResizableTextArea>
                                        </TextArea>
                                      </ClearableLabeledInput>
                                    </ForwardRef>
                                  </Component>
                                </div>
                              </div>
                              <ErrorList
                                errors={Array []}
                                onDomErrorVisibleChange={[Function]}
                              >
                                <CSSMotion
                                  motionAppear={true}
                                  motionDeadline={500}
                                  motionName="ant-show-help"
                                  onLeaveEnd={[Function]}
                                  removeOnLeave={true}
                                  visible={false}
                                >
                                  <DomWrapper />
                                </CSSMotion>
                              </ErrorList>
                            </div>
                          </Col>
                        </FormItemInput>
                      </div>
                    </Row>
                  </Field>
                </WrapperField>
              </FormItem>
              <FormItem
                label="Metafields"
                name="meta_fields"
              >
                <WrapperField
                  label="Metafields"
                  messageVariables={
                    Object {
                      "label": "Metafields",
                    }
                  }
                  name="meta_fields"
                  onReset={[Function]}
                  trigger="onChange"
                  validateTrigger="onChange"
                >
                  <Field
                    fieldContext={
                      Object {
                        "__INTERNAL__": Object {
                          "itemRef": [Function],
                          "name": "create-space",
                        },
                        "getFieldError": [Function],
                        "getFieldInstance": [Function],
                        "getFieldValue": [Function],
                        "getFieldsError": [Function],
                        "getFieldsValue": [Function],
                        "getInternalHooks": [Function],
                        "isFieldTouched": [Function],
                        "isFieldValidating": [Function],
                        "isFieldsTouched": [Function],
                        "isFieldsValidating": [Function],
                        "resetFields": [Function],
                        "scrollToField": [Function],
                        "setFields": [Function],
                        "setFieldsValue": [Function],
                        "submit": [Function],
                        "validateFields": [Function],
                        "validateTrigger": "onChange",
                      }
                    }
                    key="_meta_fields"
                    label="Metafields"
                    messageVariables={
                      Object {
                        "label": "Metafields",
                      }
                    }
                    name={
                      Array [
                        "meta_fields",
                      ]
                    }
                    onReset={[Function]}
                    trigger="onChange"
                    validateTrigger="onChange"
                    valuePropName="value"
                  >
                    <Row
                      className="ant-form-item"
                      key="row"
                    >
                      <div
                        className="ant-row ant-form-item"
                        style={Object {}}
                      >
                        <FormItemLabel
                          htmlFor="create-space_meta_fields"
                          label="Metafields"
                          name="meta_fields"
                          prefixCls="ant-form"
                          required={false}
                          requiredMark={true}
                        >
                          <Col
                            className="ant-form-item-label"
                            span={8}
                          >
                            <div
                              className="ant-col ant-col-8 ant-form-item-label"
                              style={Object {}}
                            >
                              <label
                                className=""
                                htmlFor="create-space_meta_fields"
                                title="Metafields"
                              >
                                Metafields
                              </label>
                            </div>
                          </Col>
                        </FormItemLabel>
                        <FormItemInput
                          errors={Array []}
                          label="Metafields"
                          name={
                            Array [
                              "meta_fields",
                            ]
                          }
                          onDomErrorVisibleChange={[Function]}
                          prefixCls="ant-form"
                          status=""
                          touched={false}
                          validateStatus=""
                          validating={false}
                        >
                          <Col
                            className="ant-form-item-control"
                            span={8}
                          >
                            <div
                              className="ant-col ant-col-8 ant-form-item-control"
                              style={Object {}}
                            >
                              <div
                                className="ant-form-item-control-input"
                              >
                                <div
                                  className="ant-form-item-control-input-content"
                                >
                                  <Component
                                    update={1}
                                  >
                                    <MONACOEditor
                                      id="create-space_meta_fields"
                                      language="json"
                                      onChange={[Function]}
                                    >
                                      <MonacoEditor
                                        height="240"
                                        language="json"
                                        onChange={[Function]}
                                        options={
                                          Object {
                                            "autoClosingBrackets": "auto",
                                            "autoClosingQuotes": "auto",
                                            "cursorBlinking": "smooth",
                                            "folding": true,
                                            "lineNumbersMinChars": 4,
                                            "minimap": Object {
                                              "enabled": false,
                                            },
                                            "scrollBeyondLastLine": false,
                                            "scrollbar": Object {
                                              "alwaysConsumeMouseWheel": false,
                                            },
                                            "theme": "vs-dark",
                                            "wordWrap": "on",
                                          }
                                        }
                                        width={440}
                                      >
                                        <div />
                                      </MonacoEditor>
                                    </MONACOEditor>
                                  </Component>
                                </div>
                              </div>
                              <ErrorList
                                errors={Array []}
                                onDomErrorVisibleChange={[Function]}
                              >
                                <CSSMotion
                                  motionAppear={true}
                                  motionDeadline={500}
                                  motionName="ant-show-help"
                                  onLeaveEnd={[Function]}
                                  removeOnLeave={true}
                                  visible={false}
                                >
                                  <DomWrapper />
                                </CSSMotion>
                              </ErrorList>
                            </div>
                          </Col>
                        </FormItemInput>
                      </div>
                    </Row>
                  </Field>
                </WrapperField>
              </FormItem>
              <FormItem
                wrapperCol={
                  Object {
                    "offset": 8,
                    "span": 16,
                  }
                }
              >
                <Row
                  className="ant-form-item"
                  key="row"
                >
                  <div
                    className="ant-row ant-form-item"
                    style={Object {}}
                  >
                    <FormItemLabel
                      prefixCls="ant-form"
                      requiredMark={true}
                      wrapperCol={
                        Object {
                          "offset": 8,
                          "span": 16,
                        }
                      }
                    />
                    <FormItemInput
                      errors={Array []}
                      onDomErrorVisibleChange={[Function]}
                      prefixCls="ant-form"
                      status=""
                      validateStatus=""
                      wrapperCol={
                        Object {
                          "offset": 8,
                          "span": 16,
                        }
                      }
                    >
                      <Col
                        className="ant-form-item-control"
                        offset={8}
                        span={16}
                      >
                        <div
                          className="ant-col ant-col-16 ant-col-offset-8 ant-form-item-control"
                          style={Object {}}
                        >
                          <div
                            className="ant-form-item-control-input"
                          >
                            <div
                              className="ant-form-item-control-input-content"
                            >
                              <Button
                                htmlType="submit"
                                type="primary"
                              >
                                <Wave>
                                  <button
                                    className="ant-btn ant-btn-primary"
                                    onClick={[Function]}
                                    type="submit"
                                  >
                                    <LoadingIcon
                                      existIcon={false}
                                      loading={false}
                                      prefixCls="ant-btn"
                                    >
                                      <CSSMotion
                                        motionName="ant-btn-loading-icon-motion"
                                        onAppearActive={[Function]}
                                        onAppearStart={[Function]}
                                        onEnterActive={[Function]}
                                        onEnterStart={[Function]}
                                        onLeaveActive={[Function]}
                                        onLeaveStart={[Function]}
                                        removeOnLeave={true}
                                        visible={false}
                                      >
                                        <DomWrapper />
                                      </CSSMotion>
                                    </LoadingIcon>
                                    <span
                                      key=".0"
                                    >
                                      Submit
                                    </span>
                                  </button>
                                </Wave>
                              </Button>
                            </div>
                          </div>
                          <ErrorList
                            errors={Array []}
                            onDomErrorVisibleChange={[Function]}
                          >
                            <CSSMotion
                              motionAppear={true}
                              motionDeadline={500}
                              motionName="ant-show-help"
                              onLeaveEnd={[Function]}
                              removeOnLeave={true}
                              visible={false}
                            >
                              <DomWrapper />
                            </CSSMotion>
                          </ErrorList>
                        </div>
                      </Col>
                    </FormItemInput>
                  </div>
                </Row>
              </FormItem>
            </form>
          </ForwardRef(Form)>
        </SizeContextProvider>
      </ForwardRef(InternalForm)>
    </SpaceCreateForm>
  </CreateSpace>
</Provider>
`;

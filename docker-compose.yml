version: "3.7"

services:
  ###########################################################################
  #######             DB SERVICES                                     #######
  ###########################################################################
  postgres:
    image: postgres:11.7-alpine
    ports:
      - "5432:5432"
    volumes:
      - ./pg-init-scripts:/docker-entrypoint-initdb.d
      - ./volumes/postgres:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_MULTIPLE_DATABASES=zitadel,dega,hukz
    networks:
      - dega

  #########################################################################
  #####                        MINIO                                #######
  #########################################################################
  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9002:9002"
    volumes:
      - ~/factly/dega/minio/data:/export
      - ~/factly/dega/minio/config:/root/.minio
    environment:
      - MINIO_ACCESS_KEY=miniokey
      - MINIO_SECRET_KEY=miniosecret
    networks:
      - dega
    command: server -console-address :9002 /export

  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    volumes:
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    networks:
      - dega
    entrypoint: >
      /bin/sh -c " apk add --no-cache bash; wait-for-it.sh minio:9000 -- echo 'Minio is up. Creating the bucket!!'; /usr/bin/mc config host add myminio http://minio:9000 miniokey miniosecret; /usr/bin/mc mb myminio/dega; /usr/bin/mc anonymous set public myminio/dega; exit 0; "

  ###########################################################################
  #######                         IFRAMELY                            #######
  ###########################################################################
  iframely:
    image: factly/iframely:v1.5.0-102820
    ports:
      - "8061:8061"
    volumes:
      - ./iframely/config.local.js:/iframely/config.local.js
    networks:
      - dega

  ###########################################################################
  #######                         IMGPROXY                            #######
  ###########################################################################
  imgproxy:
    image: darthsim/imgproxy:v2.15.0
    ports:
      - 8080:8080
    environment:
      - IMGPROXY_BASE_URL=http://minio:9000/
      - IMGPROXY_TTL=31536000
    networks:
      - dega

  ###########################################################################
  #######                            NGINX                            #######
  ###########################################################################
  nginx:
    image: nginx:1.19.0-alpine
    ports:
      - 7001:80
    volumes:
      - ./nginx:/etc/nginx/conf.d
    restart: unless-stopped
    depends_on:
      - imgproxy
    networks:
      - dega

  ###########################################################################
  #######             UPLOAD SERVICES                                 #######
  ###########################################################################
  companion:
    image: transloadit/companion
    ports:
      - "3020:3020"
    env_file:
      - ./companion/.env

  ###########################################################################
  #######             SMTP SERVICES                                   #######
  ###########################################################################
  mailhog:
    build:
      context: ./mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - tagore

  ###########################################################################
  #######             Zitadel                                         #######
  ###########################################################################
  zitadel:
    restart: "always"
    image: "ghcr.io/zitadel/zitadel:stable"
    command: "start-from-init --config /config.yaml --config /secrets.yaml --steps /init-steps.yaml --masterkey h9tyO3xu9Qr5ygDhkMgc44x0j3tWHjPL --tlsMode disabled"
    ports:
      - "4455:4455"
    volumes:
      - "./zitadel/config.yaml:/config.yaml:ro"
      - "./zitadel/secrets.yaml:/secrets.yaml:ro"
      - "./zitadel/init-steps.yaml:/init-steps.yaml:ro"
    depends_on:
      - postgres
    networks:
      - dega

  ###########################################################################
  #######             SEARCH SERVICES                                 #######
  ###########################################################################
  meilisearch:
    image: getmeili/meilisearch:v0.28.0
    ports:
      - "7700:7700"
    volumes:
      - ~/factly/dega/meilisearch-0-28-0/data.ms/:/data.ms
    environment:
      # To put an upper limit of 100MB for the payload size during indexing
      - MEILI_HTTP_PAYLOAD_SIZE_LIMIT=104857600
      - MEILI_MASTER_KEY=password
    networks:
      - dega

  ###########################################################################
  ########                    CACHE SERVICES                          #######
  ###########################################################################
  redis:
    image: redis
    ports:
      - 6379:6379
    volumes:
      - ~/factly/dega/redis:/data
    command: redis-server --appendonly yes --requirepass redispass
    networks:
      - dega

  ###########################################################################
  #######             DEGA STUDIO UI, SERVER AND DB                   #######
  ###########################################################################
  dega-server:
    depends_on:
      - postgres
      - zitadel
    ports:
      - 7789:8000
      - 7788:8001
      - 7787:8002
    build:
      context: ./server
      dockerfile: Dockerfile.dev
    environment:
      - WAIT_HOSTS=postgres:5432, zitadel:4455
    volumes:
      - type: bind
        source: ./server
        target: /app
    restart: unless-stopped
    networks:
      - dega

  dega-migrate:
    depends_on:
      - postgres
      - zitadel
    build:
      context: ./server
      dockerfile: Dockerfile.migrate
    environment:
      - WAIT_HOSTS=postgres:5432, zitadel:4455
    volumes:
      - type: bind
        source: ./server
        target: /app
    networks:
      - dega

  hukz:
    depends_on:
      - dega-server
    ports:
      - 7790:8000
    image: factly/hukz
    environment:
      - WAIT_HOSTS=postgres:5432, dega-server:8000
      - HUKZ_DATABASE_HOST=postgres
      - HUKZ_DATABASE_USER=postgres
      - HUKZ_DATABASE_PASSWORD=postgres
      - HUKZ_DATABASE_NAME=hukz
      - HUKZ_DATABASE_PORT=5432
      - HUKZ_DATABASE_SSL_MODE=disable
      - HUKZ_NATS_URL=nats://nats:4222
      - HUKZ_NATS_USER_NAME=natsuser
      - HUKZ_NATS_USER_PASSWORD=natspassword
      - HUKZ_QUEUE_GROUP=dega
      - HUKZ_DEGA_TO_GOOGLE_CHAT=true
      - HUKZ_DEGA_TO_SLACK=false
      - HUKZ_MODE=development
    restart: unless-stopped
    networks:
      - dega

  hukz-migrate:
    depends_on:
      - dega-server
    image: factly/hukz
    environment:
      - WAIT_HOSTS=postgres:5432, dega-server:8000
      - HUKZ_DATABASE_HOST=postgres
      - HUKZ_DATABASE_USER=postgres
      - HUKZ_DATABASE_PASSWORD=postgres
      - HUKZ_DATABASE_NAME=hukz
      - HUKZ_DATABASE_PORT=5432
      - HUKZ_DATABASE_SSL_MODE=disable
      - HUKZ_NATS_URL=nats://nats:4222
      - HUKZ_NATS_USER_NAME=natsuser
      - HUKZ_NATS_USER_PASSWORD=natspassword
      - HUKZ_QUEUE_GROUP=dega
      - HUKZ_DEGA_TO_GOOGLE_CHAT=true
      - HUKZ_DEGA_TO_SLACK=false
      - HUKZ_MODE=development
    entrypoint: /app/hukz migrate
    networks:
      - dega

  nats:
    depends_on:
      - dega-server
      - hukz
    ports:
      - 4222:4222
      - 8222:8222
    command: "--user natsuser --pass natspassword"
    image: nats:latest
    restart: unless-stopped
    networks:
      - dega

  dega-studio:
    build:
      context: ./studio
      dockerfile: Dockerfile
      no_cache: true
      args:
        - CACHEBUST
    environment:
      - PUBLIC_URL=http://127.0.0.1:4455/.factly/dega/studio
      - REACT_APP_KAVACH_PUBLIC_URL=http://127.0.0.1:4455/.factly/kavach/web
      - REACT_APP_SACH_API_URL=https://sach-server.factly.in
      - WDS_SOCKET_HOST=127.0.0.1
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - NODE_ENV=development
    ports:
      - "3000:3000"
    volumes:
      - type: bind
        source: ./studio
        target: /app
      - /app/node_modules
    restart: unless-stopped
    networks:
      - dega

  dega-api:
    depends_on:
      - postgres
    ports:
      - 9001:8000
    build:
      context: ./api
      dockerfile: Dockerfile
    environment:
      - CONFIG_FILE=dega-api.yml
      - WAIT_HOSTS=postgres:5432
    volumes:
      - type: bind
        source: ./api
        target: /app
    restart: unless-stopped
    networks:
      - dega

  dega-templates:
    depends_on:
      - postgres
    ports:
      - 7791:8000
    build:
      context: ./templates
      dockerfile: Dockerfile
    environment:
      - WAIT_HOSTS=postgres:5432
    volumes:
      - type: bind
        source: ./templates
        target: /app
    restart: unless-stopped
    networks:
      - dega

networks:
  dega:
